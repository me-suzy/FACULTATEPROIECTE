{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f28\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Times R{\*\falt Times New Roman};}
{\f34\froman\fcharset238\fprq2 Times New Roman CE;}{\f35\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f37\froman\fcharset161\fprq2 Times New Roman Greek;}{\f38\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f39\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f40\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f41\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f50\fmodern\fcharset238\fprq1 Courier New CE;}
{\f51\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f53\fmodern\fcharset161\fprq1 Courier New Greek;}{\f54\fmodern\fcharset162\fprq1 Courier New Tur;}{\f55\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f56\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f57\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green48\blue0;}
{\stylesheet{\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \snext0 Normal;}{\s1\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 
\sbasedon0 \snext0 heading 1;}{\s2\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext0 heading 2;}{\s3\qj \fi709\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel2\rin0\lin0\itap0 
\b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext0 heading 3;}{\s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext0 heading 4;}{
\s5\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel4\rin0\lin0\itap0 \i\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext0 heading 5;}{\s6\ql \fi720\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel5\rin0\lin0\itap0 
\b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext0 heading 6;}{\s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext0 heading 7;}{
\s8\qc \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel7\rin0\lin0\itap0 \fs30\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext0 heading 8;}{\s9\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel8\rin0\lin0\itap0 
\i\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\qr \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 
\sbasedon0 \snext15 Body Text 2;}{\s16\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext16 Body Text;}{\s17\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext17 footnote text;}{\*\cs18 \additive \super \sbasedon10 footnote reference;}{\s19\qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext19 Body Text Indent 2;}{\s20\qj \fi720\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext20 Body Text Indent 3;}{
\s21\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs32\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext21 Body Text 3;}{\s22\qj \fi426\li0\ri0\sl-240\slmult0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\f28\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext22 Textnorm;}{\s23\ql \li0\ri0\nowidctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext23 footer;}{\*
\cs24 \additive \sbasedon10 page number;}{\s25\ql \li0\ri0\nowidctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 \sbasedon0 \snext25 header;}}{\*\listtable{\list\listtemplateid1175851500
\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01*;}{\levelnumbers;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 }{\listname ;}\listid-2}{\list\listtemplateid611720918
\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 
\fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2869\jclisttab\tx2869 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689
\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4309\jclisttab\tx4309 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0
{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5029\jclisttab\tx5029 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5749\jclisttab\tx5749 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6469\jclisttab\tx6469 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7189\jclisttab\tx7189 }{\listname ;}\listid79910921}
{\list\listtemplateid841124090\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2869\jclisttab\tx2869 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4309\jclisttab\tx4309 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5029\jclisttab\tx5029 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5749\jclisttab\tx5749 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6469\jclisttab\tx6469 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7189\jclisttab\tx7189 }
{\listname ;}\listid469135511}{\list\listtemplateid-1662897412\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691
\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2869\jclisttab\tx2869 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4309\jclisttab\tx4309 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5029\jclisttab\tx5029 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5749\jclisttab\tx5749 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6469\jclisttab\tx6469 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7189
\jclisttab\tx7189 }{\listname ;}\listid529488463}{\list\listtemplateid-1522379880\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689
\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0
{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2869\jclisttab\tx2869 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4309\jclisttab\tx4309 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5029\jclisttab\tx5029 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5749\jclisttab\tx5749 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6469\jclisttab\tx6469 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7189
\jclisttab\tx7189 }{\listname ;}\listid530269774}{\list\listtemplateid-752194984\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698703
\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698713\'02\'01.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0
{\leveltext\leveltemplateid67698715\'02\'02.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li2869\jclisttab\tx2869 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698703\'02\'03.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698713\'02\'04.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li4309\jclisttab\tx4309 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698715\'02\'05.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li5029\jclisttab\tx5029 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698703\'02\'06.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li5749\jclisttab\tx5749 }{\listlevel\levelnfc4\levelnfcn4\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698713\'02\'07.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li6469\jclisttab\tx6469 }{\listlevel\levelnfc2\levelnfcn2
\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698715\'02\'08.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li7189\jclisttab\tx7189 }{\listname ;}\listid558394924}
{\list\listtemplateid-1213403356\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2869\jclisttab\tx2869 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4309\jclisttab\tx4309 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5029\jclisttab\tx5029 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5749\jclisttab\tx5749 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6469\jclisttab\tx6469 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7189\jclisttab\tx7189 }
{\listname ;}\listid704524790}{\list\listtemplateid-273545078\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2869\jclisttab\tx2869 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4309\jclisttab\tx4309 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5029\jclisttab\tx5029 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5749\jclisttab\tx5749 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6469\jclisttab\tx6469 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7189\jclisttab\tx7189 }
{\listname ;}\listid895313559}{\list\listtemplateid1218328074\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2869\jclisttab\tx2869 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4309\jclisttab\tx4309 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5029\jclisttab\tx5029 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5749\jclisttab\tx5749 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6469\jclisttab\tx6469 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7189\jclisttab\tx7189 }
{\listname ;}\listid1037124863}{\list\listtemplateid-1682651570\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691
\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2869\jclisttab\tx2869 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4309\jclisttab\tx4309 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5029\jclisttab\tx5029 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5749\jclisttab\tx5749 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6469\jclisttab\tx6469 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7189
\jclisttab\tx7189 }{\listname ;}\listid1162889923}{\list\listtemplateid1202908844\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689
\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0
{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2869\jclisttab\tx2869 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4309\jclisttab\tx4309 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5029\jclisttab\tx5029 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5749\jclisttab\tx5749 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6469\jclisttab\tx6469 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7189
\jclisttab\tx7189 }{\listname ;}\listid1235625786}{\list\listtemplateid-237997892\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698703
\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698713\'02\'01.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0
{\leveltext\leveltemplateid67698715\'02\'02.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li2869\jclisttab\tx2869 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698703\'02\'03.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698713\'02\'04.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li4309\jclisttab\tx4309 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698715\'02\'05.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li5029\jclisttab\tx5029 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698703\'02\'06.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li5749\jclisttab\tx5749 }{\listlevel\levelnfc4\levelnfcn4\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698713\'02\'07.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li6469\jclisttab\tx6469 }{\listlevel\levelnfc2\levelnfcn2
\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698715\'02\'08.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li7189\jclisttab\tx7189 }{\listname ;}\listid1361010733
}{\list\listtemplateid-713110594\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7200\jclisttab\tx7200 }
{\listname ;}\listid1556694426}{\list\listtemplateid1614419172\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691
\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7200
\jclisttab\tx7200 }{\listname ;}\listid1560943268}{\list\listtemplateid1542344018\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698703
\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698713\'02\'01.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0
{\leveltext\leveltemplateid67698715\'02\'02.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li2880\jclisttab\tx2880 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698703\'02\'03.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698713\'02\'04.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698715\'02\'05.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li5040\jclisttab\tx5040 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698703\'02\'06.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc4\levelnfcn4\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698713\'02\'07.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li6480\jclisttab\tx6480 }{\listlevel\levelnfc2\levelnfcn2
\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698715\'02\'08.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li7200\jclisttab\tx7200 }{\listname ;}\listid1589533552
}{\list\listtemplateid-855871250\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2869\jclisttab\tx2869 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4309\jclisttab\tx4309 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5029\jclisttab\tx5029 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5749\jclisttab\tx5749 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6469\jclisttab\tx6469 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7189\jclisttab\tx7189 }
{\listname ;}\listid1656107613}{\list\listtemplateid-979445174\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'01\'00;}{\levelnumbers\'01;}\f0\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 }{\listname ;}\listid1657145870}{\list\listtemplateid1811609696\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext
\'02\'00.;}{\levelnumbers\'01;}\f0\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 }{\listname ;}\listid1714037035}{\list\listtemplateid338834980\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2869\jclisttab\tx2869 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3589\jclisttab\tx3589 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4309\jclisttab\tx4309 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5029
\jclisttab\tx5029 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 
\fi-360\li5749\jclisttab\tx5749 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6469\jclisttab\tx6469 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7189\jclisttab\tx7189 }{\listname ;}\listid1769692853}{\list\listtemplateid1073400704\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1429\jclisttab\tx1429 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2149\jclisttab\tx2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2869\jclisttab\tx2869 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3589\jclisttab\tx3589 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4309\jclisttab\tx4309 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5029
\jclisttab\tx5029 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 
\fi-360\li5749\jclisttab\tx5749 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6469\jclisttab\tx6469 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li7189\jclisttab\tx7189 }{\listname ;}\listid1793134996}{\list\listtemplateid-979445174\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold
\levelspace0\levelindent360{\leveltext\'01\'00;}{\levelnumbers\'01;}\f0\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 }{\listname ;}\listid1994597369}{\list\listtemplateid1811609696\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f0\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 }{\listname ;}\listid2132090014}}{\*\listoverridetable
{\listoverride\listid1657145870\listoverridecount0\ls1}{\listoverride\listid1657145870\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelold\levelspace0\levelindent360
{\leveltext\'01\'00;}{\levelnumbers\'01;}\f0\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 }}\ls2}{\listoverride\listid1994597369\listoverridecount0\ls3}{\listoverride\listid1994597369\listoverridecount1{\lfolevel\listoverrideformat
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelold\levelspace0\levelindent360{\leveltext\'01\'00;}{\levelnumbers\'01;}\f0\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 }}\ls4}{\listoverride\listid-2
\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 }}\ls5}{\listoverride\listid1714037035\listoverridecount0\ls6}{\listoverride\listid1714037035\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2
\levelold\levelspace0\levelindent360{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f0\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 }}\ls7}{\listoverride\listid1714037035\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc0
\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat3\levelold\levelspace0\levelindent360{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f0\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 }}\ls8}{\listoverride\listid1714037035
\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat4\levelold\levelspace0\levelindent360{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f0\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 }}\ls9}{\listoverride\listid1714037035\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat5\levelold\levelspace0\levelindent360{\leveltext
\'02\'00.;}{\levelnumbers\'01;}\f0\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 }}\ls10}{\listoverride\listid2132090014\listoverridecount0\ls11}{\listoverride\listid2132090014\listoverridecount1{\lfolevel\listoverrideformat{\listlevel
\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelold\levelspace0\levelindent360{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f0\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 }}\ls12}{\listoverride\listid1361010733
\listoverridecount0\ls13}{\listoverride\listid529488463\listoverridecount0\ls14}{\listoverride\listid79910921\listoverridecount0\ls15}{\listoverride\listid530269774\listoverridecount0\ls16}{\listoverride\listid1037124863\listoverridecount0\ls17}
{\listoverride\listid1235625786\listoverridecount0\ls18}{\listoverride\listid1769692853\listoverridecount0\ls19}{\listoverride\listid704524790\listoverridecount0\ls20}{\listoverride\listid1793134996\listoverridecount0\ls21}{\listoverride\listid895313559
\listoverridecount0\ls22}{\listoverride\listid558394924\listoverridecount0\ls23}{\listoverride\listid1560943268\listoverridecount0\ls24}{\listoverride\listid1556694426\listoverridecount0\ls25}{\listoverride\listid1589533552\listoverridecount0\ls26}
{\listoverride\listid1162889923\listoverridecount0\ls27}{\listoverride\listid1656107613\listoverridecount0\ls28}{\listoverride\listid469135511\listoverridecount0\ls29}}{\info{\author Florin}{\operator FDUMI}{\creatim\yr2003\mo3\dy16\hr14\min42}
{\revtim\yr2004\mo2\dy26\hr16\min25}{\printim\yr2003\mo4\dy9\hr16\min35}{\version120}{\edmins3005}{\nofpages18}{\nofwords7925}{\nofchars-32766}{\*\company Home}{\nofcharsws0}{\vern8247}}\paperw11909\paperh16834\margl1440\margr864\margt1008\margb1354 
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\nolnhtadjtbl \fet0\sectd 
\psz9\linex0\headery432\sectdefaultcl {\footer \pard\plain \s23\ql \li0\ri0\nowidctlpar\tqc\tx4320\tqr\tx8640\pvpara\phmrg\posxc\posy0\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\field{\*\fldinst {\cs24 PAGE  }
}{\fldrslt {\cs24\lang1024\langfe1024\noproof 5}}}{\cs24 
\par }\pard \s23\ql \li0\ri0\nowidctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 {
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\f34 
Capitolul 2 Proiectarea logic\'e3 a bazei de date
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }{\f34 Dup\'e3 definirea strategiei de proiectare se trece la proiectarea propriu-zis\'e3 (numit\'e3 \'bai proiectarea detaliat\'e3) a sistemului. Activit\'e3\'feile fazei de proiectare detaliat\'e3 privesc componentele principale ale oric\'e3
rui sistem informatic, respectiv baza de date, interfe\'feele (formulare, rapoarte, meniu) \'bai programele. Desf\'e3\'baurarea acestor activit\'e3\'fei nu este secven\'feial\'e3 ci, mai cur\'e2nd, paralel\'e3 \'bai iterativ\'e3
. Baza de date trebuie sa reflecte specifica\'feiile de proiectare privind formularele \'bai rapoartele din sistem, iar proiectarea formularelor \'bai rapoartelor nu poate fi finalizat\'e3 f\'e3r\'e3 ca schema bazei de date s\'e3 fie clar definit\'e3
. Totu\'bai, baza de date reprezint\'e3 \'84nucleul\'94 oric\'e3rui sistem informatic, \'een jurul s\'e3u \'84gravit\'e2nd\'94 celelalte componente, motiv pentru care ne vom opri mai \'eent\'e2i asupra problematicii proiect\'e3rii bazelor de date.
\par Principalele activit\'e3\'fei care formeaz\'e3 ciclul de via\'fe\'e3 al bazei de date sunt: proiectarea schemei logice, proiectarea fizic\'e3 a bazei de date \'bai alocarea datelor \'een re\'feea, implementarea \'bai \'eentre\'feinerea bazei de date. \'ce
n acest capitol ne vom opri doar asupra proiect\'e3rii schemei logice a bazei de date, respectiv a schemei rela\'feionale dat fiind c\'e3 modelul rela\'feional reprezint\'e3 ast\'e3zi de departe modul de organizare al datelor cel mai utilizat. Mai \'eent
\'e2i \'eens\'e3, vom prezenta c\'e2teva considera\'feii generale privind activit\'e3\'feile de modelare a datelor parcurse de-a lungul ciclului de via\'fe\'e3 a sistemelor care, sper\'e3m, vor avea darul de a oferi o mai bun\'e3 in\'fe
elegere a principiilor, conceptelor \'bai activit\'e3\'feilor de proiectare a bazelor de date. \'cen finalul capitolului vom prezenta c\'e2teva considera\'feii privind gestiunea tranzac\'feiilor \'eentr-o baz\'e3}{ de date.
\par 
\par }\pard\plain \s3\qj \fi709\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 2.1 Aplicarea principiului abstractiz\'e3rii \'een modelarea datelor
\par }{\b0 
\par }\pard\plain \s20\qj \fi720\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Principiul abstractiz\'e3rii reprezint\'e3 unul din principiile fundamentale aplicate \'ee
n proiectarea sistemelor informatice. Dup\'e3 cum vom vedea ulterior, el este utilizat \'bai la proiectarea arhitecturii programelor. Aplicarea sa permite st\'e3p\'e2nirea complexit\'e3\'feii sistemului prin luarea \'een considerare \'een mod e\'ba
alonat a diferitelor aspecte ale proiect\'e3rii sistemului. La un moment dat, anali\'batii se vor concentra doar asupra anumitor aspecte, ign}{or\'e2ndu-le pe celelalte, dar care vor fi luate \'een considerare ulterior.
\par }\pard\plain \qj \fi720\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Concret, aplicarea principiului abstractiz\'e3rii \'een modelarea datelor presupune considerarea a }{
trei niveluri de abstractizare,}{\f34  prezentate \'een figura 2.1: conceptual, logic \'bai fizic. Corespunz\'e3tor celor trei niveluri pot fi identificate trei activit\'e3\'fei de baz\'e3 \'een proiectarea bazelor de date:
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li1440\ri0\nowidctlpar\jclisttab\tx1440\faauto\ls24\rin0\lin1440\itap0 {\f34 analiza cerin\'feelor sistemului \'bai modelarea conceptual\'e3
 a datelor,
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}proiectarea logic\'e3 a bazei de date \'bai
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}proiectarea fizic\'e3 a bazei de date.
\par }\pard\plain \s20\qj \fi720\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {Prin }{\b\f34 modelarea conceptual\'e3 a datelor}{\f34  se urm\'e3re\'bate construirea unui model al datelor care s\'e3
 asigure transpunerea exact\'e3 a realit\'e3\'feii din domeniul analizat, f\'e3r\'e3 a lua \'een considerare cerin\'feele specifice unui model de organizare a datelor (cum este modelul rela\'fe
ional), criteriile de calitate privind organizarea datelor, cerin\'feele nefunc\'feionale ale sistemului \'bai criteriile de performan\'fe\'e3 privind stocarea \'bai accesarea datelor. \'cen acest sens, se construie\'bate diagrama entitate-rela\'fe
ie, care eviden\'feiaz\'e3 entit\'e3\'feile de date din sistem, atributele acestora, precum \'bai leg\'e3turile dintre entit\'e3\'fei. Modul \'een care vor fi implementate leg\'e3turile dintre entit\'e3\'fei, de exemplu, nu intereseaz\'e3 \'ee
n acest moment, aten\'feia fiind \'eendreptat\'e3 doar spre identificarea \'bai descrierea lor.
\par }{\b Pro}{\b\f34 iectarea logic\'e3}{\f34  presupune organizarea datelor \'een tabele \'bai coloane, conform regulilor modelului rela\'feional (acesta fiind modelul cel mai popular de organizare a datelor). Dup\'e3
 cum se poate observa din figura 2.1, proiectarea logic\'e3 a bazei de date presupune transformarea modelului conceptual al datelor prin aplicarea regulilor \'bai conceptelor specifice modelului rela\'feional \'ba
i a criteriilor de calitate aplicabile modelului logic al datelor, aspecte ignorate \'een etapa model\'e3rii conceptuale. Scopul urm\'e3rit const\'e3 \'een ob\'feinerea unui model rela\'feional pur, adic\'e3 neafectat de cerin\'feele nefunc\'feionale \'ba
i cele de performan\'fe\'e3 \'een accesarea datelor, nici de facilit\'e3\'feile oferite de diferite SGBD-uri existente pe pia\'fe\'e3. Toate aceste aspecte sunt \'eenglobate \'een etapa proiect\'e3rii}{ fizice a bazei de date.
\par }\pard\plain \s17\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\lang1024\langfe1024\noproof\langnp1033 
{\shpgrp{\*\shpinst\shpleft650\shptop-27\shpright8810\shpbottom4518\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz4\shplid1026
{\sp{\sn groupLeft}{\sv 2181}}{\sp{\sn groupTop}{\sv 1624}}{\sp{\sn groupRight}{\sv 10341}}{\sp{\sn groupBottom}{\sv 6169}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1027{\sp{\sn relLeft}{\sv 4701}}{\sp{\sn relTop}{\sv 2689}}{\sp{\sn relRight}{\sv 7443}}
{\sp{\sn relBottom}{\sv 3289}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 65536}}{\sp{\sn hspNext}{\sv 1027}}
{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
Modelul conceptual al datelor}{\fs20\lang1033\langfe1033\langnp1033 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34\fs20 (modelul entitate-rela\'feie)}{\v 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }}}}{\shp{\*\shpinst\shplid1028{\sp{\sn relLeft}{\sv 4701}}{\sp{\sn relTop}{\sv 4129}}{\sp{\sn relRight}{\sv 7443}}{\sp{\sn relBottom}{\sv 4729}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 131072}}{\sp{\sn hspNext}{\sv 1028}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\qc \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {Modelul logic al datelor}{\fs20\lang1033\langfe1033\langnp1033 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34\fs20 (modelul rela\'feional pur)}{\v\fs20 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20 
\par }}}}{\shp{\*\shpinst\shplid1029{\sp{\sn relLeft}{\sv 4701}}{\sp{\sn relTop}{\sv 5569}}{\sp{\sn relRight}{\sv 7443}}{\sp{\sn relBottom}{\sv 6169}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 196608}}{\sp{\sn hspNext}{\sv 1029}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\qc \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {Modelul fizic al datelor}{\fs20\lang1033\langfe1033\langnp1033 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34\fs20 (structura fizic\'e3 a datelor)}{\v\fs20\cf1 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }}}}{\shp{\*\shpinst\shplid1030{\sp{\sn relLeft}{\sv 6081}}{\sp{\sn relTop}{\sv 4729}}{\sp{\sn relRight}{\sv 6082}}{\sp{\sn relBottom}{\sv 5569}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shp{\*\shpinst\shplid1031{\sp{\sn relLeft}{\sv 6081}}{\sp{\sn relTop}{\sv 3289}}{\sp{\sn relRight}{\sv 6082}}{\sp{\sn relBottom}{\sv 4129}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shp{\*\shpinst\shplid1032{\sp{\sn relLeft}{\sv 6261}}{\sp{\sn relTop}{\sv 1969}}{\sp{\sn relRight}{\sv 6976}}{\sp{\sn relBottom}{\sv 2689}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shp{\*\shpinst\shplid1033{\sp{\sn relLeft}{\sv 6846}}{\sp{\sn relTop}{\sv 1624}}{\sp{\sn relRight}{\sv 8694}}{\sp{\sn relBottom}{\sv 2224}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 262144}}
{\sp{\sn hspNext}{\sv 1033}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Cerin\'fe}{\fs20 ele de date ale}{ sistemului}{\fs20 
\par }}}}{\shp{\*\shpinst\shplid1034{\sp{\sn relLeft}{\sv 4221}}{\sp{\sn relTop}{\sv 3409}}{\sp{\sn relRight}{\sv 5533}}{\sp{\sn relBottom}{\sv 4129}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shp{\*\shpinst\shplid1035{\sp{\sn relLeft}{\sv 2271}}{\sp{\sn relTop}{\sv 3109}}{\sp{\sn relRight}{\sv 4372}}{\sp{\sn relBottom}{\sv 3709}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 327680}}
{\sp{\sn hspNext}{\sv 1035}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\qr \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Regulile \'bai conceptele modelului rela\'feional
\par }}}}{\shp{\*\shpinst\shplid1036{\sp{\sn relLeft}{\sv 6621}}{\sp{\sn relTop}{\sv 3409}}{\sp{\sn relRight}{\sv 7933}}{\sp{\sn relBottom}{\sv 4129}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shp{\*\shpinst\shplid1037{\sp{\sn relLeft}{\sv 7776}}{\sp{\sn relTop}{\sv 3109}}{\sp{\sn relRight}{\sv 10341}}{\sp{\sn relBottom}{\sv 3709}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 393216}}
{\sp{\sn hspNext}{\sv 1037}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Cerin\'feele de calitate (flexibilitate, stabilitate, etc)}{\fs20 
\par }}}}{\shp{\*\shpinst\shplid1038{\sp{\sn relLeft}{\sv 6621}}{\sp{\sn relTop}{\sv 4849}}{\sp{\sn relRight}{\sv 7813}}{\sp{\sn relBottom}{\sv 5569}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shp{\*\shpinst\shplid1039{\sp{\sn relLeft}{\sv 7686}}{\sp{\sn relTop}{\sv 4534}}{\sp{\sn relRight}{\sv 9370}}{\sp{\sn relBottom}{\sv 5134}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 458752}}
{\sp{\sn hspNext}{\sv 1039}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Facilit\'e3\'feile SGBD-ului}{\fs20  ales
\par }}}}{\shp{\*\shpinst\shplid1040{\sp{\sn relLeft}{\sv 4221}}{\sp{\sn relTop}{\sv 4849}}{\sp{\sn relRight}{\sv 5533}}{\sp{\sn relBottom}{\sv 5569}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shp{\*\shpinst\shplid1041{\sp{\sn relLeft}{\sv 2181}}{\sp{\sn relTop}{\sv 4549}}{\sp{\sn relRight}{\sv 4357}}{\sp{\sn relBottom}{\sv 5149}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 524288}}
{\sp{\sn hspNext}{\sv 1041}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\qr \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Cerin\'feele nefunc\'feionale \'bai de performan\'fe\'e3
\par }}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8196\dpgroup\dpcount16\dpx650\dpy-27\dpxsize8160\dpysize4545\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {Modelul conceptual al datelor}{\fs20\lang1033\langfe1033\langnp1033 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34\fs20 (modelul entitate-rela\'feie)}{\v 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }}\dpx2520\dpy1065\dpxsize2742\dpysize600\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {Modelul logic al datelor}{\fs20\lang1033\langfe1033\langnp1033 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34\fs20 (modelul rela\'feional pur)}{\v\fs20 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20 
\par }}\dpx2520\dpy2505\dpxsize2742\dpysize600\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {Modelul fizic al datelor}{\fs20\lang1033\langfe1033\langnp1033 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34\fs20 (structura fizic\'e3 a datelor)}{\v\fs20\cf1 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }}\dpx2520\dpy3945\dpxsize2742\dpysize600\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx8160\dppty4545
\dpx3900\dpy3105\dpxsize1\dpysize840\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx8160\dppty4545\dpx3900\dpy1665\dpxsize1\dpysize840\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx8160\dppty0\dpptx0\dppty4545
\dpx4080\dpy345\dpxsize715\dpysize720\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Cerin\'fe}{\fs20 
ele de date ale}{ sistemului}{\fs20 
\par }}\dpx4665\dpy0\dpxsize1848\dpysize600\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpline\dpptx0\dppty0\dpptx8160\dppty4545\dpx2040\dpy1785\dpxsize1312\dpysize720
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\qr \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Regulile \'bai conceptele modelului rela\'feional
\par }}\dpx90\dpy1485\dpxsize2101\dpysize600\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpline\dpptx8160\dppty0\dpptx0\dppty4545\dpx4440\dpy1785\dpxsize1312\dpysize720
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Cerin\'feele de calitate (flexibilitate, stabilitate, etc)}{
\fs20 
\par }}\dpx5595\dpy1485\dpxsize2565\dpysize600\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpline\dpptx8160\dppty0\dpptx0\dppty4545\dpx4440\dpy3225\dpxsize1192\dpysize720
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Facilit\'e3\'feile SGBD-ului}{\fs20  ales
\par }}\dpx5505\dpy2910\dpxsize1684\dpysize600\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpline\dpptx0\dppty0\dpptx8160\dppty4545\dpx2040\dpy3225\dpxsize1312\dpysize720
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\qr \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Cerin\'feele nefunc\'feionale \'bai de performan\'fe\'e3

\par }}\dpx0\dpy2925\dpxsize2176\dpysize600\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }\pard\plain \s3\qj \fi709\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b0 
\par }\pard\plain \s6\ql \fi720\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel5\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }\pard\plain \ql \fi720\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par 
\par Figura 2.1 Nivelurile de abstractizare a datelor
\par }\pard \ql \fi720\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s20\qj \fi720\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {Principalele criterii de calitate utilizate \'een evaluarea modelului logic al datelor sunt}{\cs18\super \chftn {\footnote 
\pard\plain \s17\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\cs18\super \chftn }{ Simsion, G.C., }{\i Data Modeling Essentials. Analysis, Design, and Innovation}{
, second edition, The Coriolis Group, 2001, p. 11-15}}}{:
\par {\listtext\pard\plain\s20 \f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s20\qj \fi-360\li1440\ri0\nowidctlpar\jclisttab\tx1440\faauto\ls25\rin0\lin1440\itap0 {\i Completitudine}{. Modelul logic trebu}{\f34 ie s\'e3 con\'fe
in\'e3 toate datele necesare prelucr\'e3rilor \'bai ob\'feinerii ie\'bairilor din sistem.
\par {\listtext\pard\plain\s20 \f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\i\f34 Neredundan\'fe\'e3}{\f34 . Redundan\'fea datelor genereaz\'e3 probleme privind integritatea datelor (vezi anomaliile la actualizare) \'bai solicit
\'e3 procese suplimentare pentru \'eentre\'feinerea datelor (vor trebui actualizate toate copiile existente pentru o dat\'e3). De aceea, modelul logic trebuie s\'e3 fie format dintr-un set de tabele normalizate.
\par {\listtext\pard\plain\s20 \f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\i Reutilizabilitate}{\f34 . Schema logic\'e3 a bazei de date trebuie conceput\'e3 astfel \'eenc\'e2t ea s\'e3 satisfac\'e3 nu doar cerin\'fe
ele anticipate ale sistemului ci \'bai cele ale altor poten\'feiali utilizatori sau eventualele cerin\'fee viitoare care apar inevitabil. Dac\'e3 datele sunt organizate av\'e2nd \'een minte doar cerin\'fe
ele actuale, atunci reorganizarea datelor determinat\'e3 de apari\'feia unor noi cerin\'fee func\'feionale va fi foarte costisitoare.
\par {\listtext\pard\plain\s20 \f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\i\f34 Stabilitate \'bai flexibilitate}{\f34 . Aceste criterii vizeaz\'e3 u\'baurin\'fea adapt\'e3rii bazei de date la modific\'e3rile ulterioare ale cerin
\'feelor sistemului. Un model al datelor este considerat stabil dac\'e3 eventualele modific\'e3ri ale cerin\'feelor func\'feionale nu determin\'e3 modificarea sa. Schema bazei de date va fi considerat\'e3 mai stabil\'e3 sau mai pu\'fein stabil\'e3 \'ee
n func\'feie de amploarea modific\'e3rilor generate de schimbarea cerin\'feelor. Flexibilitatea unui model al datelor este dat\'e3 de u\'baurin\'fea extinderii sale pentru \'eenglobarea noilor cerin\'fee cu impact minim asupra structurii existente.
\par {\listtext\pard\plain\s20 \f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\i\f34 Simplitate \'bai elegan\'fe\'e3}{\f34 . Modelul logic al datelor trebuie s\'e3 ofere o clasificare natural\'e3 \'bai elegant\'e3
 a datelor. De exemplu, este inadecvat\'e3 existen\'fea tabelelor Furnizor \'bai Client at\'e2t timp c\'e2t unii parteneri de afaceri pot fi at\'e2t furnizori, c\'e2t \'bai clien\'fei. Aceea\'bai situa\'feie poate apare \'ee
n cazul facturilor, fiind neelegant\'e3 conceperea a dou\'e3 tabele, una pentru facturi emise \'bai alta pen}{tru facturi primite.
\par }\pard \s20\qj \fi720\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b Modelul fizic al datelor}{\f34 , rezultat \'een urma proiect\'e3rii fizice, este invizibil utilizatorilor \'bai programatorilor. El specific\'e3 modul de stocare fizic\'e3 \'ba
i accesare  a datelor, utiliz\'e2nd facilit\'e3\'feile oferite de un anumit SGBD. De exemplu, date din tabele diferite pot fi stocate fizic \'eempreun\'e3 pentru a putea fi transferate \'een memoria calculatorului printr-o singur\'e3 opera\'fe
iune. Luarea \'een considerare a acestor aspecte implic\'e3 \'84alterarea\'94 modelului logic (adic\'e3 a modelului rela\'feional pur), presupun\'e2nd uneori prejudicierea aspectelor calitative amintite anterior. Solu\'feia ideal\'e3 ar presupune ob\'fe
inerea performan\'feelor cerute \'een condi\'feiile p\'e3str\'e3rii aspectelor calitative ale modelului logic.
\par Obiectivul principal al proiect\'e3ri fizice const\'e3 \'een optimizarea performan\'feelor bazei de date \'een ce prive\'bate stocarea fizic\'e3 \'bai accesul la date. \'cen unele situa\'feii timpii de acces ceru\'fei pot fi ob\'feinu\'fe
i prin intermediul indec\'bailor \'eens\'e3, de multe ori este necesar\'e3 modificarea structurii logice a datelor prin }{\b procesu}{\b\f34 l denormaliz\'e3rii}{\f34 . Dac\'e3 la proiectarea schemei logice s-a urm\'e3rit prezervarea integrit\'e3\'fe
ii datelor prin procesul de normalizare, acum poate deveni necesar\'e3 introducerea unui anumit nivel de redundan\'fe\'e3 a datelor sau introducerii \'een schema bazei de date a c\'e2mpurilor calculate. Principala provocare const\'e3 \'een g\'e3
sirea compromisului optim \'eentre u\'baurin\'fea p\'e3str\'e3rii integrit\'e3\'feii datelor \'bai performan\'feele bazei de date. Denormalizarea implic\'e3 selectarea proceselor dominante (interogare \'bai actualizare a datelor) pe baza frecven\'fe
ei, volumului de date \'bai priorit\'e3\'feii acestora, evaluarea costurilor totale ale opera\'feiunilor de actualizare, interogare \'bai stocare a datelor, precum \'bai evaluarea efectelor determinate de pierderea integrit\'e3\'feii datelor.
\par }{De asemenea, la proiectarea }{\f34 fizic\'e3 vor fi luate \'een considerare \'bai facilit\'e3\'feile oferite de SGBD-ul ales. Diferen\'feele dintre diferite SGBD-uri se refer\'e3 adesea la tipurile de date suportate, reprezentarea sau nu a rela\'fe
iilor dintre clase \'bai subclase, implementarea rela\'feiilor recursive.}{
\par }{\f34 Prin urmare, schema logic\'e3 a bazei de date poate diferi, mai mult sau mai pu\'fein, de schema fizic\'e3 a bazei de date.
\par }\pard\plain \s3\qj \fi720\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b0 
\par }\pard \s3\qj \fi709\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel2\rin0\lin0\itap0 {\f34 2.2 Demersul proiect\'e3rii bazelor de date
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }{\f34 Proiectarea schemei logice a bazei de date poate fi realizat\'e3 \'een mai multe moduri. Abordarea tradi\'feional\'e3, aplicat\'e3 \'een special bazelor de date rela\'feionale, presupune constituirea rela\'fe
iei universale prin reunirea tuturor datelor elementare (atribute) identificate \'een faza de analiz\'e3 \'bai repartizarea lor \'een tabele pe baza analizei dependen\'feelor dintre atribute (dependen\'fee func\'feionale, dependen\'fee multivaloare \'ba
i de jonc\'feiune) \'bai aplicarea procesului de normalizare. Aceast\'e3 abordare a \'eenregistrat unele succese \'een cazul bazelor de date de dimensiuni mici \'bai medii, \'eens\'e3 ea devine foarte greoaie \'ee
n cazul bazelor de date de dimensiuni mari \'bai foarte mari.
\par Introducerea modelului entitate-rela\'feie (ER) a determinat reorientarea speciali\'batilor c\'e3tre o nou\'e3 abordare \'een proiectarea bazelor de date. Modelarea conceptual\'e3 a datelor cu ajutorul diagramelor entitate-rela\'feie (DER) a fost descris
\'e3 prima dat\'e3 \'een lucr\'e3rile lui P.P. Chen, publicate \'een 1976, de\'bai primele \'eencerc\'e3ri de formalizare sunt \'eenregistrate \'een anii }{\lang1033\langfe1033\langnp1033 \rquote }{\f34 60 \'bai apar\'fe
in lui Charles Bachman. Ulterior, modelul lui Chen a \'eenregistrat numeroase modific\'e3ri \'bai extensii. Simplitatea, u\'baurin\'fea \'eenv\'e3\'fe\'e3rii \'bai posibilitatea formaliz\'e3rii cerin\'feelor sistemului a\'baa cum sunt ele \'ee
n realitate, independent de op\'feiunile de organizare \'bai tehnologice au sporit vertiginos popularitatea modelului ER \'eenc\'e3 din anii }{\lang1033\langfe1033\langnp1033 \rquote }{80.
\par }{\f34 Noua abordare presupune, mai \'eent\'e2i, modelarea conceptual\'e3 a datelor prin construirea diagramei entitate-rela\'feie (DER), care eviden\'feiaz\'e3 entita\'feile de date ale sistemului, propriet\'e3\'feile acestora \'bai leg\'e3
turile dintre entit\'e3\'fei. Ulterior, prin aplicarea unor reguli simple, are loc transformarea modelului entitate-rela\'feie \'een schema logic\'e3 a bazei de date. Tabelele astfel ob\'feinute sunt \'een final analizate din perspectiva normaliz\'e3
rii put\'e2nd rezulta noi tabele.
\par Utilizarea modelului ER ofer\'e3 o serie de avantaje fa\'fea de abordarea tradi\'feional\'e3}{\cs18\super \chftn {\footnote \pard\plain \s17\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\cs18\super \chftn }{\f34  adaptare dup\'e3 Teorey, T.J., }{\i Database Modeling & Design}{, Morgan Kaufmann Publishers, Inc, 1999, p.46}}}{:
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\jclisttab\tx1429\faauto\ls15\rin0\lin1429\itap0 {\b\f34 reprezint\'e3 un util instrument de comunicare}{\f34  \'ee
ntre proiectan\'fei \'bai utilizatorii finali pe parcursul fazelor de analiz\'e3 \'bai proiectare logic\'e3;
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\b\f34 este foarte u\'baor de \'een\'feeles \'bai conceput}{\f34 . \'cen general, prezentarea grafic\'e3 permite exprimarea  unui volum mare de informa\'fe
ii sub o form\'e3 compact\'e3, u\'baor de urm\'e3rit \'bai \'een\'feeles;
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\b\f34 utilizeaz\'e3 conceptul de abstractizare}{, ceea ce }{\f34 reduce considerabil num\'e3rul obiectelor luate \'een considerare la analiza \'ba
i proiectarea bazei de date. Prin utilizarea no\'feiunii de entitate ca abstractizare pentru datele elementare (atribute) se vor analiza mai pu\'feine obiecte (num\'e3rul entita\'feilor de date este mult mai mic dec\'e2t num\'e3
rul datelor elementare din sistem) \'bai mai pu\'feine rela\'feii \'eentre obiecte (num\'e3rul rela\'feiilor dintre entit\'e3\'fei este mult mai mic dec\'e2t num\'e3rul rela\'feiilor de dependen\'fe\'e3 existente \'eentre atribute). De\'ba
i datele elementare sunt reprezentate \'bai \'een aceast\'e3 abordare, ca propriet\'e3\'fei ale entit\'e3\'feilor, totu\'bai num\'e3rul dependen\'feelor ce trebuie analizate este mult redus, fiind luate \'een considerare doar dependen\'fe
ele la nivelul entit\'e3\'feilor (adic\'e3 dependen\'feele dintre atributele unei entit\'e3\'fei) \'bai nu la nivelul \'eentregii baze de date (adic\'e3 dependen\'feele dintre atributele rela\'feiei universale).
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\b\f34 Existen\'fea unui set complet de reguli de transformare a DER \'een tabele ale bazei de date}{\f34 . Aceste reguli permit transformarea simpl\'e3 \'ba
i rapid\'e3 a cerin\'feelor informa\'feionale ale sistemului, structurate \'een DER, \'een baza de date. Majoritatea instrumentelor CASE ofer\'e3 suport pentru generarea automat\'e3 a bazei de date \'een func\'feie de SGBD-ul dorit.
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Din cele prezentate rezult\'e3 c\'e3 exist\'e3 dou\'e3 strategii de proiectare a bazei de date:
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\jclisttab\tx1429\faauto\ls16\rin0\lin1429\itap0 {\b strategia bottom-up}{\f34 , reprezint\'e3 abordarea tradi\'feional
\'e3 \'bai presupune constituirea rela\'feiei universale care urmeaz\'e3 a fi supus\'e3 normaliz\'e3rii pentru a se ob\'feine tabelele bazei de date;
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\b strategia top-down}{, presupune construirea DER care va fi apoi transfor}{\f34 mat\'e3 \'eentr-un set de tabele prin aplicarea unor reguli. Tabelele astfel ob
\'feinute vor fi analizate din perspectiva normaliz\'e3rii.
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Pornind de la aceste dou\'e3 strategii, pot fi identificate mai multe demersuri de proiectare a bazei de date, mai mult sau mai pu\'fein riguroase. Dou\'e3 dintre ele corespund celor dou
\'e3 strategii, ele fiind descrise pe scurt anterior. Un demers mai riguros presupune combinarea celor dou\'e3 strategii; se aplic\'e3 ambele strategii ob\'fein\'e2ndu-se dou\'e3 modele logice ale datelor, iar din compararea lor va rezulta schema logic
\'e3 final\'e3 a bazei de date. Acest demers presupune parcurgerea urm\'e3torilor patru pa\'bai:
\par {\listtext\pard\plain\f34\lang1048\langfe1033\langnp1048 \hich\af34\dbch\af0\loch\f34 1.\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\jclisttab\tx1429\faauto\ls23\rin0\lin1429\itap0 {\f34 Construirea c\'e2
te unui model logic al datelor pentru fiecare categorie de utilizatori identificat\'e3. Acest pas presupune normalizarea imaginilor asupra bazei de date (formulare \'bai rapoarte) specifice fiec\'e3rei categorii de utilizatori.
\par {\listtext\pard\plain\f34\lang1048\langfe1033\langnp1048 \hich\af34\dbch\af0\loch\f34 2.\tab}Integrarea perspectivelor, care presupune combinarea tuturor perspectivelor normalizate ale utilizatorilor \'bai ob\'feinerea schemei globale a bazei de date.

\par {\listtext\pard\plain\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 3.\tab}}{\'centocm}{\f34 irea modelului conceptual al datelor pentru \'eentregul sistem \'bai transformarea acestuia \'eentr-un set de tabele normalizate.
\par {\listtext\pard\plain\f34\lang1048\langfe1033\langnp1048 \hich\af34\dbch\af0\loch\f34 4.\tab}Compararea modelului logic consolidat al datelor rezultat prin integrarea perspectivelor utilizatorilor cu cel ob\'feinut prin transfor}{marea DER, \'ee
n vederea definirii modelului logic final.
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 \'cen practic\'e3, poate fi angajat un alt demers mai simplu (sau simplist!) de proiectare a bazei de date, const\'e2nd \'een transpunerea direct\'e3 a cerin\'feelor sistemului \'ee
n modelul logic al datelor, f\'e3r\'e3 parcurgerea unor pa\'bai intermediari. Un asemenea demers poate fi aplicat \'een cazul bazelor de date de dimensiuni foarte mici sau dac\'e3 proiectantul are o mare experien\'fe\'e3 \'ee
n domeniul problemei. Oricum, alegerea unui demers sau a altuia depinde de complexitatea bazei de date, experien\'fea echipei de proiectare, timpul \'bai resursele financiare disponibile sau cerin\'feele de calitate dorite.
\par \'cen continuare ne vom opri doar asupra strategiei \'84top-down\'94, normalizarea fiind discutat\'e3 la cursul \'84Baze de date\'94. Vom prezenta activit\'e3\'feile, conceptele \'bai regulile de lucru utilizate \'een aplicarea acestei strategii.
\par }{
\par }\pard\plain \s3\qj \fi709\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 2.3 Analiza cerin\'feelor sistemului \'bai modelarea conceptual\'e3 a datelor
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }{\f34 Analiza cerin\'feelor informa\'feionale ale noului sistem reprezint\'e3 etapa cea mai important\'e3 din ciclul de via\'fe\'e3 al bazei de date, implic\'e2nd \'bai volumul cel mai mare de munc\'e3. \'cenglobarea tuturor acestor cerin\'fee \'ee
n schema final\'e3 a bazei de date reprezint\'e3 o provocare pentru proiectan\'fei. Culegerea cerin\'feelor se realizeaz\'e3 \'een faza de analiz\'e3 a sistemului prin intervievarea utilizatorilor sau alte metode de determinare a cerin\'fe
elor. Obiectivele majore ale analizei cerin\'feelor vizeaz\'e3}{\cs18\super \chftn {\footnote \pard\plain \s17\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\cs18\super \chftn }{ Teorey, T.J., }{
\i Database Modeling & Design}{, Morgan Kaufmann Publishers, Inc, 1999, p.46-47}}}{:
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\jclisttab\tx1429\faauto\ls17\rin0\lin1429\itap0 {\f34 descrierea cerin\'feelor de date ale sistemului \'ee
n termenii entit\'e3\'feilor de date;
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}colectarea informa\'feiilor care descriu entit\'e3\'feile de date \'bai rela\'feiile dintre acestea care s\'e3 permit\'e3 construirea DER;
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}determinarea tranzac\'feiilor ce vor fi efectuate asupra bazei de date \'bai descrierea interac\'feiunii dintre tranzac\'feii \'bai entit\'e3\'feile de date;

\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}definirea cerin\'feelor nefunc\'feionale ale bazei de date, cum ar fi cele legate de performan\'fee, integritate, securitate, administrarea datelor;
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}specificarea platformei hardware \'bai software pe care va fi implementat\'e3 baz}{a de date.
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Dup\'e3 formularea clar\'e3 a cerin\'feelor se trece la formalizarea acestora, respectiv \'eentocmirea DER. Modelul ER este construit pe baza a trei clase de obiecte: entit\'e3\'fe
i, atribute \'bai rela\'feii. Atributele descriu entit\'e3\'feile \'bai rela\'feiile dintre acestea. Prin urmare, aceast\'e3 activitate presupune parcurgerea a doi pa\'bai:
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\jclisttab\tx1429\faauto\ls18\rin0\lin1429\itap0 {\f34 identificarea \'bai descrierea entit\'e3\'feilor \'bai
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}definirea rela\'feiilor dintre entit\'e3\'fei.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s3\qj \fi709\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 2.3.1 Identificarea \'bai descrierea entit\'e3\'feilor de date
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }{\f34 Prin entit\'e3\'fei de date se face referire la obiectele despre care este nevoie s\'e3 se memoreze informa\'feii. De regul\'e3, ele se refer\'e3 la locuri, persoane, lucruri, evenimente \'een leg\'e3tur\'e3 cu care exist\'e3
 interes din perspectiva stoc\'e3rii datelor. Un caz particular al unei entit\'e3\'fei este numit }{\b\f34 instan\'fe\'e3}{ sau }{\b\f34 ocuren\'fe\'e3}{\f34 . Astfel, o entitate va con\'feine mai multe instan\'fee de acela\'bai tip, adic\'e3 instan\'fe
e cu propriet\'e3\'fei comune. Unii autori utilizeaz\'e3 no\'feiunile de clas\'e3 de entit\'e3\'fei \'bai entitate pentru entitate \'bai, respectiv, instan\'fe\'e3.
\par Exemple de entit\'e3\'fei sunt: }{\i angajat}{, care va a}{\f34 vea drept instan\'fee to\'fei angaja\'feii dintr-o firm\'e3; }{\i furnizor}{\f34 , care va con\'feine to\'fei partenerii de afaceri cu care firma are rela\'feii de aprovizionare; }{\i consum}
{\f34 , care va avea drept instan\'fee toate documentele de consum \'eenregistrate \'eentr-o perioad\'e3 de timp \'een firm\'e3.}{ Alte exemple pot fi: departament, produs, student, disciplina, profesor, localitate etc.
\par }{\f34 O entitate este descris\'e3 prin intermediul }{\b atributelor}{\f34 . Atributele reprezint\'e3 propriet\'e3\'fei ale entit\'e3\'feii pe care o descriu, toate instan\'feele unei entit\'e3\'fei fiind descrise de acelea\'ba
i atribute. Un atribut al unei instan\'fee dintr-o entitate se nume\'bate }{\b valoarea atributului}{\f34 . De exemplu, atributele care caracterizeaz\'e3 entitatea angajat pot fi: marca, numele, adresa, num\'e3rul de telefon, CNP, func\'fe
ia, salariul etc.
\par Exist\'e3 dou\'e3 ti}{puri de atribute: }{\i identificatori}{\f34  \'bai }{\i descriptori}{\f34 . Un identificator (numit \'bai cheie) are rolul de a identifica \'een mod unic fiecare instan\'fe\'e3 care poate popula o entitate de date. \'ce
n schimb, descriptorii specific\'e3 caracteristici ne-unice ale instan\'feelor unei entit\'e3\'fei.
\par Depistarea entit\'e3\'feilor unui sistem nu reprezint\'e3 o activitate tocmai u\'baoar\'e3. \'cen multe situa\'feii analistul trebuie s\'e3 decid\'e3 dac\'e3 un obiect reprezint\'e3 o entitate, un atribut al unei entit\'e3\'fei sau o rela\'feie \'ee
ntre entit\'e3\'fei. S\'e3 lu\'e3m drept exemplu obiect}{ul }{\i localitate}{\f34 ; el reprezint\'e3 o entitate sau un atribut? \'cen sistemul de aprovizionare, el ar putea reprezenta o entitate sau doar atributul entit\'e3\'fe
ii furnizor. Un alt exemplu este }{\i comanda}{\f34 ; reprezint\'e3 comanda o entitate sau o rela\'feie \'eentre entit\'e3\'feile }{\i Material}{\f34  \'bai }{\i Furnizor}{?
\par }\pard\plain \s19\qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 La clasificarea entit\'e3\'feilor \'bai atributelor trebuie respectate urm\'e3toarele dou\'e3 reguli:
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \qj \fi-360\li1429\ri0\nowidctlpar\jclisttab\tx1429\faauto\ls19\rin0\lin1429\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\f34 
entit\'e3\'feile trebuie s\'e3 con\'fein\'e3 informa\'feii descriptive}{\f34 . Conform acestei reguli, dac\'e3 pentru un obiect exist\'e3 informa\'feii descriptive (adic\'e3 mai multe atribute care s\'e3
 o caracterizeze) atunci acel obiect constituie o entitate. Altfel, dac\'e3 pentru obiectul respectiv este necesar doar un identificator, nefiind solicitate atribute de tip descriptori, atunci acel obiect va reprezenta un atribut. Dac\'e3 pentru obiectul 
}{\i Localitate}{\f34  sunt necesare mai multe informa\'feii descriptive (cum ar fi jude\'feul, regiunea, num\'e3rul popula\'feiei etc.) atunci el trebuie clasificat ca entitate. Dac\'e3 se solicit\'e3 doar numele localit\'e3\'fe
ii, atunci el va fi doar un atribut al unei entit\'e3\'fei (cum ar fi furnizor, angajat, departament etc.).
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\b\f34 un atribut trebuie ata\'baat acelei entit\'e3\'fei pe care o descrie \'een modul cel mai direct}{\f34 . De regul\'e3, o proprietate se refer\'e3
 la o singur\'e3 entitate, deci un atribut va fi reg\'e3sit doar la o singur\'e3 enti}{tate. \'cen sistemul de aprovizionare, de exemplu, entitatea }{\i\f34 Comand\'e3}{\f34  nu va con\'fe
ine nici numele furnizorului (sau codul acestuia), nici denumirea materialului (sau codul materialului); aceste atribute caracterizeaz\'e3 mai direct entit\'e3\'feile }{\i Furnizor}{\f34  \'bai, respectiv}{, }{\i Material}{\f34 . Nu intr\'e3 sub inciden
\'fea acestei reguli sinonimele. Un exemplu \'een acest sens poate fi atributul }{\i adresa}{: el poate caracteriza at\'e2t entitatea }{\i angajat}{\f34 , c\'e2t \'bai entitatea }{\i furnizor}{.
\par }\pard\plain \s19\qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 A\'baadar, clasificarea unui obiect ca entitate sau atribut presupune analiza cu mult\'e3 aten\'feie a documenta\'fe
iei sistemului \'een care sunt formulate \'bai detaliate cerin\'feele informa\'feionale.
\par }{
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\f34 2.3.2 Definirea rela\'feiilor dintre entit\'e3\'feile de date
\par }{
\par }{\f34 O rela\'feie reprezint\'e3 leg\'e3tura care exist\'e3 \'een lumea real\'e3 \'eentre una, dou\'e3 sau mai multe entit\'e3\'fei. Rela\'feiile nu au o existen\'fe\'e3 fizic\'e3 sau conceptual\'e3, ci depind de entit\'e3\'fe
ile asociate. Altfel spus, existen\'fea rela\'feiilor depinde de existen\'fea entit\'e3\'feilor asociate (\'een schimb existen\'fea unei entit\'e3\'fei nu depinde de existen\'fea unei rela\'feii cu o alt\'e3 entitate). Un caz particular al unei rela\'fe
ii se mai nume\'bate }{\b\f34 instan\'fea rela\'feiei}{ sau }{\b\f34 ocuren\'fea rela\'feiei}{\f34 . Instan\'fea rela\'feiei se refer\'e3 la leg\'e3tura dintre instan\'feele entit\'e3\'feilor asociate. Exemple de rela\'feii sunt: }{\i emite}{\f34 , \'ee
ntre entit\'e3\'feile }{\i Factura}{\f34  \'bai }{\i Furnizor}{; }{\i\f34 con\'feine}{\f34 , \'eentre entit\'e3\'feile }{\i Factura}{\f34  \'bai }{\i Produs}{; }{\i este condus}{\f34 , \'eentre entit\'e3\'feile }{\i Departament}{\f34  \'bai }{\i Angajat}{
\f34  sau orice verb care care descrie conexiunea dintre entit\'e3\'fei.
\par Descrierea unei rela\'feii presupune specificarea urm\'e3toarelor elemente: ordinul (gradul), cardinalitatea, rolul \'bai eventualele atribute care o caracterizeaz\'e3. \'cen continuare ne vom opri pe r\'e2nd asupra fiec\'e3rui element descriptiv.
\par }{\b\f34 Ordinul rela\'feiei}{\f34  este dat de num\'e3rul entit\'e3\'feilor asociate printr-o rela\'feie. Conform acestui criteriu, rela\'feiile pot fi}{ clasificate \'een:
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\jclisttab\tx1429\faauto\ls20\rin0\lin1429\itap0 {\i\f34 rela\'feii recursive}{\f34 , numite \'bai rela\'feii ale entit
\'e3\'feii cu ea \'eens\'e3\'bai. Acest tip de rela\'feie leag\'e3 dou\'e3 instan\'fee ale aceleia\'bai entit\'e3\'fei. Un exemplu de rela\'feie recursiv\'e3 se reg\'e3se\'bate \'een figura 2.10.}{\i 
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\i\f34 rela\'feii binare}{\f34 , \'een care sunt implicate dou\'e3 entit\'e3\'fei. Acest tip de rela\'feii sunt de departe cele mai \'eent\'e2lnite \'ee
n lumea real\'e3. Mai mult, unele metode utilizeaz\'e3 doar acest tip de rela\'feii la construirea modelului ER. Exemple de rela\'feii binare se reg\'e3sesc \'een figurile 2.6 \endash  2.9 \'bai 2.10.}{\i 
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\i\f34 rela\'feii de ord}{\i inul n}{\f34 , numite \'bai rela\'feii }{\b n}{\f34 -are. Acest tip de rela\'feii se stabile\'bate \'eentre trei sau mai multe entit
\'e3\'fei. Dac\'e3 num\'e3rul entit\'e3\'feilor implicate \'eentr-o rela\'feie este 3, atunci vom avea o rela\'feie ternar\'e3. Astfel de exemple sunt prezentate \'een figurile 2.12, 2.13 \'bai 2.14. Rela\'feiile ternare sunt mai rar \'eent\'e2lnite \'ee
n lumea real\'e3, ele fiind utilizate atunci c\'e2nd nu este suficient\'e3 utilizarea rela\'feiilor binare pentru descrierea cu acurate\'fee a semanticii rela\'feiei respective. }{\i 
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Urm\'e3torul element utilizat pentru descrierea rela\'feiilor \'eel reprezint\'e3 }{\b cardinalitatea}{\f34 . Cardinalitatea unei rela\'feii define\'bate num\'e3rul instan\'fe
elor unei entit\'e3\'fei care pot fi asociate unei instan\'fee a celeilalte entit\'e3\'fei prin intermediul rela\'feiei considerate. Pentru o rela\'feie dat\'e3 trebuie specificat\'e3 cardinalitatea pentru fiecare entitate asociat\'e3. Cardinalitatea rela
\'feiei pentru o entitate este sugerat\'e3 printr-o pereche de valori, \'een cazul rela\'feiilor binare trebuind specificate dou\'e3 astfel de perechi de valori. Valorile care compun o astfel de pereche semnific\'e3:
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\jclisttab\tx1429\faauto\ls21\rin0\lin1429\itap0 {\b\f34 cardinalitatea minim\'e3}{\f34 
, pentru care sunt posibile valorile \'840\'94 sau \'841\'94, \'bai
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\b\f34 cardinalitatea maxim\'e3}{\f34 , pentru care sunt posibile valorile \'841\'94 sau \'84M\'94 (adic\'e3 \'84multe\'94).
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 S\'e3 lu\'e3m drept exemplu rela\'feia }{\i emite/este emis}{\f34  dintre entit\'e3\'feile }{\i Furnizor}{\f34  \'bai }{\i Factura}{, pr}{\f34 ezentat\'e3 \'ee
n figura 2.2. Cardinalitatea minim\'e3 a rela\'feiei pentru entitatea }{\i Factura}{\f34  este \'841\'94, iar cea maxim\'e3 este tot \'841\'94; cardinalitatea rela\'feiei pentru entitatea }{\i Furnizor}{\f34  este \'840\'94, respectiv \'84M\'94
. Prin urmare, \'een rela\'feia }{\i emite/este emis}{, unui furnizor (care}{\f34  este o instan\'fe\'e3 a entit\'e3\'feii }{\i Furnizor}{\f34 ) \'eei poate corespunde minim 0 \'bai maxim \'84multe\'94 facturi (adic\'e3 instan\'fee ale entit\'e3\'feii }{
\i Factura}{\f34 ), \'een timp ce unei facturi \'eei corespunde minim un furnizor \'bai maxim tot un furnizor. Dac\'e3 lu\'e3m \'een considerare \'bai numele rela\'feiei (sau rolurile entit\'e3\'feilor \'een cadrul rela\'feiei), atunci o rela\'fe
ie poate fi citit\'e3 \'een ambele sensuri astfel:
\par }{\'84un furnizor emite 0 sau mai multe facturi\'94, respectiv
\par }{\f34 \'84o factur\'e3 este emis\'e3 de un furnizor \'bai numai unul\'94.
\par }{\fs20\lang1024\langfe1024\noproof\langnp1033 {\shpgrp{\*\shpinst\shpleft1581\shptop162\shpright7941\shpbottom1002\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz5\shplid1042
{\sp{\sn groupLeft}{\sv 2661}}{\sp{\sn groupTop}{\sv 5584}}{\sp{\sn groupRight}{\sv 9021}}{\sp{\sn groupBottom}{\sv 6424}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1043{\sp{\sn relLeft}{\sv 2661}}{\sp{\sn relTop}{\sv 5704}}{\sp{\sn relRight}{\sv 4101}}{\sp{\sn relBottom}{\sv 6304}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}
{\sp{\sn lTxid}{\sv 589824}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Factura
\par }}}}{\shp{\*\shpinst\shplid1044{\sp{\sn relLeft}{\sv 7461}}{\sp{\sn relTop}{\sv 5704}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 6304}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 655360}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furnizor
\par }}}}{\shp{\*\shpinst\shplid1045{\sp{\sn relLeft}{\sv 4941}}{\sp{\sn relTop}{\sv 5584}}{\sp{\sn relRight}{\sv 6621}}{\sp{\sn relBottom}{\sv 6424}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 4}}{\sp{\sn lTxid}{\sv 720896}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Emitere
\par }}}}{\shp{\*\shpinst\shplid1046{\sp{\sn relLeft}{\sv 4101}}{\sp{\sn relTop}{\sv 6004}}{\sp{\sn relRight}{\sv 4941}}{\sp{\sn relBottom}{\sv 6004}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1047{\sp{\sn relLeft}{\sv 6606}}{\sp{\sn relTop}{\sv 6004}}
{\sp{\sn relRight}{\sv 7446}}{\sp{\sn relBottom}{\sv 6004}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1048{\sp{\sn relLeft}{\sv 3996}}{\sp{\sn relTop}{\sv 5689}}{\sp{\sn relRight}{\sv 4836}}{\sp{\sn relBottom}{\sv 6049}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 786432}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 (0,M)
\par }}}}{\shp{\*\shpinst\shplid1049{\sp{\sn relLeft}{\sv 6846}}{\sp{\sn relTop}{\sv 5689}}{\sp{\sn relRight}{\sv 7686}}{\sp{\sn relBottom}{\sv 6049}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 851968}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 (1,1)
\par }}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8197\dpgroup\dpcount8\dpx1581\dpy162\dpxsize6360\dpysize840\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\fs20 Factura
\par }}\dpx0\dpy120\dpxsize1440\dpysize600\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furnizor
\par }}\dpx4800\dpy120\dpxsize1560\dpysize600\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Emitere
\par }}\dpx2280\dpy0\dpxsize1680\dpysize840\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6360\dppty0\dpptx0\dppty840\dpx1440\dpy420\dpxsize840\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6360\dppty0\dpptx0\dppty840\dpx3945\dpy420\dpxsize840\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 (0,M)
\par }}\dpx1335\dpy105\dpxsize840\dpysize360\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 (1,1)
\par }}\dpx4185\dpy105\dpxsize840\dpysize360\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Figura 2.2 Cardinalitatea rela\'feiilor
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }{\f34 Anterior am prezentat clasificarea rela\'feiilor \'een func\'feie de gradul lor. Un alt criteriu de clasificare a rela\'feiilor este legat de cardinalitatea maxim\'e3. Astfel, \'een cazul rela\'feiilor recursive \'ba
i al celor binare vom avea trei tipuri de rela\'feii:
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\jclisttab\tx1429\faauto\ls22\rin0\lin1429\itap0 {\b\f34 rela\'feii de tipul 1:1 (unu-la-unu)}{\f34 , adic\'e3 o instan
\'fe\'e3 a entit\'e3\'feii X este asociat\'e3 unei singure instan\'fee a entit\'e3\'feii Y \'bai reciproc. Exemple se reg\'e3sesc \'een figurile 2.6 \'bai 2.7.
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\b\f34 rela\'feii de tipul 1:N (unu-la}{\b -multe)}{\f34 , \'eensemn\'e2nd c\'e3 o instan\'fe\'e3 a entit\'e3\'feii X poate fi asociat\'e3 la }{\i n}{\f34 
 instan\'fee ale entit\'e3\'feii Y, \'een timp ce o instan\'fe\'e3 a entit\'e3\'feii Y va fi asociat\'e3 doar unei singure instan\'fee a entit\'e3\'feii X. Acest tip de rela\'feii este cel mai des \'eent\'e2lnit \'een lumea real\'e3, exem
ple fiind prezentate \'een figurile 2.8 \'bai 2.9.
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\b\f34 Rela\'feii de tipul M:N (multe-la-multe)}{\f34 , care presupun c\'e3 orice instan\'fe\'e3 a entit\'e3\'feii X poate fi asociat\'e3 mai multor instan\'fe
e ale entit\'e3\'feii Y, iar o instan\'fe\'e3 a entit\'e3\'feii Y poate de asemenea s\'e3 aib\'e3 asociate mai multe instan\'fee ale entit\'e3\'feii X (vezi figura 2.11).
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Generaliz\'e2nd, se poate afirma c\'e3 o rela\'feie de ordinul n va \'eenregistra n+1 tipuri de rela\'feii din punctul de vedere al cardinalit\'e3\'feii maxime. Dac\'e3, dup\'e3
 cum deja am v\'e3zut, \'een cazul unei rela\'feii de ordinul 2 avem 3 tipuri de rela\'feii, pentru o rela\'feie de ordinul 3 (rela\'feie ternar\'e3) vom avea 3+1=4 tipuri de rela\'feii: }{\b 1:1:1}{, }{\b 1:1:P}{, }{\b 1:N:P}{\f34  \'bai }{\b 
M:N:P(multe-la-multe-la-multe)}{\f34 . Exemple pentru aceste tipuri de rela\'feii sunt prezentate \'een figurile 2.12, 2.13 \'bai 2.14.
\par }{Am dis}{\f34 cutat p\'e2n\'e3 acum importan\'fea cardinalit\'e3\'feii maxime, \'eens\'e3 \'bai }{\b\f34 cardinalitatea minim\'e3}{\f34  are o semnifica\'feie important\'e3 \'een proiectarea bazelor de date, ea fiind legat\'e3 de conceptul de }{\b\f34 
restric\'feie de dependen\'fe\'e3}{\cs18\b\super \chftn {\footnote \pard\plain \s17\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\cs18\super \chftn }{ Korth, H.F., Silberschatz, A., }{\i 
Sistemes de gestion de bases de donees}{, McGraw-Hill, Paris, 1988, citat \'een Fotache, M., }{\i\f34 Baze de date rela\'feionale. Organizare \'bai interogare}{\f34 , Ed. Junimea, Ia\'bai, 1996, p. 69}}}{\f34 . Dac\'e3 existen\'fea instan\'fe
ei x din entitatea X depinde de existen\'fea instan\'feei y din entitatea Y, se spune c\'e3 x este dependent\'e3 de y; de aici rezult\'e3 c\'e3 \'batergerea entit\'e3\'feii y atrage automat \'batergerea entit\'e3\'feii x din baza de date. Se spune c\'e3
 existen\'fea instan\'feei x depinde de existen\'fea instan\'feei y. Entitatea Y este denumit\'e3 entitate dominant\'e3, iar entitatea X este denumit\'e3 entitate dependent\'e3.
\par Revenind la exemplul anterior cu rela\'feia }{\i emite/este emisa}{, entitatea }{\i Factura}{\f34  este dependent\'e3 de entitatea }{\i Furnizor}{, deci }{\i Furnizor}{\f34  este o entitate dominant\'e3. \'aatergerea unei facturi nu atrage automat \'bai 
\'batergerea furnizorului care a emis-o, deoarece este posibil ca \'een baza de date s\'e3 mai r\'e3m\'e2n\'e3 facturi primite de la furnizorul respectiv. \'cen schimb, \'batergerea unui furnizor atrage dup\'e3 sine \'ba
tergerea tuturor facturilor aferente acestuia.
\par Rela\'feiile dintre entit\'e3\'fei pot fi clasificate dup\'e3 cardinalitatea minim\'e3 \'een dou\'e3 tipuri: }{\b\f34 rela\'feii facultative}{\f34  \'bai }{\b\f34 rela\'feii obligatorii}{\f34 . Altfel spus, participarea unei entit\'e3\'fei \'eentr-o rela
\'feie poate fi facultativ\'e3 sau obligatorie; participarea op\'feional\'e3 este pus\'e3 \'een eviden\'fe\'e3 prin cardinalitatea minim\'e3 \'840\'94 pentru o entitate, iar cardinalitatea minim\'e3 \'841\'94 semnific\'e3 faptul c\'e3
 acea entitate este obligatoriu s\'e3 participe \'eentr-o rela\'feie. Se observ\'e3 c\'e3 \'een rela\'feia }{\i\f34 emite/este emis\'e3}{ entitatea }{\i Factura}{\f34  are cardinalitatea minim\'e3 \'841\'94, deci este obligatorie participarea oric\'e3
rei instan\'fee (facturi) \'eentr-o rela\'feie, \'een timp ce cardinalitatea minim\'e3 pentru entitatea }{\i Furnizor}{\f34  este \'840\'94, ceea ce \'eenseamn\'e3 c\'e3 nu este obligatorie participarea fiec\'e3rui furnizor \'een rela\'feia }{\i\f34 
emite/este emis\'e3}{\f34  (va putea exista un furnizor care s\'e3 nu participe \'een nici o rela\'feie).
\par }{\b Rolul}{\f34  define\'bate func\'feia care atrage entitatea \'eentr-o rela\'feie. Pentru o rela\'feie trebuie specificat rolul fiec\'e3rei entit\'e3\'fei asociate. De exemplu, \'een rela\'feia dintre }{\i Factura}{\f34  \'bai }{\i Furnizor}{\f34 
 exemplificat\'e3 \'een figura 2.2, rolul entit\'e3\'feii Furniz}{or este }{\i Emite}{\f34 , iar cel al entit\'e3\'feii Factura este }{\i\f34 este emis\'e3}{\f34 . Specificarea rolurilor jucate de entit\'e3\'fei \'een DER ajut\'e3
 la clarificarea aspectelor semantice ale model\'e3rii datelor, precum \'bai la citirea rela\'feiilor, dup\'e3 cum s-a v\'e3zut anterior. Prin combinarea rolurilor jucate de entit\'e3\'feile asociate se ob\'feine numele rela\'feiei (emite/este emis\'e3
). Totu\'bai, unele metode de recomand\'e3 utilizarea unui singur nume pentru o rela\'feie, stabilit prin alegerea unui substantiv care s\'e3 reflecte logica leg\'e3turii dintre entit\'e3\'feile respective. De exemplu, pentru rela\'fe
ia din figura 2.2 se poate utiliza numele }{\i\f34 Cump\'e3rare}{ sau }{\i Emitere}{\f34 . \'cen aceast\'e3 variant\'e3, rolul fiec\'e3rei entit\'e3\'fei nu mai este specificat \'een mod explicit, \'eens\'e3 el rezult\'e3 implicit din numele atribuit rela
\'feiei. \'cen lipsa unui substantiv semnificativ pentru logica rela\'feiei se poate alege un nume format din ini\'feialele entit\'e3\'feilor asociate.
\par \'cen sf\'e2r\'bait, descrierea rela\'feiilor impune \'bai specificarea }{\b atributelor}{\f34  asociate, dac\'e3 ele exist\'e3. De exemplu, rela\'feia }{\i Examen}{\f34  dintre entit\'e3\'feile Student \'bai Disciplin\'e3 are ca atribute proprii }{\i 
Data_exam}{\f34  \'bai }{\i Nota}{\f34 . \'centradev\'e3r, atributul }{\i Nota}{\f34  reprezint\'e3 o proprietate rela\'feiei dintre un student \'bai o disciplin\'e3 la care sus\'feine examen, adic\'e3 o proprietate a rela\'feiei stabilite \'eentre dou
\'e3 instan\'fee ale celor dou\'e3 entit\'e3\'fei. Dac\'e3 }{\i Nota}{\f34  ar fi atribuit\'e3 uneia din cele dou\'e3 entit\'e3\'fei, atunci am avea un atribut multivaloare, deoarece un student poate avea mai multe note (pentru fiecare disciplin\'e3
 la care a sus\'feinut examen), iar la o disciplin\'e3 ar putea exista mai multe note (pentru fiecare student care a sus\'feinut examen la disciplina respectiv\'e3). Modul de repezentare grafic\'e3 a atributelor asociate rela\'feiilor este prezentat \'ee
n figura 2.3. Dac\'e3 unele nota\'feii nu utilizeaz\'e3 un simbol special pentru rela\'feii (a\'baa cum este rombul \'een figura 2.3) atunci se va introduce \'een diagram\'e3 o entitate asociativ\'e3 care, pentru moment, nu va avea cheie primar\'e3.

\par Rela\'feii purt\'e3toare de atribute sunt \'eent\'e2lnite doar \'een cazul rela\'feiilor binare de tipul \'84multe-la-multe\'94 sau a rela\'feiilor ternare. Rela\'feiile binare de tipul \'84unu-la-unu\'94 sau \'84unu-la-multe\'94
 nu pot avea atribute, deoarece cel pu\'fein una dintre entit\'e3\'feile asociate prezint\'e3 cardinalitatea maxim\'e3 \'84unu\'94, ceea ce \'eenseamn\'e3 c\'e3 eventualele atribute ale rela\'feiei vor putea fi ata\'baate unei entit\'e3\'fei f\'e3r\'e3 }{
ambiguitate.
\par }{\fs20\lang1024\langfe1024\noproof\langnp1033 {\shpgrp{\*\shpinst\shpleft1341\shptop76\shpright7821\shpbottom3436\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz6\shplid1050
{\sp{\sn groupLeft}{\sv 3141}}{\sp{\sn groupTop}{\sv 2344}}{\sp{\sn groupRight}{\sv 9621}}{\sp{\sn groupBottom}{\sv 5704}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1051{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 4221}}
{\sp{\sn groupBottom}{\sv 2464}}{\sp{\sn relLeft}{\sv 5584}}{\sp{\sn relTop}{\sv 2344}}{\sp{\sn relRight}{\sv 7096}}{\sp{\sn relBottom}{\sv 3179}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}
{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1052{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 2464}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 917504}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Profesor
\par }{\b\fs20\cf1 Prof_id
\par }{\fs20\cf1 Prof_nume
\par }}}}{\shp{\*\shpinst\shplid1053{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1864}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 1864}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1054{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 4221}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 3141}}{\sp{\sn relTop}{\sv 3806}}{\sp{\sn relRight}{\sv 4653}}{\sp{\sn relBottom}{\sv 4639}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1055
{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 983040}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Disciplina
\par }{\b\fs20\cf1 Disc_id
\par }{\fs20\cf1 Disc_den
\par }}}}{\shp{\*\shpinst\shplid1056{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1057{\sp{\sn groupLeft}{\sv 7341}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 9021}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 8109}}{\sp{\sn relTop}{\sv 3806}}{\sp{\sn relRight}{\sv 9621}}{\sp{\sn relBottom}{\sv 4639}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1058
{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 1048576}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Student
\par }{\b\fs20\cf1 Stud_id
\par }{\fs20\cf1 Stud_nume
\par }}}}{\shp{\*\shpinst\shplid1059{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1060{\sp{\sn relLeft}{\sv 5409}}{\sp{\sn relTop}{\sv 3701}}
{\sp{\sn relRight}{\sv 7246}}{\sp{\sn relBottom}{\sv 4744}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 4}}{\sp{\sn lTxid}{\sv 1114112}}{\sp{\sn dxTextLeft}{\sv 0}}{\sp{\sn dyTextTop}{\sv 0}}{\sp{\sn dxTextRight}{\sv 0}}
{\sp{\sn dyTextBottom}{\sv 0}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\cf1 Examinare
\par }}}}{\shp{\*\shpinst\shplid1061{\sp{\sn relLeft}{\sv 4653}}{\sp{\sn relTop}{\sv 4222}}{\sp{\sn relRight}{\sv 5409}}{\sp{\sn relBottom}{\sv 4222}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1062{\sp{\sn relLeft}{\sv 7246}}{\sp{\sn relTop}{\sv 4222}}
{\sp{\sn relRight}{\sv 8109}}{\sp{\sn relBottom}{\sv 4222}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}
{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1063{\sp{\sn relLeft}{\sv 6341}}{\sp{\sn relTop}{\sv 3179}}
{\sp{\sn relRight}{\sv 6341}}{\sp{\sn relBottom}{\sv 3701}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}
{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1064{\sp{\sn relLeft}{\sv 6273}}{\sp{\sn relTop}{\sv 3179}}
{\sp{\sn relRight}{\sv 6706}}{\sp{\sn relBottom}{\sv 3492}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 1179648}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\fs20\cf1 1
\par }}}}{\shp{\*\shpinst\shplid1065{\sp{\sn relLeft}{\sv 4599}}{\sp{\sn relTop}{\sv 3909}}{\sp{\sn relRight}{\sv 5031}}{\sp{\sn relBottom}{\sv 4222}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 1245184}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {M
\par }}}}{\shp{\*\shpinst\shplid1066{\sp{\sn relLeft}{\sv 7786}}{\sp{\sn relTop}{\sv 3909}}{\sp{\sn relRight}{\sv 8216}}{\sp{\sn relBottom}{\sv 4222}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 1310720}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {N
\par }}}}{\shp{\*\shpinst\shplid1067{\sp{\sn relLeft}{\sv 4461}}{\sp{\sn relTop}{\sv 5224}}{\sp{\sn relRight}{\sv 6179}}{\sp{\sn relBottom}{\sv 5704}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 3}}{\sp{\sn lTxid}{\sv 1376256}}
{\sp{\sn WrapText}{\sv 2}}{\sp{\sn anchorText}{\sv 1}}{\sp{\sn fRotateText}{\sv 0}}{\sp{\sn fFitShapeToText}{\sv 0}}{\sp{\sn fFitTextToShape}{\sv 0}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}
{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn lineJoinStyle}{\sv 1}}{\sp{\sn fLine}{\sv 1}}{\sp{\sn fHitTestLine}{\sv 1}}{\sp{\sn lineFillShape}{\sv 1}}{\sp{\sn fShadow}{\sv 0}}{\sp{\sn fshadowObscured}{\sv 0}}{\sp{\sn f3D}{\sv 0}}
{\sp{\sn fc3DMetallic}{\sv 0}}{\sp{\sn fc3DUseExtrusionColor}{\sv 0}}{\sp{\sn fc3DLightFace}{\sv 1}}{\sp{\sn fc3DConstrainRotation}{\sv 1}}{\sp{\sn fc3DRotationCenterAuto}{\sv 0}}{\sp{\sn fc3DParallel}{\sv 1}}
{\sp{\sn fc3DKeyHarsh}{\sv 1}}{\sp{\sn fc3DFillHarsh}{\sv 0}}{\sp{\sn fCalloutAccentBar}{\sv 0}}{\sp{\sn fCalloutTextBorder}{\sv 1}}{\sp{\sn fCalloutMinusX}{\sv 0}}{\sp{\sn fCalloutMinusY}{\sv 0}}{\sp{\sn fCalloutDropAuto}{\sv 0}}
{\sp{\sn fCalloutLengthSpecified}{\sv 0}}{\sp{\sn dxWrapDistLeft}{\sv 0}}{\sp{\sn dxWrapDistRight}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fAllowOverlap}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Data_exam
\par }}}}{\shp{\*\shpinst\shplid1068{\sp{\sn relLeft}{\sv 6482}}{\sp{\sn relTop}{\sv 5224}}{\sp{\sn relRight}{\sv 8181}}{\sp{\sn relBottom}{\sv 5704}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 3}}{\sp{\sn lTxid}{\sv 1441792}}
{\sp{\sn WrapText}{\sv 2}}{\sp{\sn anchorText}{\sv 1}}{\sp{\sn fRotateText}{\sv 0}}{\sp{\sn fFitShapeToText}{\sv 0}}{\sp{\sn fFitTextToShape}{\sv 0}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}
{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn lineJoinStyle}{\sv 1}}{\sp{\sn fLine}{\sv 1}}{\sp{\sn fHitTestLine}{\sv 1}}{\sp{\sn lineFillShape}{\sv 1}}{\sp{\sn fShadow}{\sv 0}}{\sp{\sn fshadowObscured}{\sv 0}}{\sp{\sn f3D}{\sv 0}}
{\sp{\sn fc3DMetallic}{\sv 0}}{\sp{\sn fc3DUseExtrusionColor}{\sv 0}}{\sp{\sn fc3DLightFace}{\sv 1}}{\sp{\sn fc3DConstrainRotation}{\sv 1}}{\sp{\sn fc3DRotationCenterAuto}{\sv 0}}{\sp{\sn fc3DParallel}{\sv 1}}
{\sp{\sn fc3DKeyHarsh}{\sv 1}}{\sp{\sn fc3DFillHarsh}{\sv 0}}{\sp{\sn fCalloutAccentBar}{\sv 0}}{\sp{\sn fCalloutTextBorder}{\sv 1}}{\sp{\sn fCalloutMinusX}{\sv 0}}{\sp{\sn fCalloutMinusY}{\sv 0}}{\sp{\sn fCalloutDropAuto}{\sv 0}}
{\sp{\sn fCalloutLengthSpecified}{\sv 0}}{\sp{\sn dxWrapDistLeft}{\sv 0}}{\sp{\sn dxWrapDistRight}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fAllowOverlap}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Nota_exam
\par }}}}{\shp{\*\shpinst\shplid1069{\sp{\sn relLeft}{\sv 5369}}{\sp{\sn relTop}{\sv 4744}}{\sp{\sn relRight}{\sv 6280}}{\sp{\sn relBottom}{\sv 5224}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn WrapText}{\sv 2}}
{\sp{\sn fRotateText}{\sv 0}}{\sp{\sn fFitShapeToText}{\sv 0}}{\sp{\sn fFitTextToShape}{\sv 0}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}
{\sp{\sn lineJoinStyle}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLine}{\sv 1}}{\sp{\sn fHitTestLine}{\sv 1}}{\sp{\sn lineFillShape}{\sv 1}}{\sp{\sn fShadow}{\sv 0}}{\sp{\sn fshadowObscured}{\sv 0}}{\sp{\sn f3D}{\sv 0}}{\sp{\sn fc3DMetallic}{\sv 0}}
{\sp{\sn fc3DUseExtrusionColor}{\sv 0}}{\sp{\sn fc3DLightFace}{\sv 1}}{\sp{\sn fc3DConstrainRotation}{\sv 1}}{\sp{\sn fc3DRotationCenterAuto}{\sv 0}}{\sp{\sn fc3DParallel}{\sv 1}}{\sp{\sn fc3DKeyHarsh}{\sv 1}}{\sp{\sn fc3DFillHarsh}{\sv 0}}
{\sp{\sn fCalloutAccentBar}{\sv 0}}{\sp{\sn fCalloutTextBorder}{\sv 1}}{\sp{\sn fCalloutMinusX}{\sv 0}}{\sp{\sn fCalloutMinusY}{\sv 0}}{\sp{\sn fCalloutDropAuto}{\sv 0}}{\sp{\sn fCalloutLengthSpecified}{\sv 0}}{\sp{\sn dxWrapDistLeft}{\sv 0}}
{\sp{\sn dxWrapDistRight}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fAllowOverlap}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1070{\sp{\sn relLeft}{\sv 6280}}{\sp{\sn relTop}{\sv 4744}}
{\sp{\sn relRight}{\sv 7292}}{\sp{\sn relBottom}{\sv 5224}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn WrapText}{\sv 2}}
{\sp{\sn fRotateText}{\sv 0}}{\sp{\sn fFitShapeToText}{\sv 0}}{\sp{\sn fFitTextToShape}{\sv 0}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}
{\sp{\sn lineJoinStyle}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLine}{\sv 1}}{\sp{\sn fHitTestLine}{\sv 1}}{\sp{\sn lineFillShape}{\sv 1}}{\sp{\sn fShadow}{\sv 0}}{\sp{\sn fshadowObscured}{\sv 0}}{\sp{\sn f3D}{\sv 0}}{\sp{\sn fc3DMetallic}{\sv 0}}
{\sp{\sn fc3DUseExtrusionColor}{\sv 0}}{\sp{\sn fc3DLightFace}{\sv 1}}{\sp{\sn fc3DConstrainRotation}{\sv 1}}{\sp{\sn fc3DRotationCenterAuto}{\sv 0}}{\sp{\sn fc3DParallel}{\sv 1}}{\sp{\sn fc3DKeyHarsh}{\sv 1}}{\sp{\sn fc3DFillHarsh}{\sv 0}}
{\sp{\sn fCalloutAccentBar}{\sv 0}}{\sp{\sn fCalloutTextBorder}{\sv 1}}{\sp{\sn fCalloutMinusX}{\sv 0}}{\sp{\sn fCalloutMinusY}{\sv 0}}{\sp{\sn fCalloutDropAuto}{\sv 0}}{\sp{\sn fCalloutLengthSpecified}{\sv 0}}{\sp{\sn dxWrapDistLeft}{\sv 0}}
{\sp{\sn dxWrapDistRight}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fAllowOverlap}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8198
\dpgroup\dpcount15\dpx1341\dpy76\dpxsize6480\dpysize3360\dpgroup\dpcount3\dpx2443\dpy0\dpxsize1512\dpysize835\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\fs20\cf1 Profesor
\par }{\b\fs20\cf1 Prof_id
\par }{\fs20\cf1 Prof_nume
\par }}\dpx0\dpy0\dpxsize1512\dpysize835\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6480\dppty3360\dpx0\dpy313\dpxsize1512\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy1462\dpxsize1512\dpysize833\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Disciplina
\par }{\b\fs20\cf1 Disc_id
\par }{\fs20\cf1 Disc_den
\par }}\dpx0\dpy0\dpxsize1512\dpysize833\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6480\dppty3360\dpx0\dpy312\dpxsize1512\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx4968\dpy1462\dpxsize1512\dpysize833\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Student
\par }{\b\fs20\cf1 Stud_id
\par }{\fs20\cf1 Stud_nume
\par }}\dpx0\dpy0\dpxsize1512\dpysize833\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6480\dppty3360\dpx0\dpy312\dpxsize1512\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\cf1 Examinare
\par }}\dpx2268\dpy1357\dpxsize1837\dpysize1043\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6480\dppty0\dpptx0\dppty3360
\dpx1512\dpy1878\dpxsize756\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6480\dppty3360\dpx4105\dpy1878\dpxsize863\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6480\dppty0\dpptx0\dppty3360
\dpx3200\dpy835\dpxsize0\dpysize522\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\fs20\cf1 1
\par }}\dpx3132\dpy835\dpxsize433\dpysize313\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {M
\par }}\dpx1458\dpy1565\dpxsize432\dpysize313\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {N
\par }}\dpx4645\dpy1565\dpxsize430\dpysize313\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Data_exam
\par }}\dpx1320\dpy2880\dpxsize1718\dpysize480\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Nota_exam
\par }}\dpx3341\dpy2880\dpxsize1699\dpysize480\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6480\dppty0\dpptx0\dppty3360
\dpx2228\dpy2400\dpxsize911\dpysize480\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6480\dppty3360\dpx3139\dpy2400\dpxsize1012\dpysize480\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Figura 2.3 Exemplu de rela\'feie purt\'e3toare de atribute
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }{\f34 Aplicarea tuturor conceptelor prezentate anterior permit descrierea suficient de clar\'e3 a tuturor rela\'feiilor \'eentre entit\'e3\'fei identificate \'een domeniul problemei analizate. O aten\'feie deosebit\'e3 trebuie acordat\'e3 }{\b\f34 rela
\'feiilor redundante}{\f34 . Dou\'e3 sau mai multe rela\'feii sunt considerate redundante atunci c\'e2nd ele sunt utilizate pentru a reprezenta acela\'bai concept. Un exemplu de rela\'feie redundant\'e3 este cea dintre }{\i Furnizor}{\f34  \'bai }{\i 
Plata}{\f34  din figura 2.4. Rela\'feia dintre }{\i Furnizor}{\f34  \'bai }{\i Plata}{\f34  este mai cur\'e2nd una indirect\'e3, deoarece se urm\'e3re\'bate plata facturilor primite. Dac\'e3 s-ar \'feine o eviden\'fe\'e3 global\'e3 a datoriilor c\'e3
tre furnizori, atunci ar trebui eliminat\'e3 rela\'feia dintre }{\i Factura}{\f34  \'bai }{\i Plata}{\f34 . Indiferent de tipul de eviden\'fe\'e3, una din cele dou\'e3 rela\'feii trebuie eliminat\'e3.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\lang1024\langfe1024\noproof\langnp1033 
{\shpgrp{\*\shpinst\shpleft1821\shptop-93\shpright6741\shpbottom1842\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz3\shplid1071
{\sp{\sn groupLeft}{\sv 3021}}{\sp{\sn groupTop}{\sv 6769}}{\sp{\sn groupRight}{\sv 7941}}{\sp{\sn groupBottom}{\sv 8704}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1072{\sp{\sn relLeft}{\sv 3021}}{\sp{\sn relTop}{\sv 6904}}{\sp{\sn relRight}{\sv 4461}}{\sp{\sn relBottom}{\sv 7384}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}
{\sp{\sn lTxid}{\sv 1507328}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {Furnizor
\par }}}}{\shp{\*\shpinst\shplid1073{\sp{\sn relLeft}{\sv 4821}}{\sp{\sn relTop}{\sv 8224}}{\sp{\sn relRight}{\sv 6261}}{\sp{\sn relBottom}{\sv 8704}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 1572864}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {Factura
\par }}}}{\shp{\*\shpinst\shplid1074{\sp{\sn relLeft}{\sv 6501}}{\sp{\sn relTop}{\sv 6904}}{\sp{\sn relRight}{\sv 7941}}{\sp{\sn relBottom}{\sv 7384}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 1638400}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {Plata
\par }}}}{\shpgrp{\*\shpinst\shplid1075{\sp{\sn groupLeft}{\sv 3741}}{\sp{\sn groupTop}{\sv 7384}}{\sp{\sn groupRight}{\sv 4821}}{\sp{\sn groupBottom}{\sv 8464}}{\sp{\sn relLeft}{\sv 3741}}
{\sp{\sn relTop}{\sv 7384}}{\sp{\sn relRight}{\sv 4821}}{\sp{\sn relBottom}{\sv 8464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1076{\sp{\sn relLeft}{\sv 3741}}{\sp{\sn relTop}{\sv 7384}}{\sp{\sn relRight}{\sv 3741}}{\sp{\sn relBottom}{\sv 8464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}
{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1077{\sp{\sn relLeft}{\sv 3741}}{\sp{\sn relTop}{\sv 8464}}
{\sp{\sn relRight}{\sv 4821}}{\sp{\sn relBottom}{\sv 8464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1078{\sp{\sn relLeft}{\sv 4461}}{\sp{\sn relTop}{\sv 7144}}{\sp{\sn relRight}{\sv 6501}}{\sp{\sn relBottom}{\sv 7144}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shpgrp{\*\shpinst\shplid1079{\sp{\sn groupLeft}{\sv 6261}}{\sp{\sn groupTop}{\sv 7384}}{\sp{\sn groupRight}{\sv 7221}}{\sp{\sn groupBottom}{\sv 8464}}{\sp{\sn relLeft}{\sv 6261}}
{\sp{\sn relTop}{\sv 7384}}{\sp{\sn relRight}{\sv 7221}}{\sp{\sn relBottom}{\sv 8464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1080{\sp{\sn relLeft}{\sv 6261}}{\sp{\sn relTop}{\sv 8464}}{\sp{\sn relRight}{\sv 7221}}{\sp{\sn relBottom}{\sv 8464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}
{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1081{\sp{\sn relLeft}{\sv 7221}}{\sp{\sn relTop}{\sv 7384}}
{\sp{\sn relRight}{\sv 7221}}{\sp{\sn relBottom}{\sv 8464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1082{\sp{\sn relLeft}{\sv 4101}}{\sp{\sn relTop}{\sv 8104}}{\sp{\sn relRight}{\sv 4941}}{\sp{\sn relBottom}{\sv 8584}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 1703936}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,m)
\par }}}}{\shp{\*\shpinst\shplid1083{\sp{\sn relLeft}{\sv 4371}}{\sp{\sn relTop}{\sv 6769}}{\sp{\sn relRight}{\sv 5211}}{\sp{\sn relBottom}{\sv 7249}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 1769472}}{\sp{\sn hspNext}{\sv 1083}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,1)
\par }}}}{\shp{\*\shpinst\shplid1084{\sp{\sn relLeft}{\sv 3621}}{\sp{\sn relTop}{\sv 7339}}{\sp{\sn relRight}{\sv 4461}}{\sp{\sn relBottom}{\sv 7819}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 1835008}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,1)
\par }}}}{\shp{\*\shpinst\shplid1085{\sp{\sn relLeft}{\sv 6141}}{\sp{\sn relTop}{\sv 8104}}{\sp{\sn relRight}{\sv 6981}}{\sp{\sn relBottom}{\sv 8584}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 1900544}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,m)
\par }}}}{\shp{\*\shpinst\shplid1086{\sp{\sn relLeft}{\sv 7101}}{\sp{\sn relTop}{\sv 7354}}{\sp{\sn relRight}{\sv 7941}}{\sp{\sn relBottom}{\sv 7834}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 1966080}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,m)
\par }}}}{\shp{\*\shpinst\shplid1087{\sp{\sn relLeft}{\sv 5781}}{\sp{\sn relTop}{\sv 6784}}{\sp{\sn relRight}{\sv 6621}}{\sp{\sn relBottom}{\sv 7264}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 2031616}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,m)
\par }}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8195\dpgroup\dpcount13\dpx1821\dpy-93\dpxsize4920\dpysize1935\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
Furnizor
\par }}\dpx0\dpy135\dpxsize1440\dpysize480\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {Factura
\par }}\dpx1800\dpy1455\dpxsize1440\dpysize480\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {Plata
\par }}\dpx3480\dpy135\dpxsize1440\dpysize480\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpgroup\dpcount3\dpx720\dpy615\dpxsize1080\dpysize1080
\dpline\dpptx0\dppty0\dpptx4920\dppty1935\dpx0\dpy0\dpxsize0\dpysize1080\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx4920\dppty1935\dpx0\dpy1080\dpxsize1080\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0
\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpline\dpptx0\dppty0\dpptx4920\dppty1935\dpx1440\dpy375\dpxsize2040\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpgroup\dpcount3\dpx3240\dpy615\dpxsize960\dpysize1080\dpline\dpptx0\dppty0\dpptx4920\dppty1935
\dpx0\dpy1080\dpxsize960\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx4920\dppty0\dpptx0\dppty1935\dpx960\dpy0\dpxsize0\dpysize1080\dplinew15\dplinecor0\dplinecog0\dplinecob0
\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,m)
\par }}\dpx1080\dpy1335\dpxsize840\dpysize480\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,1)
\par }}\dpx1350\dpy0\dpxsize840\dpysize480\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,1)
\par }}\dpx600\dpy570\dpxsize840\dpysize480\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,m)
\par }}\dpx3120\dpy1335\dpxsize840\dpysize480\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,m)
\par }}\dpx4080\dpy585\dpxsize840\dpysize480\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,m)
\par }}\dpx2760\dpy15\dpxsize840\dpysize480\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Figura 2.4 Exemplu de rela\'feie redundant\'e3
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }{\f34 \'cen schimb, \'een figura 2.5 nici una dintre cele trei rela\'feii nu este redundant\'e3 at\'e2t timp c\'e2t membrii unei asocia\'feii pot locui \'een alt\'e3 localitate dec\'e2t cea \'een care \'ee\'bai are sediul asocia\'feia. Dac\'e3
 ar exista restric\'feia ca to\'fei membrii unei asocia\'feii s\'e3 locuiasc\'e3 \'een localitatea de re\'baedin\'fe\'e3 a asocia\'feiei, atunci rela\'feia dintre }{\i Membru}{\f34  \'bai }{\i Localitate}{\f34  ar fi redundant\'e3.
\par }{\fs20\lang1024\langfe1024\noproof\langnp1033 {\shpgrp{\*\shpinst\shpleft1101\shptop9\shpright7461\shpbottom1929\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz7\shplid1088
{\sp{\sn groupLeft}{\sv 2901}}{\sp{\sn groupTop}{\sv 11344}}{\sp{\sn groupRight}{\sv 9261}}{\sp{\sn groupBottom}{\sv 13264}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1089{\sp{\sn groupLeft}{\sv 3184}}{\sp{\sn groupTop}{\sv 10624}}{\sp{\sn groupRight}{\sv 8755}}
{\sp{\sn groupBottom}{\sv 12453}}{\sp{\sn relLeft}{\sv 3184}}{\sp{\sn relTop}{\sv 11344}}{\sp{\sn relRight}{\sv 8755}}{\sp{\sn relBottom}{\sv 13173}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1090{\sp{\sn relLeft}{\sv 3184}}{\sp{\sn relTop}{\sv 10778}}{\sp{\sn relRight}{\sv 4788}}
{\sp{\sn relBottom}{\sv 11224}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 2097152}}{\sp{\sn fillColor}{\sv 8428502}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 
Membru
\par }}}}{\shp{\*\shpinst\shplid1091{\sp{\sn relLeft}{\sv 5191}}{\sp{\sn relTop}{\sv 12005}}{\sp{\sn relRight}{\sv 6795}}{\sp{\sn relBottom}{\sv 12453}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 2162688}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf1 Asocia\'feie
\par }}}}{\shp{\*\shpinst\shplid1092{\sp{\sn relLeft}{\sv 7063}}{\sp{\sn relTop}{\sv 10778}}{\sp{\sn relRight}{\sv 8666}}{\sp{\sn relBottom}{\sv 11224}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 2228224}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Localitate
\par }}}}{\shpgrp{\*\shpinst\shplid1093{\sp{\sn groupLeft}{\sv 3741}}{\sp{\sn groupTop}{\sv 7384}}{\sp{\sn groupRight}{\sv 4821}}{\sp{\sn groupBottom}{\sv 8464}}{\sp{\sn relLeft}{\sv 3988}}
{\sp{\sn relTop}{\sv 11224}}{\sp{\sn relRight}{\sv 5191}}{\sp{\sn relBottom}{\sv 12230}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1094{\sp{\sn relLeft}{\sv 3741}}{\sp{\sn relTop}{\sv 7384}}{\sp{\sn relRight}{\sv 3741}}
{\sp{\sn relBottom}{\sv 8464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1095{\sp{\sn relLeft}{\sv 3741}}{\sp{\sn relTop}{\sv 8464}}{\sp{\sn relRight}{\sv 4821}}{\sp{\sn relBottom}{\sv 8464}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shp{\*\shpinst\shplid1096{\sp{\sn relLeft}{\sv 4788}}{\sp{\sn relTop}{\sv 11001}}{\sp{\sn relRight}{\sv 7063}}{\sp{\sn relBottom}{\sv 11001}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shpgrp{\*\shpinst\shplid1097{\sp{\sn groupLeft}{\sv 6261}}{\sp{\sn groupTop}{\sv 7384}}{\sp{\sn groupRight}{\sv 7221}}{\sp{\sn groupBottom}{\sv 8464}}{\sp{\sn relLeft}{\sv 6795}}
{\sp{\sn relTop}{\sv 11224}}{\sp{\sn relRight}{\sv 7862}}{\sp{\sn relBottom}{\sv 12230}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1098{\sp{\sn relLeft}{\sv 6261}}{\sp{\sn relTop}{\sv 8464}}{\sp{\sn relRight}{\sv 7221}}
{\sp{\sn relBottom}{\sv 8464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1099{\sp{\sn relLeft}{\sv 7221}}{\sp{\sn relTop}{\sv 7384}}{\sp{\sn relRight}{\sv 7221}}{\sp{\sn relBottom}{\sv 8464}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shp{\*\shpinst\shplid1100{\sp{\sn relLeft}{\sv 4433}}{\sp{\sn relTop}{\sv 11874}}{\sp{\sn relRight}{\sv 5370}}{\sp{\sn relBottom}{\sv 12320}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 2293760}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (0,M)
\par }}}}{\shp{\*\shpinst\shplid1101{\sp{\sn relLeft}{\sv 4724}}{\sp{\sn relTop}{\sv 10624}}{\sp{\sn relRight}{\sv 5659}}{\sp{\sn relBottom}{\sv 11072}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 2359296}}{\sp{\sn hspNext}{\sv 1101}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (0,M)
\par }}}}{\shp{\*\shpinst\shplid1102{\sp{\sn relLeft}{\sv 3929}}{\sp{\sn relTop}{\sv 11217}}{\sp{\sn relRight}{\sv 4864}}{\sp{\sn relBottom}{\sv 11662}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 2424832}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (1,M)
\par }}}}{\shp{\*\shpinst\shplid1103{\sp{\sn relLeft}{\sv 6742}}{\sp{\sn relTop}{\sv 11874}}{\sp{\sn relRight}{\sv 7677}}{\sp{\sn relBottom}{\sv 12320}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 2490368}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (0,M)
\par }}}}{\shp{\*\shpinst\shplid1104{\sp{\sn relLeft}{\sv 7820}}{\sp{\sn relTop}{\sv 11196}}{\sp{\sn relRight}{\sv 8755}}{\sp{\sn relBottom}{\sv 11643}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 2555904}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (1,1)
\par }}}}{\shp{\*\shpinst\shplid1105{\sp{\sn relLeft}{\sv 6307}}{\sp{\sn relTop}{\sv 10654}}{\sp{\sn relRight}{\sv 7246}}{\sp{\sn relBottom}{\sv 11098}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 2621440}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (1,1)
\par }}}}}}{\shp{\*\shpinst\shplid1106{\sp{\sn relLeft}{\sv 7442}}{\sp{\sn relTop}{\sv 12860}}{\sp{\sn relRight}{\sv 9261}}{\sp{\sn relBottom}{\sv 13264}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 2686976}}{\sp{\sn WrapText}{\sv 2}}{\sp{\sn anchorText}{\sv 6}}{\sp{\sn fRotateText}{\sv 0}}{\sp{\sn fFitShapeToText}{\sv 1}}{\sp{\sn fFitTextToShape}{\sv 0}}
{\sp{\sn fillColor}{\sv 12834527}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fHitTestLine}{\sv 1}}{\sp{\sn lineFillShape}{\sv 1}}{\sp{\sn fShadow}{\sv 0}}
{\sp{\sn fshadowObscured}{\sv 0}}{\sp{\sn f3D}{\sv 0}}{\sp{\sn fc3DMetallic}{\sv 0}}{\sp{\sn fc3DUseExtrusionColor}{\sv 0}}{\sp{\sn fc3DLightFace}{\sv 1}}{\sp{\sn fc3DConstrainRotation}{\sv 1}}{\sp{\sn fc3DRotationCenterAuto}{\sv 0}}
{\sp{\sn fc3DParallel}{\sv 1}}{\sp{\sn fc3DKeyHarsh}{\sv 1}}{\sp{\sn fc3DFillHarsh}{\sv 0}}{\sp{\sn fCalloutAccentBar}{\sv 0}}{\sp{\sn fCalloutTextBorder}{\sv 1}}
{\sp{\sn fCalloutMinusX}{\sv 0}}{\sp{\sn fCalloutMinusY}{\sv 0}}{\sp{\sn fCalloutDropAuto}{\sv 0}}{\sp{\sn fCalloutLengthSpecified}{\sv 0}}{\sp{\sn dxWrapDistLeft}{\sv 0}}
{\sp{\sn dxWrapDistRight}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fAllowOverlap}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf1 Este localizat\'e3
\par }}}}{\shp{\*\shpinst\shplid1107{\sp{\sn relLeft}{\sv 2901}}{\sp{\sn relTop}{\sv 12521}}{\sp{\sn relRight}{\sv 4093}}{\sp{\sn relBottom}{\sv 12904}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 2752512}}{\sp{\sn WrapText}{\sv 2}}{\sp{\sn anchorText}{\sv 6}}{\sp{\sn fRotateText}{\sv 0}}{\sp{\sn fFitShapeToText}{\sv 1}}{\sp{\sn fFitTextToShape}{\sv 0}}
{\sp{\sn fillColor}{\sv 12834527}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fHitTestLine}{\sv 1}}{\sp{\sn lineFillShape}{\sv 1}}{\sp{\sn fShadow}{\sv 0}}
{\sp{\sn fshadowObscured}{\sv 0}}{\sp{\sn f3D}{\sv 0}}{\sp{\sn fc3DMetallic}{\sv 0}}{\sp{\sn fc3DUseExtrusionColor}{\sv 0}}{\sp{\sn fc3DLightFace}{\sv 1}}{\sp{\sn fc3DConstrainRotation}{\sv 1}}{\sp{\sn fc3DRotationCenterAuto}{\sv 0}}
{\sp{\sn fc3DParallel}{\sv 1}}{\sp{\sn fc3DKeyHarsh}{\sv 1}}{\sp{\sn fc3DFillHarsh}{\sv 0}}{\sp{\sn fCalloutAccentBar}{\sv 0}}{\sp{\sn fCalloutTextBorder}{\sv 1}}
{\sp{\sn fCalloutMinusX}{\sv 0}}{\sp{\sn fCalloutMinusY}{\sv 0}}{\sp{\sn fCalloutDropAuto}{\sv 0}}{\sp{\sn fCalloutLengthSpecified}{\sv 0}}{\sp{\sn dxWrapDistLeft}{\sv 0}}
{\sp{\sn dxWrapDistRight}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fAllowOverlap}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf1 Apar\'feine
\par }}}}{\shp{\*\shpinst\shplid1108{\sp{\sn relLeft}{\sv 5228}}{\sp{\sn relTop}{\sv 11672}}{\sp{\sn relRight}{\sv 6526}}{\sp{\sn relBottom}{\sv 12075}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 2818048}}{\sp{\sn WrapText}{\sv 2}}{\sp{\sn anchorText}{\sv 6}}{\sp{\sn fRotateText}{\sv 0}}{\sp{\sn fFitShapeToText}{\sv 1}}{\sp{\sn fFitTextToShape}{\sv 0}}
{\sp{\sn fillColor}{\sv 12834527}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fHitTestLine}{\sv 1}}{\sp{\sn lineFillShape}{\sv 1}}{\sp{\sn fShadow}{\sv 0}}
{\sp{\sn fshadowObscured}{\sv 0}}{\sp{\sn f3D}{\sv 0}}{\sp{\sn fc3DMetallic}{\sv 0}}{\sp{\sn fc3DUseExtrusionColor}{\sv 0}}{\sp{\sn fc3DLightFace}{\sv 1}}{\sp{\sn fc3DConstrainRotation}{\sv 1}}{\sp{\sn fc3DRotationCenterAuto}{\sv 0}}
{\sp{\sn fc3DParallel}{\sv 1}}{\sp{\sn fc3DKeyHarsh}{\sv 1}}{\sp{\sn fc3DFillHarsh}{\sv 0}}{\sp{\sn fCalloutAccentBar}{\sv 0}}{\sp{\sn fCalloutTextBorder}{\sv 1}}
{\sp{\sn fCalloutMinusX}{\sv 0}}{\sp{\sn fCalloutMinusY}{\sv 0}}{\sp{\sn fCalloutDropAuto}{\sv 0}}{\sp{\sn fCalloutLengthSpecified}{\sv 0}}{\sp{\sn dxWrapDistLeft}{\sv 0}}
{\sp{\sn dxWrapDistRight}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fAllowOverlap}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf1 Locuie\'bate
\par }}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8199\dpgroup\dpcount5\dpx1101\dpy9\dpxsize6360\dpysize1920\dpgroup\dpcount13\dpx283\dpy0\dpxsize5571\dpysize1829\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Membru
\par }}\dpx0\dpy154\dpxsize1604\dpysize446\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf1 Asocia\'feie
\par }}\dpx2007\dpy1381\dpxsize1604\dpysize448\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Localitate
\par }}\dpx3879\dpy154\dpxsize1603\dpysize446\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpgroup\dpcount3\dpx804\dpy600\dpxsize1203\dpysize1006
\dpline\dpptx0\dppty0\dpptx6360\dppty1920\dpx0\dpy0\dpxsize0\dpysize1006\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6360\dppty1920\dpx0\dpy1006\dpxsize1203\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0
\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpline\dpptx0\dppty0\dpptx6360\dppty1920\dpx1604\dpy377\dpxsize2275\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpgroup\dpcount3\dpx3611\dpy600\dpxsize1067\dpysize1006
\dpline\dpptx0\dppty0\dpptx6360\dppty1920\dpx0\dpy1006\dpxsize1067\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6360\dppty0\dpptx0\dppty1920\dpx1067\dpy0\dpxsize0\dpysize1006\dplinew15\dplinecor0\dplinecog0\dplinecob0
\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (0,M)
\par }}\dpx1249\dpy1250\dpxsize937\dpysize446\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (0,M)
\par }}\dpx1540\dpy0\dpxsize935\dpysize448\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (1,M)
\par }}\dpx745\dpy593\dpxsize935\dpysize445\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (0,M)
\par }}\dpx3558\dpy1250\dpxsize935\dpysize446\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (1,1)
\par }}\dpx4636\dpy572\dpxsize935\dpysize447\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (1,1)
\par }}\dpx3123\dpy30\dpxsize939\dpysize444\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf1 Este localizat\'e3
\par }}\dpx4541\dpy1516\dpxsize1819\dpysize404\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr223\dpfillbgcg214\dpfillbgcb195\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf1 Apar\'feine
\par }}\dpx0\dpy1177\dpxsize1192\dpysize383\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr223\dpfillbgcg214\dpfillbgcb195\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf1 Locuie\'bate
\par }}\dpx2327\dpy328\dpxsize1298\dpysize403\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr223\dpfillbgcg214\dpfillbgcb195\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Figura 2.5 Exemplu de rela\'feii neredundante
\par }{
\par }\pard\plain \s2\qj \fi709\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel1\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\f34 2.4 Reguli de transformare a DER \'een schema rela\'feional\'e3
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }{\f34 Transformarea DER \'een schema rela\'feional\'e3 a bazei de date presupune analiza atent\'e3 a DER, lu\'e2ndu-se \'een considerare ordinul \'bai cardinalitatea leg\'e3turilor, precum \'bai atributele multivaloare. \'cen urma acestor transform\'e3
ri pot rezulta patru tipuri de tabele:
\par {\pntext\pard\plain\b\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 1\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\tx1429{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec\pnstart1\pnindent360 }\faauto\ls1\rin0\lin1429\itap0 {\b\f34 
Tabele care vor avea acela\'bai con\'feinut ca entit\'e3\'feile originale}{\f34 . Acest tip de tabele rezult\'e3 din transformarea entit\'e3\'feilor implicate \'een rela\'feii binare de tipul \'84multe-la-multe\'94, a celor situate \'een partea \'84unu
\'94 a unei rela\'feii binare \'84unu-la-multe\'94, sau a uneia din cele dou\'e3 entit\'e3\'fei aflate \'eentr-o rela\'feie \'84unu-la-unu\'94; acela\'bai tip de tabele pot rezulta \'bai din transformarea entit\'e3\'feilor cu rela\'fe
ii recursive de tipul \'84multe-la-multe\'94 sau a entit\'e3\'feilor implicate \'een rela\'feii ternare sau cu ordinul mai mare de trei. Cheia acestor tabele va fi reprezentat\'e3 de cheia principal\'e3 a entit\'e3\'feii originale, iar celelalte propriet
\'e3\'fei ale entit\'e3\'feii vor deveni atribute non-cheie \'een tabela rezultat\'e3. Aceste tabele vor juca rolul de p\'e3rinte.
\par {\pntext\pard\plain\b\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 2\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\tx1429{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart2\pnindent360 }\faauto\ls2\rin0\lin1429\itap0 {\b\f34 Tabele care vor 
\'eengloba cheia strain\'e3 a entit\'e3\'feii p\'e3rinte}{. Acest tip de transform}{\f34 \'e3ri apar \'een cazul entit\'e3\'feilor aflate de partea \'84multe\'94 a unei rela\'feii binare de tipul \'84unu-la multe\'94, a uneia dintre entit\'e3\'fe
ile legate printr-o rela\'feie \'84unu-la unu\'94, precum \'bai a entit\'e3\'feilor cu leg\'e3turi recursive de tipul \'84unu-la-unu\'94 sau \'84unu-la-multe\'94. Tabelele rezultate \'een urma acestor transform\'e3ri vor juca rolul de tabel\'e3
 copil. Ele vor avea ca atribute propriet\'e3\'feile entit\'e3\'feii originale, la care se adaug\'e3 cheia principal\'e3 a entit\'e3\'feii cu care este legat\'e3 \'bai care va juca rolul de cheie strain\'e3.
\par {\pntext\pard\plain\b\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 3\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\tx1429{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart2\pnindent360 }\faauto\ls2\rin0\lin1429\itap0 {\b Tabele ca}{\b\f34 
re vor con\'feine cheile tuturor entit\'e3\'feilor implicate \'eentr-o rela\'feie}{\f34 . Aceste tabele mai sunt numite \'bai }{\i\f34 entit\'e3\'fei asociative}{\f34 . Ele deriv\'e3 din descompunerea leg\'e3turilor binare sau recursive de tipul \'84
multe-la-multe\'94, sau a leg\'e3turilor ternare sau de un ordin mai mare de trei. O astfel de tabel\'e3 va con\'feine cheile primare ale entit\'e3\'feilor asociate ca chei str\'e3ine, precum \'bai eventualele propriet\'e3\'fei ale rela\'fe
iei. Cheia principal\'e3 a tabelei este format\'e3, de regul\'e3, prin combinarea cheilor str\'e3ine.
\par {\pntext\pard\plain\b\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 4\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\tx1429{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart2\pnindent360 }\faauto\ls2\rin0\lin1429\itap0 {\b Tabele care vor con}{
\b\f34 \'feine atributele multivaloare ale unei entit\'e3\'fei}{\f34 . \'cen cazul \'een care o entitate con\'feine unul sau mai multe atribute multivaloare, atunci se va constitui o nou\'e3 tabel\'e3 care va con\'feine atributele multivaloare, prelu\'e2
nd \'bai cheia entit\'e3\'feii originale. De regul\'e3, cheia principal\'e3 a tabelei va fi format\'e3 din cheia entit\'e3\'feii originale la care se adaug\'e3 unul sau mai multe din celelalte atribute.
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Regulile anterioare de transformare iau \'een considerare numai maximul cardinalit\'e3\'feii rela\'feiilor dintre entit\'e3\'fei. Minimul cardinalit\'e3\'fe
ii, care descrie caracterul obligatoriu/facultativ al unei rela\'feii, indic\'e3 dac\'e3 pentru cheile str\'e3ine sunt permise valorile nule sau nu. \'cen acest sens, se va lua \'een considerare minimul cardinalit\'e3\'feii unei rela\'fe
ii din partea entit\'e3\'feii p\'e3rinte (adic\'e3 \'een partea rela\'feiei \'een care maximul cardinalit\'e3\'feii este 1); dac\'e3 rela\'feia este op\'feional\'e3, atunci se vor permite valorile nule pentru cheia strain\'e3 \'een tabela-copil; \'ee
n cazul rela\'feiilor obligatorii nu se vor permite valori nule pentru cheile str\'e3ine.
\par }{Transforma}{\f34 rea DER \'eentr-un set de tabele normalizate presupune parcurgerea a doi pa\'bai:
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\jclisttab\tx1429\faauto\ls14\rin0\lin1429\itap0 {\i\f34 Reprezentarea entit\'e3\'feilor}{\f34 , \'een care se ob\'fe
in tabele din prima categorie;
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\i\f34 Reprezentarea rela\'feiilor dintre entit\'e3\'fei}{\f34 , activitate \'een urma c\'e3reia vor rezulta tabele din a doua \'ba}{i a treia categorie.
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\i Reprezentarea atributelor multivaloare}{\f34 , caz \'een care se vor ob\'feine tabele din ultima categorie, numite \'bai }{\b\f34 entit\'e3\'fei atributive}{.

\par }\pard\plain \s19\qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Reprezentarea entit\'e3\'feilor este o transformare simpl\'e3, motiv pentru care \'een continuare vom prezenta exemple 
de transformare doar pentru ultimii doi pa\'bai, respectiv reprezentarea rela\'feiilor \'bai reprezentarea atributelor multivaloare.
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }\pard\plain \s3\qj \fi709\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 2.4.1 Reprezentarea rela\'feiilor binare 1:1 \'bai 1:M
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }{\f34 Leg\'e3turile binare de tipul 1:1 sunt ilustrate \'een figurile 2.6 \'bai 2.7. Dac\'e3 ambele entit\'e3\'fei sunt obligatorii (figura 2.6), atunci fiecare entitate va deveni o tabel\'e3 iar cheia principal\'e3
 a uneia dintre ele (la alegere) va apare \'een cealalt\'e3 tabel\'e3 ca cheie str\'e3in\'e3. O alternativ\'e3 la aceast\'e3 transformare const\'e3 \'een unirea celor dou\'e3 entit\'e3\'fei \'eentr-o singur\'e3 tabel\'e3 care va con\'fe
ine ca atribute propriet\'e3\'feile ambelor entit\'e3\'fei \'bai a c\'e3rei cheie principal\'e3 va aleas\'e3 dintre cheile celor dou\'e3 entit\'e3\'fei. Dac\'e3 cerin\'feele de acces la date o impun, se poate alege ca ambele tabele s\'e3 con\'fein\'e3
 cheia str\'e3in\'e3 care s\'e3 fac\'e3 referire la cheia principal\'e3 a celeilalte tabele.
\par Dac\'e3 participarea unei entit\'e3\'fei \'een rela\'feie este op\'feional\'e3, atunci tabela corespunz\'e3toare ei va con\'feine cheia strain\'e3. \'cen figura 2.7, se observ\'e3 c\'e3 tabela }{\i Departament}{\f34 , cea care corespunde entit\'e3\'fei
i situate de partea \'840\'94 a leg\'e3turii, va fi cea care va con\'feine cheia str\'e3in\'e3. Situa\'feia ar putea fi inversat\'e3, \'een sensul ca tabela }{\i Angajat}{\f34  s\'e3 con\'fein\'e3 cheia str\'e3in\'e3, pentru care s\'e3
 fie admise valori nule, \'eens\'e3 aceasta ar presupune spa\'feiu de stocare suplimentar at\'e2t timp c\'e2t num\'e3rul instan\'feelor entit\'e3\'feii }{\i Angajat}{\f34  este mai mare dec\'e2t cel al instan\'feelor entit\'e3\'feii }{\i Departament}{.

\par }{\fs20\lang1024\langfe1024\noproof\langnp1033 {\shpgrp{\*\shpinst\shpleft741\shptop93\shpright8239\shpbottom4533\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz0\shplid1109
{\sp{\sn groupLeft}{\sv 2152}}{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 9650}}{\sp{\sn groupBottom}{\sv 5944}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1110{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 8344}}{\sp{\sn groupRight}{\sv 4266}}
{\sp{\sn groupBottom}{\sv 13384}}{\sp{\sn relLeft}{\sv 2152}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 3621}}{\sp{\sn relBottom}{\sv 5944}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}
{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1111{\sp{\sn groupLeft}{\sv 2541}}
{\sp{\sn groupTop}{\sv 8344}}{\sp{\sn groupRight}{\sv 4821}}{\sp{\sn groupBottom}{\sv 9664}}{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 8344}}{\sp{\sn relRight}{\sv 4221}}
{\sp{\sn relBottom}{\sv 9664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1112
{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 8344}}{\sp{\sn relRight}{\sv 4821}}{\sp{\sn relBottom}{\sv 9664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 2883584}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Factura
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_nr
\par Fact_data
\par }}}}{\shp{\*\shpinst\shplid1113{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 8704}}{\sp{\sn relRight}{\sv 4821}}{\sp{\sn relBottom}{\sv 8704}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1114{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 12064}}
{\sp{\sn groupRight}{\sv 4221}}{\sp{\sn groupBottom}{\sv 13384}}{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 12064}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 13384}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1115
{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 12064}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 13384}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 2949120}}{\sp{\sn lidRegroup}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Receptie
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rec_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rec_nr
\par Rec_data
\par }}}}{\shp{\*\shpinst\shplid1116{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 12424}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 12424}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
}}{\shp{\*\shpinst\shplid1117{\sp{\sn relLeft}{\sv 2601}}{\sp{\sn relTop}{\sv 10384}}{\sp{\sn relRight}{\sv 4161}}{\sp{\sn relBottom}{\sv 11344}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 4}}{\sp{\sn lTxid}{\sv 3014656}}
{\sp{\sn dxTextLeft}{\sv 0}}{\sp{\sn dyTextTop}{\sv 0}}{\sp{\sn dxTextRight}{\sv 0}}{\sp{\sn dyTextBottom}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s16\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Coresp-unde
\par }}}}{\shp{\*\shpinst\shplid1118{\sp{\sn relLeft}{\sv 3381}}{\sp{\sn relTop}{\sv 9664}}{\sp{\sn relRight}{\sv 3381}}{\sp{\sn relBottom}{\sv 10384}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1119{\sp{\sn relLeft}{\sv 3381}}{\sp{\sn relTop}{\sv 11344}}
{\sp{\sn relRight}{\sv 3381}}{\sp{\sn relBottom}{\sv 12064}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1120{\sp{\sn relLeft}{\sv 3291}}{\sp{\sn relTop}{\sv 9619}}{\sp{\sn relRight}{\sv 4251}}{\sp{\sn relBottom}{\sv 10219}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 3080192}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,1)
\par }}}}{\shp{\*\shpinst\shplid1121{\sp{\sn relLeft}{\sv 3306}}{\sp{\sn relTop}{\sv 11674}}{\sp{\sn relRight}{\sv 4266}}{\sp{\sn relBottom}{\sv 12274}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 3145728}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,1)
\par }}}}}}{\shpgrp{\*\shpinst\shplid1122{\sp{\sn groupLeft}{\sv 7821}}{\sp{\sn groupTop}{\sv 8824}}{\sp{\sn groupRight}{\sv 10701}}{\sp{\sn groupBottom}{\sv 12904}}{\sp{\sn relLeft}{\sv 7221}}{\sp{\sn relTop}{\sv 1864}}{\sp{\sn relRight}{\sv 9650}}
{\sp{\sn relBottom}{\sv 5464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn posh}{\sv 0}}
{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1123{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 8344}}{\sp{\sn groupRight}{\sv 4821}}
{\sp{\sn groupBottom}{\sv 9664}}{\sp{\sn relLeft}{\sv 7821}}{\sp{\sn relTop}{\sv 8824}}{\sp{\sn relRight}{\sv 10701}}{\sp{\sn relBottom}{\sv 10144}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 6}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1124{\sp{\sn relLeft}{\sv 2541}}
{\sp{\sn relTop}{\sv 8344}}{\sp{\sn relRight}{\sv 4821}}{\sp{\sn relBottom}{\sv 9664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}
{\sp{\sn lTxid}{\sv 3211264}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Factura
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_nr
\par Fact_data
\par }}}}{\shp{\*\shpinst\shplid1125{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 8704}}{\sp{\sn relRight}{\sv 4821}}{\sp{\sn relBottom}{\sv 8704}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1126{\sp{\sn groupLeft}{\sv 8016}}{\sp{\sn groupTop}{\sv 12064}}
{\sp{\sn groupRight}{\sv 9696}}{\sp{\sn groupBottom}{\sv 13624}}{\sp{\sn relLeft}{\sv 7821}}{\sp{\sn relTop}{\sv 11344}}{\sp{\sn relRight}{\sv 10701}}{\sp{\sn relBottom}{\sv 12904}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 6}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1127
{\sp{\sn relLeft}{\sv 8016}}{\sp{\sn relTop}{\sv 12064}}{\sp{\sn relRight}{\sv 9696}}{\sp{\sn relBottom}{\sv 13624}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 3276800}}{\sp{\sn hspNext}{\sv 1127}}
{\sp{\sn lidRegroup}{\sv 2}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Receptie
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rec_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rec_nr
\par Rec_data
\par }\pard\plain \s5\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel4\rin0\lin0\itap0 \i\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_id }{\fs20\lang1033\langfe1033\langnp1033 [FK] NOT NULL
\par }}}}{\shp{\*\shpinst\shplid1128{\sp{\sn relLeft}{\sv 8016}}{\sp{\sn relTop}{\sv 12424}}{\sp{\sn relRight}{\sv 9696}}{\sp{\sn relBottom}{\sv 12424}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 2}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
}}{\shp{\*\shpinst\shplid1129{\sp{\sn relLeft}{\sv 8901}}{\sp{\sn relTop}{\sv 10144}}{\sp{\sn relRight}{\sv 8902}}{\sp{\sn relBottom}{\sv 11344}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineStartArrowhead}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLine}{\sv 1}}{\sp{\sn lidRegroup}{\sv 6}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shp{\*\shpinst\shplid1130{\sp{\sn relLeft}{\sv 3861}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 7101}}{\sp{\sn relBottom}{\sv 2824}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 3342336}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Fiecare factur\'e3 are \'een coresponden\'fe\'e3 doar o recep\'feie \'bai numai una, iar o recep\'feie are la baz\'e3 exact o factur\'e3.
\par }}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8192\dpgroup\dpcount4\dpx741\dpy93\dpxsize7498\dpysize4440\dpgroup\dpcount8\dpx0\dpy0\dpxsize1469\dpysize4440\dpgroup\dpcount3\dpx0\dpy0\dpxsize1431\dpysize1163\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Factura
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_nr
\par Fact_data
\par }}\dpx0\dpy0\dpxsize1431\dpysize1163\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7498\dppty4440\dpx0\dpy317\dpxsize1431\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy3277\dpxsize1431\dpysize1163\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Receptie
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rec_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rec_nr
\par Rec_data
\par }}\dpx0\dpy0\dpxsize1431\dpysize1163\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7498\dppty4440\dpx0\dpy317\dpxsize1431\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s16\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Coresp-unde
\par }}\dpx51\dpy1797\dpxsize1329\dpysize846\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx7498\dppty0\dpptx0\dppty4440\dpx715\dpy1163\dpxsize0\dpysize634
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx7498\dppty0\dpptx0\dppty4440\dpx715\dpy2643\dpxsize0\dpysize634\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,1)
\par }}\dpx639\dpy1123\dpxsize817\dpysize529\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,1)
\par }}\dpx651\dpy2934\dpxsize818\dpysize528\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount4\dpx5069\dpy360\dpxsize2429\dpysize3600
\dpgroup\dpcount3\dpx0\dpy0\dpxsize2429\dpysize1165\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Factura
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_nr
\par Fact_data
\par }}\dpx0\dpy0\dpxsize2429\dpysize1165\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7498\dppty4440\dpx0\dpy318\dpxsize2429\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy2224\dpxsize2429\dpysize1376\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Receptie
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rec_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rec_nr
\par Rec_data
\par }\pard\plain \s5\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel4\rin0\lin0\itap0 \i\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_id }{\fs20\lang1033\langfe1033\langnp1033 [FK] NOT NULL
\par }}\dpx0\dpy0\dpxsize2429\dpysize1376\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7498\dppty4440\dpx0\dpy318\dpxsize2429\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpline\dpptx7498\dppty0\dpptx0\dppty4440\dpx911\dpy1165\dpxsize1\dpysize1059\dplinew15\dplinecor0\dplinecog0\dplinecob0
\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Fiecare factur\'e3 are \'een coresponden\'fe\'e3 doar o recep
\'feie \'bai numai una, iar o recep\'feie are la baz\'e3 exact o factur\'e3.
\par }}\dpx1709\dpy0\dpxsize3240\dpysize1320\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Figura 2.6 Transformarea rela\'feiilor 1:1 \'een care ambele entit\'e3\'fe}{i sunt obligatorii
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 \'cen cazul \'een care participarea ambelor entit\'e3\'fei este facultativ\'e3, atunci oricare din tabelele corespondente poate con\'feine cheia str\'e3in\'e3, numai c\'e3
 se vor admite valori nule pentru cheia str\'e3in\'e3.
\par }{\fs20\lang1024\langfe1024\noproof\langnp1033 {\shpgrp{\*\shpinst\shpleft981\shptop22\shpright8210\shpbottom4348\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz13\shplid1131
{\sp{\sn groupLeft}{\sv 2392}}{\sp{\sn groupTop}{\sv 7618}}{\sp{\sn groupRight}{\sv 9621}}{\sp{\sn groupBottom}{\sv 11944}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1132{\sp{\sn groupLeft}{\sv 4221}}{\sp{\sn groupTop}{\sv 7618}}{\sp{\sn groupRight}{\sv 9621}}{\sp{\sn groupBottom}{\sv 11464}}
{\sp{\sn relLeft}{\sv 4221}}{\sp{\sn relTop}{\sv 7618}}{\sp{\sn relRight}{\sv 9621}}{\sp{\sn relBottom}{\sv 11464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1133{\sp{\sn groupLeft}{\sv 8061}}{\sp{\sn groupTop}{\sv 3988}}{\sp{\sn groupRight}{\sv 10341}}
{\sp{\sn groupBottom}{\sv 7744}}{\sp{\sn relLeft}{\sv 7672}}{\sp{\sn relTop}{\sv 8098}}{\sp{\sn relRight}{\sv 9621}}{\sp{\sn relBottom}{\sv 11464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1134{\sp{\sn groupLeft}{\sv 8301}}{\sp{\sn groupTop}{\sv 3988}}{\sp{\sn groupRight}{\sv 9981}}
{\sp{\sn groupBottom}{\sv 5464}}{\sp{\sn relLeft}{\sv 8061}}{\sp{\sn relTop}{\sv 3988}}{\sp{\sn relRight}{\sv 10341}}{\sp{\sn relBottom}{\sv 5464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 7}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1135{\sp{\sn relLeft}{\sv 8301}}{\sp{\sn relTop}{\sv 3988}}{\sp{\sn relRight}{\sv 9981}}
{\sp{\sn relBottom}{\sv 5464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 3407872}}{\sp{\sn hspNext}{\sv 1135}}
{\sp{\sn lidRegroup}{\sv 6}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Departament
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_nume
\par }\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\i Ang_id [FK] NULL
\par }}}}{\shp{\*\shpinst\shplid1136{\sp{\sn relLeft}{\sv 8301}}{\sp{\sn relTop}{\sv 4354}}{\sp{\sn relRight}{\sv 9981}}{\sp{\sn relBottom}{\sv 4354}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 6}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shpgrp{\*\shpinst\shplid1137{\sp{\sn groupLeft}{\sv 8301}}{\sp{\sn groupTop}{\sv 6508}}{\sp{\sn groupRight}{\sv 9981}}{\sp{\sn groupBottom}{\sv 7744}}{\sp{\sn relLeft}{\sv 8061}}
{\sp{\sn relTop}{\sv 6508}}{\sp{\sn relRight}{\sv 10341}}{\sp{\sn relBottom}{\sv 7744}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 7}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1138{\sp{\sn relLeft}{\sv 8301}}{\sp{\sn relTop}{\sv 6508}}{\sp{\sn relRight}{\sv 9981}}
{\sp{\sn relBottom}{\sv 7744}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 3473408}}{\sp{\sn hspNext}{\sv 1138}}
{\sp{\sn lidRegroup}{\sv 6}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Angajat
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Ang_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Ang_nume
\par Ang_saltf}{\i\fs20 
\par }}}}{\shp{\*\shpinst\shplid1139{\sp{\sn relLeft}{\sv 8301}}{\sp{\sn relTop}{\sv 6868}}{\sp{\sn relRight}{\sv 9981}}{\sp{\sn relBottom}{\sv 6868}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 6}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shp{\*\shpinst\shplid1140{\sp{\sn relLeft}{\sv 9141}}{\sp{\sn relTop}{\sv 5464}}{\sp{\sn relRight}{\sv 9142}}{\sp{\sn relBottom}{\sv 6508}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLine}{\sv 1}}{\sp{\sn lidRegroup}{\sv 7}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shp{\*\shpinst\shplid1141{\sp{\sn relLeft}{\sv 4221}}{\sp{\sn relTop}{\sv 7618}}{\sp{\sn relRight}{\sv 7461}}{\sp{\sn relBottom}{\sv 9064}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 3538944}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Fiecare departament trebuie s\'e3 aib\'e3 un manager, iar un angajat poate fi managerul unui singur departament dar nu este obligatoriu ca fiecare angajat s\'e3 conduc\'e3 un departament
\par }}}}}}{\shpgrp{\*\shpinst\shplid1142{\sp{\sn groupLeft}{\sv 2392}}{\sp{\sn groupTop}{\sv 7618}}{\sp{\sn groupRight}{\sv 3861}}{\sp{\sn groupBottom}{\sv 11944}}{\sp{\sn relLeft}{\sv 2392}}
{\sp{\sn relTop}{\sv 7618}}{\sp{\sn relRight}{\sv 3861}}{\sp{\sn relBottom}{\sv 11944}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1143{\sp{\sn groupLeft}{\sv 2392}}{\sp{\sn groupTop}{\sv 7618}}{\sp{\sn groupRight}{\sv 4117}}{\sp{\sn groupBottom}{\sv 12394}}
{\sp{\sn relLeft}{\sv 2392}}{\sp{\sn relTop}{\sv 7618}}{\sp{\sn relRight}{\sv 3861}}{\sp{\sn relBottom}{\sv 11944}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1144{\sp{\sn groupLeft}{\sv 2781}}{\sp{\sn groupTop}{\sv 3508}}{\sp{\sn groupRight}{\sv 4461}}{\sp{\sn groupBottom}{\sv 4504}}
{\sp{\sn relLeft}{\sv 2392}}{\sp{\sn relTop}{\sv 7618}}{\sp{\sn relRight}{\sv 4072}}{\sp{\sn relBottom}{\sv 8614}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 2}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1145{\sp{\sn relLeft}{\sv 2781}}{\sp{\sn relTop}{\sv 3508}}{\sp{\sn relRight}{\sv 4461}}{\sp{\sn relBottom}{\sv 4504}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}
{\sp{\sn lTxid}{\sv 3604480}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 
Departament
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_nume
\par }}}}{\shp{\*\shpinst\shplid1146{\sp{\sn relLeft}{\sv 2781}}{\sp{\sn relTop}{\sv 3868}}{\sp{\sn relRight}{\sv 4461}}{\sp{\sn relBottom}{\sv 3868}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shpgrp{\*\shpinst\shplid1147{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 12064}}{\sp{\sn groupRight}{\sv 4221}}{\sp{\sn groupBottom}{\sv 13384}}{\sp{\sn relLeft}{\sv 2392}}
{\sp{\sn relTop}{\sv 11074}}{\sp{\sn relRight}{\sv 4072}}{\sp{\sn relBottom}{\sv 12394}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 2}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1148{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 12064}}{\sp{\sn relRight}{\sv 4221}}
{\sp{\sn relBottom}{\sv 13384}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 3670016}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Angajat
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Ang_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Ang_nume
\par Ang_saltf
\par }}}}{\shp{\*\shpinst\shplid1149{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 12424}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 12424}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shp{\*\shpinst\shplid1150{\sp{\sn relLeft}{\sv 2452}}{\sp{\sn relTop}{\sv 9334}}{\sp{\sn relRight}{\sv 4012}}{\sp{\sn relBottom}{\sv 10378}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 4}}{\sp{\sn lTxid}{\sv 3735552}}
{\sp{\sn dxTextLeft}{\sv 0}}{\sp{\sn dyTextTop}{\sv 0}}{\sp{\sn dxTextRight}{\sv 0}}{\sp{\sn dyTextBottom}{\sv 0}}{\sp{\sn lidRegroup}{\sv 2}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\s16\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Este condus
\par }}}}{\shp{\*\shpinst\shplid1151{\sp{\sn relLeft}{\sv 3232}}{\sp{\sn relTop}{\sv 10354}}{\sp{\sn relRight}{\sv 3232}}{\sp{\sn relBottom}{\sv 11074}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 2}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shp{\*\shpinst\shplid1152{\sp{\sn relLeft}{\sv 3142}}{\sp{\sn relTop}{\sv 8614}}{\sp{\sn relRight}{\sv 4102}}{\sp{\sn relBottom}{\sv 9214}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 3801088}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 2}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,1)
\par }}}}{\shp{\*\shpinst\shplid1153{\sp{\sn relLeft}{\sv 3157}}{\sp{\sn relTop}{\sv 10654}}{\sp{\sn relRight}{\sv 4117}}{\sp{\sn relBottom}{\sv 11254}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 3866624}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 2}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,1)
\par }}}}}}{\shp{\*\shpinst\shplid1154{\sp{\sn relLeft}{\sv 3126}}{\sp{\sn relTop}{\sv 8494}}{\sp{\sn relRight}{\sv 3126}}{\sp{\sn relBottom}{\sv 9214}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8205\dpgroup\dpcount3\dpx981\dpy22\dpxsize7229\dpysize4326\dpgroup\dpcount3\dpx1829\dpy0\dpxsize5400\dpysize3846\dpgroup\dpcount4\dpx3451\dpy480\dpxsize1949\dpysize3366
\dpgroup\dpcount3\dpx0\dpy0\dpxsize1949\dpysize1323\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Departament
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_nume
\par }\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\i Ang_id [FK] NULL
\par }}\dpx0\dpy0\dpxsize1949\dpysize1323\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7229\dppty4326\dpx0\dpy328\dpxsize1949\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy2258\dpxsize1949\dpysize1108\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Angajat
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Ang_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Ang_nume
\par Ang_saltf}{\i\fs20 
\par }}\dpx0\dpy0\dpxsize1949\dpysize1108\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7229\dppty4326\dpx0\dpy323\dpxsize1949\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpline\dpptx7229\dppty0\dpptx0\dppty4326\dpx923\dpy1323\dpxsize1\dpysize935\dplinew15\dplinecor0\dplinecog0\dplinecob0
\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Fiecare departament trebuie s\'e3 aib\'e3
 un manager, iar un angajat poate fi managerul unui singur departament dar nu este obligatoriu ca fiecare angajat s\'e3 conduc\'e3 un departament
\par }}\dpx0\dpy0\dpxsize3240\dpysize1446\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy0\dpxsize1469\dpysize4326
\dpgroup\dpcount7\dpx0\dpy0\dpxsize1469\dpysize4326\dpgroup\dpcount3\dpx0\dpy0\dpxsize1431\dpysize902\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 
Departament
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_nume
\par }}\dpx0\dpy0\dpxsize1431\dpysize902\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7229\dppty4326\dpx0\dpy326\dpxsize1431\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy3130\dpxsize1431\dpysize1196\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Angajat
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Ang_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Ang_nume
\par Ang_saltf
\par }}\dpx0\dpy0\dpxsize1431\dpysize1196\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7229\dppty4326\dpx0\dpy326\dpxsize1431\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s16\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Este condus
\par }}\dpx51\dpy1554\dpxsize1329\dpysize946\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx7229\dppty0\dpptx0\dppty4326\dpx715\dpy2478\dpxsize0\dpysize652
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,1)
\par }}\dpx639\dpy902\dpxsize817\dpysize544\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,1)
\par }}\dpx651\dpy2750\dpxsize818\dpysize543\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpline\dpptx7229\dppty0\dpptx0\dppty4326
\dpx734\dpy876\dpxsize0\dpysize720\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Figura 2.7 Transformarea rela\'feiilor 1:1 \'een care participarea uneia dintre entit\'e3\'fei este facultativ\'e3
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }{\f34 \'cen toate cazurile de rela\'feii 1:N, cheia str\'e3in\'e3 va apare \'een tabela corespunz\'e3toare entit\'e3\'feii aflate de partea multe a leg\'e3turii, fiind tabela copil, iar pentru cheia str\'e3in\'e3 sunt acceptate valori nule dac\'e3
 entitatea din partea \'84unu\'94 a rela\'feiei este facultativ\'e3. Se observ\'e3 c\'e3 \'een rela\'feia dintre }{\i Departament}{\f34  \'bai }{\i Raport}{ din figura 2.8 pa}{\f34 rticiparea entit\'e3\'feii }{\i Departament}{\f34 
 are caracater facultativ, ceea ce \'eenseamn\'e3 c\'e3 \'een tabela }{\i Raport}{\f34  sunt permise valori nule pentru cheia str\'e3in\'e3. \'cen schimb, la transformarea rela\'feiei dintre entit\'e3\'feile }{\i Furnizor}{\f34  \'bai }{\i Factura}{
 (figura 2.9), \'een tabela Factura nu sun}{\f34 t permise valori nule pentru cheia str\'e3in\'e3 deoarece participarea entit\'e3\'feii }{\i Furnizor}{\f34  este obligatorie \'een rela\'feia cu entitatea }{\i Factura}{\f34 . Participarea facultativ\'e3
 a entit\'e3\'feii din partea multe nu afecteaz\'e3 opera\'feiunea de transformare, ea fiind interpretat\'e3 prin faptul c\'e3 pot exista \'eenregistr\'e3ri \'een tabela p\'e3rinte f\'e3r\'e3 a avea asociate nici o \'eenregistrare \'een tabela copil.

\par }{
\par }{\fs20\lang1024\langfe1024\noproof\langnp1033 {\shpgrp{\*\shpinst\shpleft1010\shptop93\shpright8090\shpbottom3933\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz14\shplid1155
{\sp{\sn groupLeft}{\sv 2421}}{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 9501}}{\sp{\sn groupBottom}{\sv 5344}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1156{\sp{\sn groupLeft}{\sv 7941}}{\sp{\sn groupTop}{\sv 1984}}{\sp{\sn groupRight}{\sv 10221}}{\sp{\sn groupBottom}{\sv 5224}}
{\sp{\sn relLeft}{\sv 7366}}{\sp{\sn relTop}{\sv 1919}}{\sp{\sn relRight}{\sv 9501}}{\sp{\sn relBottom}{\sv 4721}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 2}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1157{\sp{\sn groupLeft}{\sv 7941}}{\sp{\sn groupTop}{\sv 1984}}{\sp{\sn groupRight}{\sv 10221}}{\sp{\sn groupBottom}{\sv 2944}}
{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 1984}}{\sp{\sn relRight}{\sv 10221}}{\sp{\sn relBottom}{\sv 2944}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 11}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1158{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 1984}}{\sp{\sn relRight}{\sv 10221}}
{\sp{\sn relBottom}{\sv 2944}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 3932160}}{\sp{\sn hspNext}{\sv 1158}}
{\sp{\sn lidRegroup}{\sv 12}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Departament
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_nume}{\i\fs20 
\par }}}}{\shp{\*\shpinst\shplid1159{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 2350}}{\sp{\sn relRight}{\sv 10221}}{\sp{\sn relBottom}{\sv 2350}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 12}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shpgrp{\*\shpinst\shplid1160{\sp{\sn groupLeft}{\sv 7941}}{\sp{\sn groupTop}{\sv 3988}}{\sp{\sn groupRight}{\sv 10221}}{\sp{\sn groupBottom}{\sv 5224}}{\sp{\sn relLeft}{\sv 7941}}
{\sp{\sn relTop}{\sv 3988}}{\sp{\sn relRight}{\sv 10221}}{\sp{\sn relBottom}{\sv 5224}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn lidRegroup}{\sv 11}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1161{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 3988}}{\sp{\sn relRight}{\sv 10221}}
{\sp{\sn relBottom}{\sv 5224}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 3997696}}{\sp{\sn hspNext}{\sv 1161}}
{\sp{\sn lidRegroup}{\sv 13}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Raport
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rap_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rap_den
\par Dep_id }{\fs20\lang1033\langfe1033\langnp1033 [FK] NULL}{\i\lang1033\langfe1033\langnp1033 
\par }}}}{\shp{\*\shpinst\shplid1162{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 4348}}{\sp{\sn relRight}{\sv 10221}}{\sp{\sn relBottom}{\sv 4348}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 13}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shp{\*\shpinst\shplid1163{\sp{\sn relLeft}{\sv 9080}}{\sp{\sn relTop}{\sv 2944}}{\sp{\sn relRight}{\sv 9081}}{\sp{\sn relBottom}{\sv 3988}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineStartArrowhead}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLine}{\sv 1}}{\sp{\sn lidRegroup}{\sv 11}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shp{\*\shpinst\shplid1164{\sp{\sn relLeft}{\sv 4219}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 7253}}{\sp{\sn relBottom}{\sv 2853}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 4063232}}
{\sp{\sn hspNext}{\sv 1164}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 2}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Fiecare departament public\'e3 unul sau mai multe rapoarte, \'eens\'e3 nu este obligatoriu ca un raport s\'e3 fie publicat de un anumit departament.
\par }}}}{\shpgrp{\*\shpinst\shplid1165{\sp{\sn groupLeft}{\sv 2421}}{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 4036}}{\sp{\sn groupBottom}{\sv 5344}}{\sp{\sn relLeft}{\sv 2421}}
{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 4036}}{\sp{\sn relBottom}{\sv 5344}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}
{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1166{\sp{\sn relLeft}{\sv 3123}}{\sp{\sn relTop}{\sv 2365}}{\sp{\sn relRight}{\sv 4022}}
{\sp{\sn relBottom}{\sv 2884}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 4128768}}{\sp{\sn hspNext}{\sv 1166}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,1)
\par }}}}{\shpgrp{\*\shpinst\shplid1167{\sp{\sn groupLeft}{\sv 2421}}{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 4036}}{\sp{\sn groupBottom}{\sv 5344}}{\sp{\sn relLeft}{\sv 2421}}
{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 4036}}{\sp{\sn relBottom}{\sv 5344}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}
{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1168{\sp{\sn groupLeft}{\sv 2421}}{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 4036}}
{\sp{\sn groupBottom}{\sv 4649}}{\sp{\sn relLeft}{\sv 2421}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 4036}}{\sp{\sn relBottom}{\sv 4649}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn lidRegroup}{\sv 2}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1169{\sp{\sn groupLeft}{\sv 2781}}
{\sp{\sn groupTop}{\sv 3508}}{\sp{\sn groupRight}{\sv 4461}}{\sp{\sn groupBottom}{\sv 4504}}{\sp{\sn relLeft}{\sv 2421}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 3994}}
{\sp{\sn relBottom}{\sv 2365}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1170{\sp{\sn relLeft}{\sv 2781}}
{\sp{\sn relTop}{\sv 3508}}{\sp{\sn relRight}{\sv 4461}}{\sp{\sn relBottom}{\sv 4504}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 4194304}}{\sp{\sn hspNext}{\sv 1170}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Departament
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_nume
\par }}}}{\shp{\*\shpinst\shplid1171{\sp{\sn relLeft}{\sv 2781}}{\sp{\sn relTop}{\sv 3868}}{\sp{\sn relRight}{\sv 4461}}{\sp{\sn relBottom}{\sv 3868}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1172{\sp{\sn relLeft}{\sv 2477}}{\sp{\sn relTop}{\sv 2988}}
{\sp{\sn relRight}{\sv 3938}}{\sp{\sn relBottom}{\sv 3891}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 4}}{\sp{\sn lTxid}{\sv 4259840}}{\sp{\sn dxTextLeft}{\sv 0}}{\sp{\sn dyTextTop}{\sv 0}}{\sp{\sn dxTextRight}{\sv 0}}
{\sp{\sn dyTextBottom}{\sv 0}}{\sp{\sn hspNext}{\sv 1172}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s16\qc \li0\ri0\sb120\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20 Public\'e3
\par }}}}{\shp{\*\shpinst\shplid1173{\sp{\sn relLeft}{\sv 3207}}{\sp{\sn relTop}{\sv 3870}}{\sp{\sn relRight}{\sv 3207}}{\sp{\sn relBottom}{\sv 4493}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1174{\sp{\sn relLeft}{\sv 3137}}{\sp{\sn relTop}{\sv 4130}}
{\sp{\sn relRight}{\sv 4036}}{\sp{\sn relBottom}{\sv 4649}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 4325376}}{\sp{\sn hspNext}{\sv 1174}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,M)
\par }}}}{\shp{\*\shpinst\shplid1175{\sp{\sn relLeft}{\sv 3207}}{\sp{\sn relTop}{\sv 2360}}{\sp{\sn relRight}{\sv 3207}}{\sp{\sn relBottom}{\sv 2983}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shpgrp{\*\shpinst\shplid1176{\sp{\sn groupLeft}{\sv 2421}}{\sp{\sn groupTop}{\sv 4493}}{\sp{\sn groupRight}{\sv 3994}}{\sp{\sn groupBottom}{\sv 5344}}{\sp{\sn relLeft}{\sv 2421}}
{\sp{\sn relTop}{\sv 4493}}{\sp{\sn relRight}{\sv 3994}}{\sp{\sn relBottom}{\sv 5344}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1177{\sp{\sn relLeft}{\sv 2421}}{\sp{\sn relTop}{\sv 4493}}{\sp{\sn relRight}{\sv 3994}}{\sp{\sn relBottom}{\sv 5344}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}
{\sp{\sn lTxid}{\sv 4390912}}{\sp{\sn hspNext}{\sv 1177}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Raport
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rap_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rap_den
\par }}}}{\shp{\*\shpinst\shplid1178{\sp{\sn relLeft}{\sv 2421}}{\sp{\sn relTop}{\sv 4834}}{\sp{\sn relRight}{\sv 3981}}{\sp{\sn relBottom}{\sv 4834}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}}}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8206\dpgroup\dpcount4\dpx1010\dpy93\dpxsize7080\dpysize3840
\dpgroup\dpcount4\dpx4945\dpy415\dpxsize2135\dpysize2802\dpgroup\dpcount3\dpx0\dpy0\dpxsize2135\dpysize830\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\fs20 Departament
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_nume}{\i\fs20 
\par }}\dpx0\dpy0\dpxsize2135\dpysize830\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7080\dppty3840\dpx0\dpy316\dpxsize2135\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy1733\dpxsize2135\dpysize1069\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Raport
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rap_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rap_den
\par Dep_id }{\fs20\lang1033\langfe1033\langnp1033 [FK] NULL}{\i\lang1033\langfe1033\langnp1033 
\par }}\dpx0\dpy0\dpxsize2135\dpysize1069\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7080\dppty3840\dpx0\dpy311\dpxsize2135\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpline\dpptx7080\dppty0\dpptx0\dppty3840\dpx1067\dpy830\dpxsize1\dpysize903\dplinew15\dplinecor0\dplinecog0\dplinecob0
\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Fiecare departament public\'e3 unul sau mai multe rapoarte, 
\'eens\'e3 nu este obligatoriu ca un raport s\'e3 fie publicat de un anumit departament.
\par }}\dpx1798\dpy0\dpxsize3034\dpysize1349\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpgroup\dpcount3\dpx0\dpy0\dpxsize1615\dpysize3840\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,1)
\par }}\dpx702\dpy861\dpxsize899\dpysize519\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpgroup\dpcount3\dpx0\dpy0\dpxsize1615\dpysize3840\dpgroup\dpcount6\dpx0\dpy0\dpxsize1615\dpysize3145
\dpgroup\dpcount3\dpx0\dpy0\dpxsize1573\dpysize861\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Departament
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Dep_nume
\par }}\dpx0\dpy0\dpxsize1573\dpysize861\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7080\dppty3840\dpx0\dpy311\dpxsize1573\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s16\qc \li0\ri0\sb120\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20 Public
\'e3
\par }}\dpx56\dpy1484\dpxsize1461\dpysize903\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx7080\dppty0\dpptx0\dppty3840\dpx786\dpy2366\dpxsize0\dpysize623
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,M)
\par }}\dpx716\dpy2626\dpxsize899\dpysize519\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpline\dpptx7080\dppty0\dpptx0\dppty3840\dpx786\dpy856\dpxsize0\dpysize623
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy2989\dpxsize1573\dpysize851\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Raport
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rap_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Rap_den
\par }}\dpx0\dpy0\dpxsize1573\dpysize851\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7080\dppty3840\dpx0\dpy341\dpxsize1560\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Figura 2.8 Transformarea rela\'feiilor 1:N \'een care participarea entit\'e3\'feii din partea }{\i unu}{\f34  este facultativ\'e3
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par 
\par 
\par 
\par }{\fs20\lang1024\langfe1024\noproof\langnp1033 {\shpgrp{\*\shpinst\shpleft861\shptop153\shpright8090\shpbottom3820\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz1\shplid1179
{\sp{\sn groupLeft}{\sv 2272}}{\sp{\sn groupTop}{\sv 9015}}{\sp{\sn groupRight}{\sv 9501}}{\sp{\sn groupBottom}{\sv 12682}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1180{\sp{\sn groupLeft}{\sv 7941}}{\sp{\sn groupTop}{\sv 7024}}{\sp{\sn groupRight}{\sv 10221}}
{\sp{\sn groupBottom}{\sv 10264}}{\sp{\sn relLeft}{\sv 6804}}{\sp{\sn relTop}{\sv 9348}}{\sp{\sn relRight}{\sv 9501}}{\sp{\sn relBottom}{\sv 12076}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1181
{\sp{\sn groupLeft}{\sv 7941}}{\sp{\sn groupTop}{\sv 1984}}{\sp{\sn groupRight}{\sv 10221}}{\sp{\sn groupBottom}{\sv 2944}}{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 7024}}
{\sp{\sn relRight}{\sv 10221}}{\sp{\sn relBottom}{\sv 7984}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 12}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1182{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 1984}}{\sp{\sn relRight}{\sv 10221}}
{\sp{\sn relBottom}{\sv 2944}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 4456448}}{\sp{\sn hspNext}{\sv 1182}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furnizor
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furn_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furn_nume}{\i\fs20 
\par }}}}{\shp{\*\shpinst\shplid1183{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 2350}}{\sp{\sn relRight}{\sv 10221}}{\sp{\sn relBottom}{\sv 2350}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1184{\sp{\sn groupLeft}{\sv 7941}}{\sp{\sn groupTop}{\sv 3988}}
{\sp{\sn groupRight}{\sv 10221}}{\sp{\sn groupBottom}{\sv 5224}}{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 9028}}{\sp{\sn relRight}{\sv 10221}}{\sp{\sn relBottom}{\sv 10264}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 12}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1185
{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 3988}}{\sp{\sn relRight}{\sv 10221}}{\sp{\sn relBottom}{\sv 5224}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 4521984}}{\sp{\sn hspNext}{\sv 1185}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Factura
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_data
\par }{\i\fs20 Furn_id }{\i\fs20\lang1033\langfe1033\langnp1033 [FK] NOT NULL
\par }}}}{\shp{\*\shpinst\shplid1186{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 4348}}{\sp{\sn relRight}{\sv 10221}}{\sp{\sn relBottom}{\sv 4348}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1187{\sp{\sn relLeft}{\sv 9080}}{\sp{\sn relTop}{\sv 7984}}
{\sp{\sn relRight}{\sv 9081}}{\sp{\sn relBottom}{\sv 9028}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineStartArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLine}{\sv 1}}{\sp{\sn lidRegroup}{\sv 12}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1188{\sp{\sn relLeft}{\sv 3861}}{\sp{\sn relTop}{\sv 9544}}
{\sp{\sn relRight}{\sv 6775}}{\sp{\sn relBottom}{\sv 10624}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 4587520}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 O factur\'e3 este emis\'e3 de un  furnizor, \'ee
n timp ce un furnizor poate emite mai multe facturi sau nici una.
\par }}}}{\shpgrp{\*\shpinst\shplid1189{\sp{\sn groupLeft}{\sv 2661}}{\sp{\sn groupTop}{\sv 6628}}{\sp{\sn groupRight}{\sv 4416}}{\sp{\sn groupBottom}{\sv 10984}}{\sp{\sn relLeft}{\sv 2272}}
{\sp{\sn relTop}{\sv 9015}}{\sp{\sn relRight}{\sv 3850}}{\sp{\sn relBottom}{\sv 12682}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1190{\sp{\sn groupLeft}{\sv 2661}}{\sp{\sn groupTop}{\sv 6544}}{\sp{\sn groupRight}{\sv 4416}}
{\sp{\sn groupBottom}{\sv 10180}}{\sp{\sn relLeft}{\sv 2661}}{\sp{\sn relTop}{\sv 6628}}{\sp{\sn relRight}{\sv 4416}}{\sp{\sn relBottom}{\sv 10264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1191{\sp{\sn groupLeft}{\sv 2661}}{\sp{\sn groupTop}{\sv 6544}}{\sp{\sn groupRight}{\sv 4386}}
{\sp{\sn groupBottom}{\sv 10180}}{\sp{\sn relLeft}{\sv 2661}}{\sp{\sn relTop}{\sv 6544}}{\sp{\sn relRight}{\sv 4386}}{\sp{\sn relBottom}{\sv 10180}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn lidRegroup}{\sv 11}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1192{\sp{\sn groupLeft}{\sv 2781}}
{\sp{\sn groupTop}{\sv 3508}}{\sp{\sn groupRight}{\sv 4461}}{\sp{\sn groupBottom}{\sv 4504}}{\sp{\sn relLeft}{\sv 2661}}{\sp{\sn relTop}{\sv 6544}}{\sp{\sn relRight}{\sv 4341}}
{\sp{\sn relBottom}{\sv 7540}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 12}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1193{\sp{\sn relLeft}{\sv 2781}}{\sp{\sn relTop}{\sv 3508}}{\sp{\sn relRight}{\sv 4461}}{\sp{\sn relBottom}{\sv 4504}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}
{\sp{\sn lTxid}{\sv 4653056}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furnizor
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furn_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furn_nume
\par }}}}{\shp{\*\shpinst\shplid1194{\sp{\sn relLeft}{\sv 2781}}{\sp{\sn relTop}{\sv 3868}}{\sp{\sn relRight}{\sv 4461}}{\sp{\sn relBottom}{\sv 3868}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1195{\sp{\sn relLeft}{\sv 2721}}{\sp{\sn relTop}{\sv 8260}}
{\sp{\sn relRight}{\sv 4281}}{\sp{\sn relBottom}{\sv 9304}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 4}}{\sp{\sn lTxid}{\sv 4718592}}{\sp{\sn dxTextLeft}{\sv 0}}{\sp{\sn dyTextTop}{\sv 0}}{\sp{\sn dxTextRight}{\sv 0}}
{\sp{\sn dyTextBottom}{\sv 0}}{\sp{\sn lidRegroup}{\sv 12}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s16\qc \li0\ri0\sb120\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Emite
\par }}}}{\shp{\*\shpinst\shplid1196{\sp{\sn relLeft}{\sv 3501}}{\sp{\sn relTop}{\sv 9280}}{\sp{\sn relRight}{\sv 3501}}{\sp{\sn relBottom}{\sv 10000}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 12}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shp{\*\shpinst\shplid1197{\sp{\sn relLeft}{\sv 3426}}{\sp{\sn relTop}{\sv 9580}}{\sp{\sn relRight}{\sv 4386}}{\sp{\sn relBottom}{\sv 10180}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 4784128}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 12}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,M)
\par }}}}{\shp{\*\shpinst\shplid1198{\sp{\sn relLeft}{\sv 3501}}{\sp{\sn relTop}{\sv 7534}}{\sp{\sn relRight}{\sv 3501}}{\sp{\sn relBottom}{\sv 8254}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 12}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shp{\*\shpinst\shplid1199{\sp{\sn relLeft}{\sv 3456}}{\sp{\sn relTop}{\sv 7519}}{\sp{\sn relRight}{\sv 4416}}{\sp{\sn relBottom}{\sv 8119}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 4849664}}
{\sp{\sn hspNext}{\sv 1199}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,1)
\par }}}}}}{\shpgrp{\*\shpinst\shplid1200{\sp{\sn groupLeft}{\sv 2661}}{\sp{\sn groupTop}{\sv 10000}}{\sp{\sn groupRight}{\sv 4341}}{\sp{\sn groupBottom}{\sv 10984}}{\sp{\sn relLeft}{\sv 2661}}
{\sp{\sn relTop}{\sv 10000}}{\sp{\sn relRight}{\sv 4341}}{\sp{\sn relBottom}{\sv 10984}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1201{\sp{\sn relLeft}{\sv 2661}}{\sp{\sn relTop}{\sv 10000}}{\sp{\sn relRight}{\sv 4341}}{\sp{\sn relBottom}{\sv 10984}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}
{\sp{\sn lTxid}{\sv 4915200}}{\sp{\sn lidRegroup}{\sv 12}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 
Factura
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_data
\par }}}}{\shp{\*\shpinst\shplid1202{\sp{\sn relLeft}{\sv 2661}}{\sp{\sn relTop}{\sv 10384}}{\sp{\sn relRight}{\sv 4341}}{\sp{\sn relBottom}{\sv 10384}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}}}
}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8193\dpgroup\dpcount4\dpx861\dpy153\dpxsize7229\dpysize3667\dpgroup\dpcount4\dpx4532\dpy333\dpxsize2697\dpysize2728\dpgroup\dpcount3\dpx0\dpy0\dpxsize2697\dpysize808\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furnizor
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furn_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furn_nume}{\i\fs20 
\par }}\dpx0\dpy0\dpxsize2697\dpysize808\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7229\dppty3667\dpx0\dpy308\dpxsize2697\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy1687\dpxsize2697\dpysize1041\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Factura
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_data
\par }{\i\fs20 Furn_id }{\i\fs20\lang1033\langfe1033\langnp1033 [FK] NOT NULL
\par }}\dpx0\dpy0\dpxsize2697\dpysize1041\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7229\dppty3667\dpx0\dpy303\dpxsize2697\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpline\dpptx7229\dppty0\dpptx0\dppty3667\dpx1347\dpy808\dpxsize2\dpysize879\dplinew15\dplinecor0\dplinecog0\dplinecob0
\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 O factur\'e3 este emis\'e3 de un  furnizor, \'ee
n timp ce un furnizor poate emite mai multe facturi sau nici una.
\par }}\dpx1589\dpy529\dpxsize2914\dpysize1080\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpgroup\dpcount3\dpx0\dpy0\dpxsize1578\dpysize3667\dpgroup\dpcount3\dpx0\dpy0\dpxsize1578\dpysize3061
\dpgroup\dpcount6\dpx0\dpy0\dpxsize1551\dpysize3061\dpgroup\dpcount3\dpx0\dpy0\dpxsize1511\dpysize838\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 
Furnizor
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furn_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Furn_nume
\par }}\dpx0\dpy0\dpxsize1511\dpysize838\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7229\dppty3667\dpx0\dpy303\dpxsize1511\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s16\qc \li0\ri0\sb120\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Emite
\par }}\dpx54\dpy1445\dpxsize1403\dpysize879\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx7229\dppty0\dpptx0\dppty3667\dpx755\dpy2303\dpxsize0\dpysize606
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,M)
\par }}\dpx688\dpy2556\dpxsize863\dpysize505\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpline\dpptx7229\dppty0\dpptx0\dppty3667\dpx755\dpy833\dpxsize0\dpysize607
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(1,1)
\par }}\dpx715\dpy821\dpxsize863\dpysize505\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy2839\dpxsize1511\dpysize828
\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Factura
\par }\pard\plain \s4\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_id
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Fact_data
\par }}\dpx0\dpy0\dpxsize1511\dpysize828\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7229\dppty3667\dpx0\dpy323\dpxsize1511\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Figura 2.9 Transformarea rela\'feiilor 1:N \'een care entitatea din partea unu este obligatorie
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s3\qj \fi709\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 2.4.2 Reprezentarea rela\'feiilor recursive 1:1 \'bai 1:M
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }{\f34 O rela\'feie recursiv\'e3 de tipul 1:1 presupune existen\'fea unor perechi de instan\'fee ale entit\'e3\'feii \'eentre care exist\'e3 o leg\'e3tur\'e3, indicat\'e3 prin numele rela\'feiei. Aceste perechi pot fi op\'feionale sau obligatorii. \'ce
n oricare din cazuri \'een tabela corespunz\'e3toare entit\'e3\'feii se adaug\'e3 cheia str\'e3in\'e3 sub un alt nume dec\'e2t cheia principal\'e3, \'bai care poate lua valori nule dac\'e3 rela\'feia este op\'feional\'e3. Aceea\'bai regul\'e3 se aplic\'e3
 \'bai \'een cazul unei rela\'feii recursive 1:M.
\par }{\fs20\lang1024\langfe1024\noproof\langnp1033 {\shpgrp{\*\shpinst\shpleft861\shptop156\shpright8330\shpbottom2961\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz2\shplid1203
{\sp{\sn groupLeft}{\sv 2661}}{\sp{\sn groupTop}{\sv 1624}}{\sp{\sn groupRight}{\sv 10461}}{\sp{\sn groupBottom}{\sv 4429}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1204{\sp{\sn groupLeft}{\sv 2661}}{\sp{\sn groupTop}{\sv 1624}}{\sp{\sn groupRight}{\sv 4701}}{\sp{\sn groupBottom}{\sv 4429}}
{\sp{\sn relLeft}{\sv 2661}}{\sp{\sn relTop}{\sv 1624}}{\sp{\sn relRight}{\sv 4701}}{\sp{\sn relBottom}{\sv 4429}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1205{\sp{\sn relLeft}{\sv 2661}}{\sp{\sn relTop}{\sv 1624}}{\sp{\sn relRight}{\sv 4701}}
{\sp{\sn relBottom}{\sv 2704}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 4980736}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Angajat
\par Ang_id
\par Ang_nume}{
\par }}}}{\shp{\*\shpinst\shplid1206{\sp{\sn relLeft}{\sv 2661}}{\sp{\sn relTop}{\sv 1984}}{\sp{\sn relRight}{\sv 4701}}{\sp{\sn relBottom}{\sv 1984}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1207{\sp{\sn relLeft}{\sv 2916}}{\sp{\sn relTop}{\sv 3109}}
{\sp{\sn relRight}{\sv 4356}}{\sp{\sn relBottom}{\sv 4429}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 4}}{\sp{\sn lTxid}{\sv 5046272}}{\sp{\sn dxTextLeft}{\sv 0}}{\sp{\sn dyTextTop}{\sv 0}}{\sp{\sn dxTextRight}{\sv 0}}
{\sp{\sn dyTextBottom}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Este c\'e3s\'e3torit cu

\par }}}}{\shp{\*\shpinst\shplid1208{\sp{\sn relLeft}{\sv 2916}}{\sp{\sn relTop}{\sv 2704}}{\sp{\sn relRight}{\sv 2916}}{\sp{\sn relBottom}{\sv 3784}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1209{\sp{\sn relLeft}{\sv 4356}}{\sp{\sn relTop}{\sv 2704}}
{\sp{\sn relRight}{\sv 4356}}{\sp{\sn relBottom}{\sv 3784}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1210{\sp{\sn relLeft}{\sv 2931}}{\sp{\sn relTop}{\sv 2734}}{\sp{\sn relRight}{\sv 3651}}{\sp{\sn relBottom}{\sv 3094}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 5111808}}{\sp{\sn dxTextLeft}{\sv 0}}{\sp{\sn dyTextTop}{\sv 0}}{\sp{\sn dxTextRight}{\sv 0}}{\sp{\sn dyTextBottom}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,1)
\par }}}}{\shp{\*\shpinst\shplid1211{\sp{\sn relLeft}{\sv 3861}}{\sp{\sn relTop}{\sv 2734}}{\sp{\sn relRight}{\sv 4581}}{\sp{\sn relBottom}{\sv 3094}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 5177344}}{\sp{\sn dxTextLeft}{\sv 0}}{\sp{\sn dyTextTop}{\sv 0}}{\sp{\sn dxTextRight}{\sv 0}}{\sp{\sn dyTextBottom}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,1)
\par }}}}}}{\shpgrp{\*\shpinst\shplid1212{\sp{\sn groupLeft}{\sv 7941}}{\sp{\sn groupTop}{\sv 1984}}{\sp{\sn groupRight}{\sv 10101}}{\sp{\sn groupBottom}{\sv 3304}}{\sp{\sn relLeft}{\sv 8301}}
{\sp{\sn relTop}{\sv 1984}}{\sp{\sn relRight}{\sv 10461}}{\sp{\sn relBottom}{\sv 3304}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}
{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1213{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 1984}}{\sp{\sn relRight}{\sv 10101}}
{\sp{\sn relBottom}{\sv 3304}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 5242880}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Angajat
\par Ang_id
\par Ang_nume
\par }{\i\fs20 Sot_id }{\i\fs20\lang1033\langfe1033\langnp1033 [FK] NULL
\par }}}}{\shp{\*\shpinst\shplid1214{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 2344}}{\sp{\sn relRight}{\sv 10101}}{\sp{\sn relBottom}{\sv 2344}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1215{\sp{\sn relLeft}{\sv 4941}}{\sp{\sn relTop}{\sv 1864}}
{\sp{\sn relRight}{\sv 8061}}{\sp{\sn relBottom}{\sv 2944}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 5308416}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\lang1033\langfe1033\langnp1033 Un angajat poate fi c}{\f34\fs20 \'e3}{
\f34\fs20\lang1033\langfe1033\langnp1033 s\'e3torit
\par }\pard\plain \s17\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\lang1033\langfe1033\langnp1033 cu un alt angajat din aceea\'bai firm\'e3, dar nu este obligatoriu.
\par }}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8194\dpgroup\dpcount4\dpx861\dpy156\dpxsize7469\dpysize2805\dpgroup\dpcount8\dpx0\dpy0\dpxsize1953\dpysize2805\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Angajat
\par Ang_id
\par Ang_nume}{
\par }}\dpx0\dpy0\dpxsize1953\dpysize1080\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7469\dppty2805\dpx0\dpy360\dpxsize1953\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Este c\'e3s\'e3torit cu
\par }}\dpx244\dpy1485\dpxsize1379\dpysize1320\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx7469\dppty0\dpptx0\dppty2805
\dpx244\dpy1080\dpxsize0\dpysize1080\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx7469\dppty0\dpptx0\dppty2805\dpx1623\dpy1080\dpxsize0\dpysize1080\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,1)
\par }}\dpx258\dpy1110\dpxsize690\dpysize360\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {(0,1)
\par }}\dpx1149\dpy1110\dpxsize689\dpysize360\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx5401\dpy360\dpxsize2068\dpysize1320
\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20 Angajat
\par Ang_id
\par Ang_nume
\par }{\i\fs20 Sot_id }{\i\fs20\lang1033\langfe1033\langnp1033 [FK] NULL
\par }}\dpx0\dpy0\dpxsize2068\dpysize1320\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7469\dppty2805\dpx0\dpy360\dpxsize2068\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\fs20\lang1033\langfe1033\langnp1033 Un angajat poate fi c}{\f34\fs20 \'e3}{\f34\fs20\lang1033\langfe1033\langnp1033 s\'e3torit
\par }\pard\plain \s17\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\lang1033\langfe1033\langnp1033 cu un alt angajat din aceea\'bai firm\'e3, dar nu este obligatoriu.
\par }}\dpx2183\dpy240\dpxsize2988\dpysize1080\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Figura 2.10 Transformarea rela\'feiilor recursive
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s15\qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\f34\fs24 2.4.3 Reprezentarea rela\'feiilor binare M:N \'bai rela\'feiilor ternare
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }\pard\plain \s19\qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 Rela\'feiile binare de tipul M:N \'bai rela\'feiile ternare, indiferent de tipul cardinalit\'e3\'feii, primesc acela\'bai 
\'84tratament\'94 la transformarea lor: se creeaz\'e3 c\'e2te o tabel\'e3 pentru fiecare entitate implicat\'e3 \'een rela\'feia analizat\'e3, la care se adaug\'e3 o nou\'e3 tabel\'e3, ce va avea drept atribute cheile principale ale entit\'e3\'fe
ilor asociate (\'bai care vor juca rolul de chei str\'e3ine) \'bai eventualele propriet\'e3\'fei ale rela\'feiei. \'cen schimb, regulile de definire a cheii primare difer\'e3 \'een func\'feie de ordinul \'bai cardinalitatea rela\'feiei.
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 \'cen figura 2.11 este prezentat\'e3 rela\'feia binar\'e3 }{\i\f34 Con\'feine}{\f34  dintre entit\'e3\'feile }{\i Produs}{
\f34  \'bai }{\i Factura}{\f34 , cu cardinalitatea M:N. \'cen urma transform\'e3rii rezult\'e3 tabelele }{\i Produs}{\f34  \'bai }{\i Factura}{\f34 , corespunz\'e3toare celor dou\'e3 entit\'e3\'fei, \'bai tabela }{\i Articol_factura}{\f34 . Aceast\'e3
 tabel\'e3 con\'feine cheile primare ale celor dou\'e3 entit\'e3\'fei asociate, precum \'bai atributele }{\i Cantitate}{\f34  \'bai }{\i Pret}{\f34  care erau ini\'feial propriet\'e3\'fei ale rela\'feiei }{\i\f34 Con\'feine}{\f34 . De regul\'e3
, cheia noii tabele este format\'e3 prin combinarea cheilor celor dou\'e3 entit\'e3\'fei, dup\'e3 cum se vede \'bai \'een figura 2.11. \'cen unele situa\'feii, combina\'feia dintre cele dou\'e3 chei str\'e3ine nu este suficient\'e3
 pentru a juca rolul de cheie primar\'e3, fiind necesar\'e3 includerea \'bai a altor atribute.
\par }{
\par }{\fs20\lang1024\langfe1024\noproof\langnp1033 {\shpgrp{\*\shpinst\shpleft1221\shptop40\shpright8181\shpbottom4120\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz8\shplid1216
{\sp{\sn groupLeft}{\sv 3021}}{\sp{\sn groupTop}{\sv 3064}}{\sp{\sn groupRight}{\sv 9981}}{\sp{\sn groupBottom}{\sv 7144}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1217{\sp{\sn groupLeft}{\sv 3021}}{\sp{\sn groupTop}{\sv 3304}}{\sp{\sn groupRight}{\sv 4461}}{\sp{\sn groupBottom}{\sv 7144}}
{\sp{\sn relLeft}{\sv 3021}}{\sp{\sn relTop}{\sv 3184}}{\sp{\sn relRight}{\sv 4581}}{\sp{\sn relBottom}{\sv 7144}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1218{\sp{\sn groupLeft}{\sv 2781}}{\sp{\sn groupTop}{\sv 3508}}{\sp{\sn groupRight}{\sv 4461}}
{\sp{\sn groupBottom}{\sv 4504}}{\sp{\sn relLeft}{\sv 3021}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 4399}}{\sp{\sn relBottom}{\sv 4182}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1219{\sp{\sn relLeft}{\sv 2781}}{\sp{\sn relTop}{\sv 3508}}{\sp{\sn relRight}{\sv 4461}}
{\sp{\sn relBottom}{\sv 4504}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 5373952}}{\sp{\sn hspNext}{\sv 1219}}
{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\fs20\cf1 Produs
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Prod_id
\par }{\fs20\cf1 Prod_den
\par }}}}{\shp{\*\shpinst\shplid1220{\sp{\sn relLeft}{\sv 2781}}{\sp{\sn relTop}{\sv 3868}}{\sp{\sn relRight}{\sv 4461}}{\sp{\sn relBottom}{\sv 3868}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1221{\sp{\sn relLeft}{\sv 3070}}{\sp{\sn relTop}{\sv 4817}}
{\sp{\sn relRight}{\sv 4350}}{\sp{\sn relBottom}{\sv 5737}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 4}}{\sp{\sn lTxid}{\sv 5439488}}{\sp{\sn dxTextLeft}{\sv 0}}{\sp{\sn dyTextTop}{\sv 0}}{\sp{\sn dxTextRight}{\sv 0}}
{\sp{\sn dyTextBottom}{\sv 0}}{\sp{\sn hspNext}{\sv 1221}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\s15\qc \li0\ri0\sb120\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\cf1 Con\'feine
\par }}}}{\shp{\*\shpinst\shplid1222{\sp{\sn relLeft}{\sv 3710}}{\sp{\sn relTop}{\sv 5716}}{\sp{\sn relRight}{\sv 3710}}{\sp{\sn relBottom}{\sv 6351}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1223{\sp{\sn relLeft}{\sv 3648}}{\sp{\sn relTop}{\sv 5896}}
{\sp{\sn relRight}{\sv 4436}}{\sp{\sn relBottom}{\sv 6424}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 5505024}}
{\sp{\sn hspNext}{\sv 1223}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (0,M}{\cf1 )
\par }}}}{\shp{\*\shpinst\shplid1224{\sp{\sn relLeft}{\sv 3710}}{\sp{\sn relTop}{\sv 4177}}{\sp{\sn relRight}{\sv 3710}}{\sp{\sn relBottom}{\sv 4811}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1225{\sp{\sn relLeft}{\sv 3673}}{\sp{\sn relTop}{\sv 4164}}
{\sp{\sn relRight}{\sv 4461}}{\sp{\sn relBottom}{\sv 4692}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 5570560}}
{\sp{\sn hspNext}{\sv 1225}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (1,M)
\par }}}}{\shpgrp{\*\shpinst\shplid1226{\sp{\sn groupLeft}{\sv 2661}}{\sp{\sn groupTop}{\sv 10000}}{\sp{\sn groupRight}{\sv 4341}}{\sp{\sn groupBottom}{\sv 10984}}{\sp{\sn relLeft}{\sv 3021}}
{\sp{\sn relTop}{\sv 6277}}{\sp{\sn relRight}{\sv 4400}}{\sp{\sn relBottom}{\sv 7144}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1227{\sp{\sn relLeft}{\sv 2661}}{\sp{\sn relTop}{\sv 10000}}{\sp{\sn relRight}{\sv 4341}}
{\sp{\sn relBottom}{\sv 10984}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 5636096}}{\sp{\sn hspNext}{\sv 1227}}
{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\fs20\cf1 Factura
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Fact_nr
\par }{\fs20\cf1 Fact_data
\par }}}}{\shp{\*\shpinst\shplid1228{\sp{\sn relLeft}{\sv 2661}}{\sp{\sn relTop}{\sv 10384}}{\sp{\sn relRight}{\sv 4341}}{\sp{\sn relBottom}{\sv 10384}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}}}
{\shp{\*\shpinst\shplid1229{\sp{\sn relLeft}{\sv 4581}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 7821}}{\sp{\sn relBottom}{\sv 4864}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fLockText}{\sv 0}}
{\sp{\sn lTxid}{\sv 5701632}}{\sp{\sn hspNext}{\sv 1229}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20 Fiecare factur\'e3 poate con\'feine mai multe produse, iar un produs se poate reg\'e3si pe mai multe facturi.
\par }}}}{\shpgrp{\*\shpinst\shplid1230{\sp{\sn groupLeft}{\sv 7941}}{\sp{\sn groupTop}{\sv 1624}}{\sp{\sn groupRight}{\sv 10941}}{\sp{\sn groupBottom}{\sv 6340}}{\sp{\sn relLeft}{\sv 7821}}
{\sp{\sn relTop}{\sv 3064}}{\sp{\sn relRight}{\sv 9981}}{\sp{\sn relBottom}{\sv 7144}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn fLockText}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}
{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1231{\sp{\sn groupLeft}{\sv 7941}}{\sp{\sn groupTop}{\sv 1984}}{\sp{\sn groupRight}{\sv 10221}}
{\sp{\sn groupBottom}{\sv 2944}}{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 1624}}{\sp{\sn relRight}{\sv 10941}}{\sp{\sn relBottom}{\sv 2584}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}
{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1232{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 1984}}{\sp{\sn relRight}{\sv 10221}}{\sp{\sn relBottom}{\sv 2944}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 5767168}}{\sp{\sn hspNext}{\sv 1232}}{\sp{\sn fillColor}{\sv 8428502}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Produs
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Prod_id
\par }{\fs20\cf1 Prod_den}{\i\fs20\cf1 
\par }}}}{\shp{\*\shpinst\shplid1233{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 2350}}{\sp{\sn relRight}{\sv 10221}}{\sp{\sn relBottom}{\sv 2350}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1234{\sp{\sn groupLeft}{\sv 7941}}{\sp{\sn groupTop}{\sv 4744}}
{\sp{\sn groupRight}{\sv 10941}}{\sp{\sn groupBottom}{\sv 5740}}{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 5344}}{\sp{\sn relRight}{\sv 10941}}{\sp{\sn relBottom}{\sv 6340}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1235{\sp{\sn relLeft}{\sv 7941}}
{\sp{\sn relTop}{\sv 4744}}{\sp{\sn relRight}{\sv 10941}}{\sp{\sn relBottom}{\sv 5740}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}
{\sp{\sn lTxid}{\sv 5832704}}{\sp{\sn hspNext}{\sv 1235}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Factura
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Fact_nr
\par }{\fs20\cf1 Fact_data}{\i\fs20\cf1 
\par }}}}{\shp{\*\shpinst\shplid1236{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 5068}}{\sp{\sn relRight}{\sv 10941}}{\sp{\sn relBottom}{\sv 5068}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1237{\sp{\sn groupLeft}{\sv 7941}}{\sp{\sn groupTop}{\sv 3184}}
{\sp{\sn groupRight}{\sv 10941}}{\sp{\sn groupBottom}{\sv 4744}}{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 3184}}{\sp{\sn relRight}{\sv 10941}}{\sp{\sn relBottom}{\sv 4744}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1238
{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 3184}}{\sp{\sn relRight}{\sv 10941}}{\sp{\sn relBottom}{\sv 4744}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 5898240}}{\sp{\sn hspNext}{\sv 1238}}
{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\fs20\cf1 Articol_factura
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\i\fs20\cf1 Prod_id [FK]
\par Fact_nr [FK]
\par }{\fs20\cf1 Cantitate
\par Pret}{\i\fs20\cf1 
\par }}}}{\shp{\*\shpinst\shplid1239{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 3544}}{\sp{\sn relRight}{\sv 10941}}{\sp{\sn relBottom}{\sv 3545}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1240{\sp{\sn relLeft}{\sv 9381}}{\sp{\sn relTop}{\sv 2584}}
{\sp{\sn relRight}{\sv 9381}}{\sp{\sn relBottom}{\sv 3184}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1241{\sp{\sn relLeft}{\sv 9381}}{\sp{\sn relTop}{\sv 4744}}
{\sp{\sn relRight}{\sv 9381}}{\sp{\sn relBottom}{\sv 5344}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8200\dpgroup\dpcount4\dpx1221\dpy40\dpxsize6960\dpysize4080\dpgroup\dpcount8\dpx0\dpy120\dpxsize1560\dpysize3960
\dpgroup\dpcount3\dpx0\dpy0\dpxsize1493\dpysize905\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Produs
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Prod_id
\par }{\fs20\cf1 Prod_den
\par }}\dpx0\dpy0\dpxsize1493\dpysize905\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty4080\dpx0\dpy327\dpxsize1493\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s15\qc \li0\ri0\sb120\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\cf1 Con\'fe
ine
\par }}\dpx53\dpy1560\dpxsize1387\dpysize949\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6960\dppty0\dpptx0\dppty4080\dpx746\dpy2487\dpxsize0\dpysize655
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (0,M}{\cf1 )
\par }}\dpx679\dpy2673\dpxsize854\dpysize545\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dpline\dpptx6960\dppty0\dpptx0\dppty4080\dpx746\dpy900\dpxsize0\dpysize654
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 (1,M)
\par }}\dpx706\dpy887\dpxsize854\dpysize544\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dpgroup\dpcount3\dpx0\dpy3066\dpxsize1494\dpysize894\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Factura
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Fact_nr
\par }{\fs20\cf1 Fact_data
\par }}\dpx0\dpy0\dpxsize1494\dpysize894\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty4080\dpx0\dpy349\dpxsize1494\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20 Fiecare factur\'e3 poate con\'feine mai multe produse, iar un produs se poate reg\'e3si pe mai multe facturi.
\par }}\dpx1560\dpy600\dpxsize3240\dpysize1200\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpgroup\dpcount6\dpx4800\dpy0\dpxsize2160\dpysize4080\dpgroup\dpcount3\dpx0\dpy0\dpxsize2160\dpysize831
\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Produs
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Prod_id
\par }{\fs20\cf1 Prod_den}{\i\fs20\cf1 
\par }}\dpx0\dpy0\dpxsize2160\dpysize831\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty4080\dpx0\dpy317\dpxsize2160\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy3218\dpxsize2160\dpysize862\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Factura
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Fact_nr
\par }{\fs20\cf1 Fact_data}{\i\fs20\cf1 
\par }}\dpx0\dpy0\dpxsize2160\dpysize862\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty4080\dpx0\dpy280\dpxsize2160\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy1350\dpxsize2160\dpysize1349\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Articol_factura
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\i\fs20\cf1 Prod_id [FK]
\par Fact_nr [FK]
\par }{\fs20\cf1 Cantitate
\par Pret}{\i\fs20\cf1 
\par }}\dpx0\dpy0\dpxsize2160\dpysize1349\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty4080\dpx0\dpy311\dpxsize2160\dpysize1
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpline\dpptx0\dppty0\dpptx6960\dppty4080\dpx1037\dpy831\dpxsize0\dpysize519\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6960\dppty0\dpptx0\dppty4080
\dpx1037\dpy2699\dpxsize0\dpysize519\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Figura 2.11 Transformarea rela\'feiilor M:N
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\lang1024\langfe1024\noproof\langnp1033 
{\shpgrp{\*\shpinst\shpleft861\shptop124\shpright8661\shpbottom6580\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz9\shplid1242
{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 8344}}{\sp{\sn groupRight}{\sv 10341}}{\sp{\sn groupBottom}{\sv 14584}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1243{\sp{\sn groupLeft}{\sv 1488}}{\sp{\sn groupTop}{\sv 864}}{\sp{\sn groupRight}{\sv 4818}}{\sp{\sn groupBottom}{\sv 2112}}
{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 8344}}{\sp{\sn relRight}{\sv 9741}}{\sp{\sn relBottom}{\sv 10744}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn fLockText}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}
{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1244{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 4221}}
{\sp{\sn groupBottom}{\sv 2464}}{\sp{\sn relLeft}{\sv 2744}}{\sp{\sn relTop}{\sv 864}}{\sp{\sn relRight}{\sv 3521}}{\sp{\sn relBottom}{\sv 1298}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}
{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1245{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 2464}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 5963776}}{\sp{\sn hspNext}{\sv 1245}}{\sp{\sn fillColor}{\sv 8428502}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Tehnician
\par }{\b\fs20\cf1 Ang_id
\par }{\fs20\cf1 Ang_nume
\par }}}}{\shp{\*\shpinst\shplid1246{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1864}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 1864}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1247{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 4221}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 1488}}{\sp{\sn relTop}{\sv 1624}}{\sp{\sn relRight}{\sv 2265}}{\sp{\sn relBottom}{\sv 2058}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1248
{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 6029312}}{\sp{\sn hspNext}{\sv 1248}}
{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\fs20\cf1 Proiect
\par }{\b\fs20\cf1 Pr_id
\par }{\fs20\cf1 Pr_den
\par }}}}{\shp{\*\shpinst\shplid1249{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1250{\sp{\sn groupLeft}{\sv 7341}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 9021}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 4041}}{\sp{\sn relTop}{\sv 1624}}{\sp{\sn relRight}{\sv 4818}}{\sp{\sn relBottom}{\sv 2058}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1251
{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 6094848}}{\sp{\sn hspNext}{\sv 1251}}
{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\fs20\cf1 Documentatie
\par }{\b\fs20\cf1 Doc_nr
\par }{\fs20\cf1 Doc_termen
\par }}}}{\shp{\*\shpinst\shplid1252{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1253{\sp{\sn relLeft}{\sv 2654}}{\sp{\sn relTop}{\sv 1569}}
{\sp{\sn relRight}{\sv 3597}}{\sp{\sn relBottom}{\sv 2112}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 4}}{\sp{\sn lTxid}{\sv 6160384}}{\sp{\sn dxTextLeft}{\sv 0}}{\sp{\sn dyTextTop}{\sv 0}}{\sp{\sn dxTextRight}{\sv 0}}
{\sp{\sn dyTextBottom}{\sv 0}}{\sp{\sn hspNext}{\sv 1253}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\sb120\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf1 \'centocme\'bate
\par }}}}{\shp{\*\shpinst\shplid1254{\sp{\sn relLeft}{\sv 2265}}{\sp{\sn relTop}{\sv 1841}}{\sp{\sn relRight}{\sv 2654}}{\sp{\sn relBottom}{\sv 1841}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1255{\sp{\sn relLeft}{\sv 3597}}{\sp{\sn relTop}{\sv 1841}}
{\sp{\sn relRight}{\sv 4041}}{\sp{\sn relBottom}{\sv 1841}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1256{\sp{\sn relLeft}{\sv 3132}}{\sp{\sn relTop}{\sv 1298}}{\sp{\sn relRight}{\sv 3132}}{\sp{\sn relBottom}{\sv 1569}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shp{\*\shpinst\shplid1257{\sp{\sn relLeft}{\sv 3098}}{\sp{\sn relTop}{\sv 1298}}{\sp{\sn relRight}{\sv 3320}}{\sp{\sn relBottom}{\sv 1461}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 6225920}}
{\sp{\sn hspNext}{\sv 1257}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\fs20\cf1 1
\par }}}}{\shp{\*\shpinst\shplid1258{\sp{\sn relLeft}{\sv 2237}}{\sp{\sn relTop}{\sv 1678}}{\sp{\sn relRight}{\sv 2459}}{\sp{\sn relBottom}{\sv 1841}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 6291456}}{\sp{\sn hspNext}{\sv 1258}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}
{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\fs20\cf1 1
\par }}}}{\shp{\*\shpinst\shplid1259{\sp{\sn relLeft}{\sv 3875}}{\sp{\sn relTop}{\sv 1678}}{\sp{\sn relRight}{\sv 4097}}{\sp{\sn relBottom}{\sv 1841}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 6356992}}{\sp{\sn hspNext}{\sv 1259}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}
{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\fs20\cf1 1
\par }}}}}}{\shpgrp{\*\shpinst\shplid1260{\sp{\sn groupLeft}{\sv 2781}}{\sp{\sn groupTop}{\sv 5224}}{\sp{\sn groupRight}{\sv 9981}}{\sp{\sn groupBottom}{\sv 8224}}{\sp{\sn relLeft}{\sv 2541}}
{\sp{\sn relTop}{\sv 12014}}{\sp{\sn relRight}{\sv 9861}}{\sp{\sn relBottom}{\sv 14584}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn fLockText}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}
{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1261{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 4221}}
{\sp{\sn groupBottom}{\sv 2464}}{\sp{\sn relLeft}{\sv 5496}}{\sp{\sn relTop}{\sv 5224}}{\sp{\sn relRight}{\sv 7176}}{\sp{\sn relBottom}{\sv 6184}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}
{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1262{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 2464}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 6422528}}{\sp{\sn hspNext}{\sv 1262}}{\sp{\sn fillColor}{\sv 8428502}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Tehnician
\par }{\b\fs20\cf1 Ang_id
\par }{\fs20\cf1 Ang_nume
\par }}}}{\shp{\*\shpinst\shplid1263{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1864}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 1864}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1264{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 4221}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 2781}}{\sp{\sn relTop}{\sv 6904}}{\sp{\sn relRight}{\sv 4461}}{\sp{\sn relBottom}{\sv 7864}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1265
{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 6488064}}{\sp{\sn hspNext}{\sv 1265}}
{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\fs20\cf1 Proiect
\par }{\b\fs20\cf1 Pr_id
\par }{\fs20\cf1 Pr_den
\par }}}}{\shp{\*\shpinst\shplid1266{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1267{\sp{\sn groupLeft}{\sv 7341}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 9021}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 8301}}{\sp{\sn relTop}{\sv 6904}}{\sp{\sn relRight}{\sv 9981}}{\sp{\sn relBottom}{\sv 7864}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1268
{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 6553600}}{\sp{\sn hspNext}{\sv 1268}}
{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\fs20\cf1 Documentatie
\par }{\b\fs20\cf1 Doc_nr
\par }{\fs20\cf1 Doc_termen
\par }}}}{\shp{\*\shpinst\shplid1269{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1270{\sp{\sn groupLeft}{\sv 5541}}{\sp{\sn groupTop}{\sv 6904}}
{\sp{\sn groupRight}{\sv 7221}}{\sp{\sn groupBottom}{\sv 8224}}{\sp{\sn relLeft}{\sv 5541}}{\sp{\sn relTop}{\sv 6904}}{\sp{\sn relRight}{\sv 7221}}{\sp{\sn relBottom}{\sv 8224}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1271{\sp{\sn relLeft}{\sv 5541}}{\sp{\sn relTop}{\sv 6904}}{\sp{\sn relRight}{\sv 7221}}
{\sp{\sn relBottom}{\sv 8224}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 6619136}}{\sp{\sn hspNext}{\sv 1271}}
{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\fs20\cf1 Doc_proiect
\par }{\b\i\fs20\cf1 Pr_id [FK]
\par Doc_nr [FK]}{\b\fs20\cf1 
\par }{\i\fs20\cf1 Ang_id [FK]}{\fs20\cf1 
\par }}}}{\shp{\*\shpinst\shplid1272{\sp{\sn relLeft}{\sv 5541}}{\sp{\sn relTop}{\sv 7264}}{\sp{\sn relRight}{\sv 7221}}{\sp{\sn relBottom}{\sv 7264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1273{\sp{\sn relLeft}{\sv 6321}}{\sp{\sn relTop}{\sv 6184}}
{\sp{\sn relRight}{\sv 6321}}{\sp{\sn relBottom}{\sv 6904}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1274{\sp{\sn relLeft}{\sv 4461}}{\sp{\sn relTop}{\sv 7384}}
{\sp{\sn relRight}{\sv 5541}}{\sp{\sn relBottom}{\sv 7384}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1275{\sp{\sn relLeft}{\sv 7221}}{\sp{\sn relTop}{\sv 7384}}
{\sp{\sn relRight}{\sv 8301}}{\sp{\sn relBottom}{\sv 7384}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1276{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 10864}}
{\sp{\sn relRight}{\sv 10341}}{\sp{\sn relBottom}{\sv 11944}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fLockText}{\sv 0}}{\sp{\sn lTxid}{\sv 6684672}}{\sp{\sn hspNext}{\sv 1276}}{\sp{\sn fFilled}{\sv 0}}
{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf17 
Un tehnician poate lucra la mai multe proiecte, \'eens\'e3 el intocme\'bate o singur\'e3 documenta\'feie pentru fiecare proiect \'een parte; fiecare documenta\'feie este \'eentocmit\'e3
 de un singur tehnician pentru un singur proiect; un proiect poate avea mai multe documenta\'feii, dar fiecare documenta\'feie va fi intocmit\'e3 de un singur tehnician.
\par }}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8201\dpgroup\dpcount4\dpx861\dpy124\dpxsize7800\dpysize6456\dpgroup\dpcount11\dpx0\dpy0\dpxsize7200\dpysize2483\dpgroup\dpcount3\dpx2716\dpy0\dpxsize1680\dpysize863\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Tehnician
\par }{\b\fs20\cf1 Ang_id
\par }{\fs20\cf1 Ang_nume
\par }}\dpx0\dpy0\dpxsize1680\dpysize863\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7800\dppty6456\dpx0\dpy324\dpxsize1680\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy1512\dpxsize1680\dpysize864\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Proiect
\par }{\b\fs20\cf1 Pr_id
\par }{\fs20\cf1 Pr_den
\par }}\dpx0\dpy0\dpxsize1680\dpysize864\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7800\dppty6456\dpx0\dpy324\dpxsize1680\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx5520\dpy1512\dpxsize1680\dpysize864\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Documentatie
\par }{\b\fs20\cf1 Doc_nr
\par }{\fs20\cf1 Doc_termen
\par }}\dpx0\dpy0\dpxsize1680\dpysize864\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7800\dppty6456\dpx0\dpy324\dpxsize1680\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\sb120\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf1 \'ce
ntocme\'bate
\par }}\dpx2521\dpy1403\dpxsize2039\dpysize1080\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx7800\dppty0\dpptx0\dppty6456
\dpx1680\dpy1944\dpxsize841\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7800\dppty6456\dpx4560\dpy1944\dpxsize960\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx7800\dppty0\dpptx0\dppty6456
\dpx3555\dpy863\dpxsize0\dpysize540\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\fs20\cf1 1
\par }}\dpx3481\dpy863\dpxsize480\dpysize325\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\fs20\cf1 1
\par }}\dpx1619\dpy1620\dpxsize480\dpysize324\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\fs20\cf1 1
\par }}\dpx5161\dpy1620\dpxsize480\dpysize324\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount8\dpx0\dpy3797\dpxsize7320\dpysize2659
\dpgroup\dpcount3\dpx2760\dpy0\dpxsize1708\dpysize851\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Tehnician
\par }{\b\fs20\cf1 Ang_id
\par }{\fs20\cf1 Ang_nume
\par }}\dpx0\dpy0\dpxsize1708\dpysize851\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7800\dppty6456\dpx0\dpy319\dpxsize1708\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy1489\dpxsize1708\dpysize851\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Proiect
\par }{\b\fs20\cf1 Pr_id
\par }{\fs20\cf1 Pr_den
\par }}\dpx0\dpy0\dpxsize1708\dpysize851\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7800\dppty6456\dpx0\dpy319\dpxsize1708\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx5612\dpy1489\dpxsize1708\dpysize851\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Documentatie
\par }{\b\fs20\cf1 Doc_nr
\par }{\fs20\cf1 Doc_termen
\par }}\dpx0\dpy0\dpxsize1708\dpysize851\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7800\dppty6456\dpx0\dpy319\dpxsize1708\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx2806\dpy1489\dpxsize1708\dpysize1170\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Doc_proiect
\par }{\b\i\fs20\cf1 Pr_id [FK]
\par Doc_nr [FK]}{\b\fs20\cf1 
\par }{\i\fs20\cf1 Ang_id [FK]}{\fs20\cf1 
\par }}\dpx0\dpy0\dpxsize1708\dpysize1170\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7800\dppty6456\dpx0\dpy319\dpxsize1708\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpline\dpptx0\dppty0\dpptx7800\dppty6456\dpx3599\dpy851\dpxsize0\dpysize638\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx7800\dppty6456
\dpx1708\dpy1914\dpxsize1098\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx7800\dppty0\dpptx0\dppty6456\dpx4514\dpy1914\dpxsize1098\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0
\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf17 Un tehnician poate lucra la mai multe proiecte, \'eens
\'e3 el intocme\'bate o singur\'e3 documenta\'feie pentru fiecare proiect \'een parte; fiecare documenta\'feie este \'eentocmit\'e3 de un singur tehnician pentru un singur proiect; un proiect poate avea mai multe documenta\'feii, dar fiecare documenta\'fe
ie va fi intocmit\'e3 de un singur tehnician.
\par }}\dpx0\dpy2607\dpxsize7800\dpysize1118\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Figura 2.12 Transformarea rela\'feiilor ternare de tipul 1:1:1
\par }\pard \ql \fi720\li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\cf17 
\par }{\f34\cf17 Stabilirea cheii primare pentru tabela rezultat\'e3 \'een urma transform\'e3rii rela\'feiilor ternare se face \'een func\'feie de tipul rela\'feiei, aplic\'e2ndu-se urm\'e3toarele reguli:
\par {\listtext\pard\plain\f34\cf17\lang1048\langfe1033\langnp1048 \hich\af34\dbch\af0\loch\f34 1.\tab}}\pard \qj \fi-360\li1440\ri0\nowidctlpar\jclisttab\tx1440\faauto\ls26\rin0\lin1440\itap0 {\f34\cf17 Dac\'e3 toate entit\'e3\'feile prezint\'e3
 cardinalitatea maxim\'e3 \'84unu\'94, atunci exist\'e3 trei posibilit\'e3\'fei de formare a cheii (trei chei candidat), rezultate prin combinarea oric\'e3ror dou\'e3 dintre cele trei chei ale entit\'e3\'feilor originale;
\par {\listtext\pard\plain\f34\cf17\lang1048\langfe1033\langnp1048 \hich\af34\dbch\af0\loch\f34 2.\tab}Dac\'e3 dou\'e3 dintre entit\'e3\'fei prezint\'e3 cardinalitatea maxim\'e3 \'84unu\'94, atunci vor exista dou\'e3 posibilit\'e3\'fe
i de formare a cheii: prin combinarea cheii principale a entit\'e3\'feii din partea \'84multe\'94 cu una dintre cheile entit\'e3\'feilor situate de p}{\cf17 artea \'84unu\'94;}{\v\cf17 
\par {\listtext\pard\plain\f34\cf17\lang1048\langfe1033\langnp1048 \hich\af34\dbch\af0\loch\f34 3.\tab}}{\f34\cf17 Dac\'e3 o singur\'e3 entitate prezint\'e3 cardinalitatea maxim\'e3 \'84unu\'94, atunci cheia va fi format\'e3
 prin combinarea cheilor principale ale celor dou\'e3 entit\'e3\'fei situate de partea \'84multe\'94 a rela\'feiei;}{\v\cf17 
\par {\listtext\pard\plain\f34\cf17\lang1048\langfe1033\langnp1048 \hich\af34\dbch\af0\loch\f34 4.\tab}}{\f34\cf17 Dac\'e3 toate cele trei entit\'e3\'fei prezint\'e3 cardinalitatea maxim\'e3 \'84multe\'94, atunci cheia va fi format\'e3
 prin combinarea cheilor tuturor celor trei entit\'e3\'fei asociate.}{\v\cf1\lang1033\langfe1033\langnp1033 
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 \'cen figura 2.12 este prezentat un exemplu de transformare a unei rela\'feii ternare cu cardinalitatea 1:1:1. Se observ\'e3 crearea tabelei }{\i Doc_proiect}{\f34 , care con\'fe
ine cheile primare ale celor trei entit\'e3\'fei. Cheia primar\'e3 este compus\'e3 din atributele }{\i Pr_id}{\f34  \'bai }{\i Doc_nr}{\f34 , \'eens\'e3 mai exist\'e3 dou\'e3 chei candidat: }{\i Pr_id}{\f34  \'bai }{\i Ang_id}{ sau }{\i Doc_nr}{\f34  \'ba
i }{\i Ang_id}{.
\par }\pard\plain \s19\qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\lang1024\langfe1024\noproof\langnp1033 
{\shpgrp{\*\shpinst\shpleft981\shptop163\shpright7941\shpbottom6328\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz10\shplid1277
{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 9501}}{\sp{\sn groupBottom}{\sv 7219}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1278{\sp{\sn groupLeft}{\sv 1632}}{\sp{\sn groupTop}{\sv 864}}{\sp{\sn groupRight}{\sv 4704}}{\sp{\sn groupBottom}{\sv 2304}}
{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 9501}}{\sp{\sn relBottom}{\sv 3784}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn fLockText}{\sv 0}}{\sp{\sn lidRegroup}{\sv 3}}
{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1279{\sp{\sn groupLeft}{\sv 2541}}
{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 4221}}{\sp{\sn groupBottom}{\sv 2464}}{\sp{\sn relLeft}{\sv 2790}}{\sp{\sn relTop}{\sv 864}}{\sp{\sn relRight}{\sv 3507}}
{\sp{\sn relBottom}{\sv 1365}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}
{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1280{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 4221}}
{\sp{\sn relBottom}{\sv 2464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 6750208}}{\sp{\sn fillColor}{\sv 8428502}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Profesor
\par }{\b\fs20\cf1 Prof_id
\par }{\fs20\cf1 Prof_nume
\par }}}}{\shp{\*\shpinst\shplid1281{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1864}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 1864}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1282{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 4221}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 1632}}{\sp{\sn relTop}{\sv 1741}}{\sp{\sn relRight}{\sv 2349}}{\sp{\sn relBottom}{\sv 2241}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1283
{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 6815744}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Disciplina
\par }{\b\fs20\cf1 Disc_id
\par }{\fs20\cf1 Disc_den
\par }}}}{\shp{\*\shpinst\shplid1284{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1285{\sp{\sn groupLeft}{\sv 7341}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 9021}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 3987}}{\sp{\sn relTop}{\sv 1741}}{\sp{\sn relRight}{\sv 4704}}{\sp{\sn relBottom}{\sv 2241}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1286
{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 6881280}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Student
\par }{\b\fs20\cf1 Stud_id
\par }{\fs20\cf1 Stud_nume
\par }}}}{\shp{\*\shpinst\shplid1287{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1288{\sp{\sn relLeft}{\sv 2707}}{\sp{\sn relTop}{\sv 1678}}
{\sp{\sn relRight}{\sv 3578}}{\sp{\sn relBottom}{\sv 2304}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 4}}{\sp{\sn lTxid}{\sv 6946816}}{\sp{\sn dxTextLeft}{\sv 0}}{\sp{\sn dyTextTop}{\sv 0}}{\sp{\sn dxTextRight}{\sv 0}}
{\sp{\sn dyTextBottom}{\sv 0}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s21\qc \li0\ri0\sb120\nowidctlpar\faauto\rin0\lin0\itap0 
\fs32\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20 Examineaz\'e3
\par }}}}{\shp{\*\shpinst\shplid1289{\sp{\sn relLeft}{\sv 2349}}{\sp{\sn relTop}{\sv 1991}}{\sp{\sn relRight}{\sv 2707}}{\sp{\sn relBottom}{\sv 1991}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1290{\sp{\sn relLeft}{\sv 3578}}{\sp{\sn relTop}{\sv 1991}}
{\sp{\sn relRight}{\sv 3987}}{\sp{\sn relBottom}{\sv 1991}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1291{\sp{\sn relLeft}{\sv 3149}}{\sp{\sn relTop}{\sv 1365}}{\sp{\sn relRight}{\sv 3149}}{\sp{\sn relBottom}{\sv 1678}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shp{\*\shpinst\shplid1292{\sp{\sn relLeft}{\sv 3117}}{\sp{\sn relTop}{\sv 1365}}{\sp{\sn relRight}{\sv 3322}}{\sp{\sn relBottom}{\sv 1553}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 7012352}}
{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\fs20\cf1 1
\par }}}}{\shp{\*\shpinst\shplid1293{\sp{\sn relLeft}{\sv 2323}}{\sp{\sn relTop}{\sv 1803}}{\sp{\sn relRight}{\sv 2528}}{\sp{\sn relBottom}{\sv 1991}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 7077888}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {M
\par }}}}{\shp{\*\shpinst\shplid1294{\sp{\sn relLeft}{\sv 3834}}{\sp{\sn relTop}{\sv 1803}}{\sp{\sn relRight}{\sv 4038}}{\sp{\sn relBottom}{\sv 1991}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 7143424}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {N
\par }}}}}}{\shp{\*\shpinst\shplid1295{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3739}}{\sp{\sn relRight}{\sv 9261}}{\sp{\sn relBottom}{\sv 4579}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fLockText}{\sv 0}}{\sp{\sn lTxid}{\sv 7208960}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 3}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf17 Fiecare student sus\'fe
ine un examen cu un singur profesor, \'eens\'e3 el poate fi examinat de acela\'bai profesor la mai multe discipline. De asemenea, un profesor examineaz\'e3 la o disciplin\'e3 mai mul\'fei studen\'fei.
\par }}}}{\shpgrp{\*\shpinst\shplid1296{\sp{\sn groupLeft}{\sv 2689}}{\sp{\sn groupTop}{\sv 4654}}{\sp{\sn groupRight}{\sv 9233}}{\sp{\sn groupBottom}{\sv 7314}}{\sp{\sn relLeft}{\sv 2689}}
{\sp{\sn relTop}{\sv 4559}}{\sp{\sn relRight}{\sv 9233}}{\sp{\sn relBottom}{\sv 7219}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}
{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1297{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 4221}}
{\sp{\sn groupBottom}{\sv 2464}}{\sp{\sn relLeft}{\sv 5076}}{\sp{\sn relTop}{\sv 4654}}{\sp{\sn relRight}{\sv 6728}}{\sp{\sn relBottom}{\sv 5448}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 4}}
{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1298{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 2464}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 7274496}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Profesor
\par }{\b\fs20\cf1 Prof_id
\par }{\fs20\cf1 Prof_nume
\par }}}}{\shp{\*\shpinst\shplid1299{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1864}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 1864}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1300{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 4221}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 2689}}{\sp{\sn relTop}{\sv 5824}}{\sp{\sn relRight}{\sv 4341}}{\sp{\sn relBottom}{\sv 6619}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1301
{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 7340032}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Disciplina
\par }{\b\fs20\cf1 Disc_id
\par }{\fs20\cf1 Disc_den
\par }}}}{\shp{\*\shpinst\shplid1302{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1303{\sp{\sn groupLeft}{\sv 7341}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 9021}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 7581}}{\sp{\sn relTop}{\sv 5824}}{\sp{\sn relRight}{\sv 9233}}{\sp{\sn relBottom}{\sv 6619}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1304
{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 7405568}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Student
\par }{\b\fs20\cf1 Stud_id
\par }{\fs20\cf1 Stud_nume
\par }}}}{\shp{\*\shpinst\shplid1305{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1306{\sp{\sn groupLeft}{\sv 5301}}{\sp{\sn groupTop}{\sv 6784}}
{\sp{\sn groupRight}{\sv 6981}}{\sp{\sn groupBottom}{\sv 8584}}{\sp{\sn relLeft}{\sv 5135}}{\sp{\sn relTop}{\sv 5824}}{\sp{\sn relRight}{\sv 6787}}{\sp{\sn relBottom}{\sv 7314}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 4}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1307
{\sp{\sn relLeft}{\sv 5301}}{\sp{\sn relTop}{\sv 6784}}{\sp{\sn relRight}{\sv 6981}}{\sp{\sn relBottom}{\sv 8584}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 7471104}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Examen
\par }{\b\i\fs20\cf1 Stud_id [FK]
\par Disc_id [FK]
\par }{\b\fs20\cf1 Exam_data
\par }{\i\fs20\cf1 Prof_id [FK]
\par }{\fs20\cf1 Exam_nota
\par }}}}{\shp{\*\shpinst\shplid1308{\sp{\sn relLeft}{\sv 5301}}{\sp{\sn relTop}{\sv 7144}}{\sp{\sn relRight}{\sv 6981}}{\sp{\sn relBottom}{\sv 7144}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1309{\sp{\sn relLeft}{\sv 5901}}{\sp{\sn relTop}{\sv 5464}}
{\sp{\sn relRight}{\sv 5901}}{\sp{\sn relBottom}{\sv 5824}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1310{\sp{\sn relLeft}{\sv 4311}}{\sp{\sn relTop}{\sv 6184}}
{\sp{\sn relRight}{\sv 5151}}{\sp{\sn relBottom}{\sv 6184}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1311{\sp{\sn relLeft}{\sv 6741}}{\sp{\sn relTop}{\sv 6214}}
{\sp{\sn relRight}{\sv 7581}}{\sp{\sn relBottom}{\sv 6214}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8202\dpgroup\dpcount4\dpx981\dpy163\dpxsize6960\dpysize6165\dpgroup\dpcount11\dpx0\dpy0\dpxsize6960\dpysize2460
\dpgroup\dpcount3\dpx2624\dpy0\dpxsize1624\dpysize856\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Profesor
\par }{\b\fs20\cf1 Prof_id
\par }{\fs20\cf1 Prof_nume
\par }}\dpx0\dpy0\dpxsize1624\dpysize856\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6165\dpx0\dpy321\dpxsize1624\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy1498\dpxsize1624\dpysize854\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Disciplina
\par }{\b\fs20\cf1 Disc_id
\par }{\fs20\cf1 Disc_den
\par }}\dpx0\dpy0\dpxsize1624\dpysize854\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6165\dpx0\dpy320\dpxsize1624\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx5336\dpy1498\dpxsize1624\dpysize854\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Student
\par }{\b\fs20\cf1 Stud_id
\par }{\fs20\cf1 Stud_nume
\par }}\dpx0\dpy0\dpxsize1624\dpysize854\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6165\dpx0\dpy320\dpxsize1624\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s21\qc \li0\ri0\sb120\nowidctlpar\faauto\rin0\lin0\itap0 \fs32\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20 
Examineaz\'e3
\par }}\dpx2436\dpy1391\dpxsize1973\dpysize1069\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6960\dppty0\dpptx0\dppty6165
\dpx1624\dpy1925\dpxsize812\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6165\dpx4409\dpy1925\dpxsize927\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6960\dppty0\dpptx0\dppty6165
\dpx3437\dpy856\dpxsize0\dpysize535\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b\fs20\cf1 1
\par }}\dpx3364\dpy856\dpxsize465\dpysize321\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {M
\par }}\dpx1566\dpy1604\dpxsize464\dpysize321\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {N
\par }}\dpx4989\dpy1604\dpxsize462\dpysize321\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20\cf17 Fiecare student sus\'feine un examen cu un singur profesor, \'eens\'e3 el poate fi examinat de acela\'ba
i profesor la mai multe discipline. De asemenea, un profesor examineaz\'e3 la o disciplin\'e3 mai mul\'fei studen\'fei.
\par }}\dpx0\dpy2411\dpxsize6720\dpysize906\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpgroup\dpcount8\dpx148\dpy3296\dpxsize6544\dpysize2869\dpgroup\dpcount3\dpx2387\dpy0\dpxsize1652\dpysize856
\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Profesor
\par }{\b\fs20\cf1 Prof_id
\par }{\fs20\cf1 Prof_nume
\par }}\dpx0\dpy0\dpxsize1652\dpysize856\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6165\dpx0\dpy321\dpxsize1652\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy1262\dpxsize1652\dpysize857\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Disciplina
\par }{\b\fs20\cf1 Disc_id
\par }{\fs20\cf1 Disc_den
\par }}\dpx0\dpy0\dpxsize1652\dpysize857\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6165\dpx0\dpy321\dpxsize1652\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx4892\dpy1262\dpxsize1652\dpysize857\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Student
\par }{\b\fs20\cf1 Stud_id
\par }{\fs20\cf1 Stud_nume
\par }}\dpx0\dpy0\dpxsize1652\dpysize857\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6165\dpx0\dpy321\dpxsize1652\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx2446\dpy1262\dpxsize1652\dpysize1607\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Examen
\par }{\b\i\fs20\cf1 Stud_id [FK]
\par Disc_id [FK]
\par }{\b\fs20\cf1 Exam_data
\par }{\i\fs20\cf1 Prof_id [FK]
\par }{\fs20\cf1 Exam_nota
\par }}\dpx0\dpy0\dpxsize1652\dpysize1607\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6165\dpx0\dpy321\dpxsize1652\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpline\dpptx0\dppty0\dpptx6960\dppty6165\dpx3212\dpy874\dpxsize0\dpysize388\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6165
\dpx1622\dpy1650\dpxsize840\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6960\dppty0\dpptx0\dppty6165\dpx4052\dpy1683\dpxsize840\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0
\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }{\f34 Figura 2.13 Transformarea rela\'feiilor ternare de tipul 1:M:N
\par }\pard\plain \s19\qj \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }\pard \s19\qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Regulile de transformare a celorlalte tipuri de rela\'feii ternare sunt acelea\'bai, cu excep\'feia celor pentru stabilirea cheii primare a tabelei copil. \'ce
n figura 2.13 este prezentat un exemplu de transformare a rela\'feiilor cu cardinalitatea 1:M:N, iar cheia primar\'e3 a tabelei copil este format\'e3 prin combinarea cheilor primare ale entit\'e3\'feilor situate \'een partea \'84multe\'94 a rela\'fe
iei, respectiv }{\i Stud_id}{\f34  \'bai }{\i Disc_id}{\f34 . Deoarece un student poate sus\'feine examen la o disciplin\'e3 de mai multe ori, combina\'feia celor dou\'e3 chei str\'e3ine nu este suficient\'e3 pentru a juca rolul de cheie primar\'e3
, motiv pentru care s-a ad\'e3ugat ca parte a cheii \'bai atributul }{\i Data_exam}{\f34 . \'cen exemplul de transformare a rela\'feiilor M:N:P din figura 2.14 avem o singur\'e3 cheie candidat pentru tabela copil, dar care este format\'e3
 prin combinarea cheilor primare ale tuturor celor trei entit\'e3\'fei asociate, respectiv }{\i Ang_id}{, }{\i Form_id}{\f34  \'bai }{\i Locm_id}{.
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\fs20\lang1024\langfe1024\noproof\langnp1033 {\shpgrp{\*\shpinst\shpleft741\shptop136\shpright7701\shpbottom6616\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz11\shplid1312
{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 7744}}{\sp{\sn groupRight}{\sv 9501}}{\sp{\sn groupBottom}{\sv 13794}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1313{\sp{\sn groupLeft}{\sv 1200}}{\sp{\sn groupTop}{\sv 1056}}{\sp{\sn groupRight}{\sv 4512}}{\sp{\sn groupBottom}{\sv 2448}}
{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 7744}}{\sp{\sn relRight}{\sv 9282}}{\sp{\sn relBottom}{\sv 10024}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn fLockText}{\sv 0}}{\sp{\sn lidRegroup}{\sv 5}}
{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1314{\sp{\sn groupLeft}{\sv 2541}}
{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 4221}}{\sp{\sn groupBottom}{\sv 2464}}{\sp{\sn relLeft}{\sv 2449}}{\sp{\sn relTop}{\sv 1056}}{\sp{\sn relRight}{\sv 3222}}
{\sp{\sn relBottom}{\sv 1540}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}
{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1315{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 4221}}
{\sp{\sn relBottom}{\sv 2464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 7536640}}{\sp{\sn fillColor}{\sv 8428502}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Angajat
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Ang_id
\par }{\fs20\cf1 Ang_nume
\par }}}}{\shp{\*\shpinst\shplid1316{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1864}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 1864}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1317{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 4221}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 1200}}{\sp{\sn relTop}{\sv 1903}}{\sp{\sn relRight}{\sv 1973}}{\sp{\sn relBottom}{\sv 2387}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1318
{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 7602176}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Formatie
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Form_id
\par }{\fs20\cf1 Form_nrang
\par }}}}{\shp{\*\shpinst\shplid1319{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1320{\sp{\sn groupLeft}{\sv 7341}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 9021}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 3739}}{\sp{\sn relTop}{\sv 1903}}{\sp{\sn relRight}{\sv 4512}}{\sp{\sn relBottom}{\sv 2387}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1321
{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 7667712}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Loc_munca
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Locm_id
\par }{\fs20\cf1 Locm_den
\par }}}}{\shp{\*\shpinst\shplid1322{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1323{\sp{\sn relLeft}{\sv 2359}}{\sp{\sn relTop}{\sv 1843}}
{\sp{\sn relRight}{\sv 3298}}{\sp{\sn relBottom}{\sv 2448}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 4}}{\sp{\sn lTxid}{\sv 7733248}}{\sp{\sn dxTextLeft}{\sv 0}}{\sp{\sn dyTextTop}{\sv 0}}{\sp{\sn dxTextRight}{\sv 0}}
{\sp{\sn dyTextBottom}{\sv 0}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s8\qc \li0\ri0\sb120\keepn\nowidctlpar\faauto\outlinelevel7\rin0\lin0\itap0 
\fs30\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20 Lucreaz\'e3
\par }}}}{\shp{\*\shpinst\shplid1324{\sp{\sn relLeft}{\sv 1973}}{\sp{\sn relTop}{\sv 2145}}{\sp{\sn relRight}{\sv 2359}}{\sp{\sn relBottom}{\sv 2145}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1325{\sp{\sn relLeft}{\sv 3298}}{\sp{\sn relTop}{\sv 2145}}
{\sp{\sn relRight}{\sv 3739}}{\sp{\sn relBottom}{\sv 2145}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1326{\sp{\sn relLeft}{\sv 2835}}{\sp{\sn relTop}{\sv 1540}}{\sp{\sn relRight}{\sv 2835}}{\sp{\sn relBottom}{\sv 1843}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 1}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}
{\shp{\*\shpinst\shplid1327{\sp{\sn relLeft}{\sv 2801}}{\sp{\sn relTop}{\sv 1540}}{\sp{\sn relRight}{\sv 3022}}{\sp{\sn relBottom}{\sv 1722}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 7798784}}
{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 
\b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {P
\par }}}}{\shp{\*\shpinst\shplid1328{\sp{\sn relLeft}{\sv 1945}}{\sp{\sn relTop}{\sv 1964}}{\sp{\sn relRight}{\sv 2166}}{\sp{\sn relBottom}{\sv 2145}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 7864320}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {M
\par }}}}{\shp{\*\shpinst\shplid1329{\sp{\sn relLeft}{\sv 3574}}{\sp{\sn relTop}{\sv 1964}}{\sp{\sn relRight}{\sv 3794}}{\sp{\sn relBottom}{\sv 2145}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 7929856}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {N
\par }}}}}}{\shp{\*\shpinst\shplid1330{\sp{\sn relLeft}{\sv 3021}}{\sp{\sn relTop}{\sv 10024}}{\sp{\sn relRight}{\sv 9501}}{\sp{\sn relBottom}{\sv 11104}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fLockText}{\sv 0}}{\sp{\sn lTxid}{\sv 7995392}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}
{\sp{\sn lidRegroup}{\sv 5}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf17 
Fiecare angajat poate lucra in mai multe locuri de munca in formatii de lucru diferite, o formatie este formata din mai multi angajati si poate lucra in mai multe locuri de munca, iar intr-un loc de munca pot lucra mai multe formatii alcatuite din mai mul
ti angajati.
\par }}}}{\shpgrp{\*\shpinst\shplid1331{\sp{\sn groupLeft}{\sv 2796}}{\sp{\sn groupTop}{\sv 11134}}{\sp{\sn groupRight}{\sv 9126}}{\sp{\sn groupBottom}{\sv 13794}}{\sp{\sn relLeft}{\sv 2796}}
{\sp{\sn relTop}{\sv 11134}}{\sp{\sn relRight}{\sv 9126}}{\sp{\sn relBottom}{\sv 13794}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1332{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 4221}}{\sp{\sn groupBottom}{\sv 2464}}
{\sp{\sn relLeft}{\sv 5122}}{\sp{\sn relTop}{\sv 11134}}{\sp{\sn relRight}{\sv 6667}}{\sp{\sn relBottom}{\sv 11928}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 6}}{\sp{\sn posh}{\sv 0}}
{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1333{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 4221}}
{\sp{\sn relBottom}{\sv 2464}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 8060928}}{\sp{\sn fillColor}{\sv 8428502}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Angajat
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Ang_id
\par }{\fs20\cf1 Ang_nume
\par }}}}{\shp{\*\shpinst\shplid1334{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1864}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 1864}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1335{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 4221}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 2796}}{\sp{\sn relTop}{\sv 12424}}{\sp{\sn relRight}{\sv 4341}}{\sp{\sn relBottom}{\sv 13219}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 6}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1336
{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 8126464}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Formatie
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Form_id
\par }{\fs20\cf1 Form_nrang
\par }}}}{\shp{\*\shpinst\shplid1337{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 4221}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1338{\sp{\sn groupLeft}{\sv 7341}}{\sp{\sn groupTop}{\sv 3304}}
{\sp{\sn groupRight}{\sv 9021}}{\sp{\sn groupBottom}{\sv 4264}}{\sp{\sn relLeft}{\sv 7581}}{\sp{\sn relTop}{\sv 12424}}{\sp{\sn relRight}{\sv 9126}}{\sp{\sn relBottom}{\sv 13219}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 6}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1339
{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3304}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 4264}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 8192000}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Loc_munca
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Locm_id
\par }{\fs20\cf1 Locm_den
\par }}}}{\shp{\*\shpinst\shplid1340{\sp{\sn relLeft}{\sv 7341}}{\sp{\sn relTop}{\sv 3664}}{\sp{\sn relRight}{\sv 9021}}{\sp{\sn relBottom}{\sv 3664}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1341{\sp{\sn groupLeft}{\sv 5301}}{\sp{\sn groupTop}{\sv 6784}}
{\sp{\sn groupRight}{\sv 6981}}{\sp{\sn groupBottom}{\sv 8584}}{\sp{\sn relLeft}{\sv 5178}}{\sp{\sn relTop}{\sv 12424}}{\sp{\sn relRight}{\sv 6723}}{\sp{\sn relBottom}{\sv 13794}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 6}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1342
{\sp{\sn relLeft}{\sv 5301}}{\sp{\sn relTop}{\sv 6784}}{\sp{\sn relRight}{\sv 6981}}{\sp{\sn relBottom}{\sv 8584}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 8257536}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Pontaj
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\i\fs20\cf1 Ang_id [FK]
\par Form_id[FK]
\par Locm_id [FK]
\par }{\fs20\cf1 Nr_ore
\par }}}}{\shp{\*\shpinst\shplid1343{\sp{\sn relLeft}{\sv 5301}}{\sp{\sn relTop}{\sv 7144}}{\sp{\sn relRight}{\sv 6981}}{\sp{\sn relBottom}{\sv 7144}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1344{\sp{\sn relLeft}{\sv 5901}}{\sp{\sn relTop}{\sv 11944}}
{\sp{\sn relRight}{\sv 5901}}{\sp{\sn relBottom}{\sv 12424}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1345{\sp{\sn relLeft}{\sv 4341}}{\sp{\sn relTop}{\sv 12784}}
{\sp{\sn relRight}{\sv 5181}}{\sp{\sn relBottom}{\sv 12784}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}{\shp{\*\shpinst\shplid1346{\sp{\sn relLeft}{\sv 6741}}{\sp{\sn relTop}{\sv 12814}}
{\sp{\sn relRight}{\sv 7581}}{\sp{\sn relBottom}{\sv 12814}}{\sp{\sn fRelFlipH}{\sv 1}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8203\dpgroup\dpcount4\dpx741\dpy136\dpxsize6960\dpysize6480\dpgroup\dpcount11\dpx0\dpy0\dpxsize6741\dpysize2442
\dpgroup\dpcount3\dpx2542\dpy0\dpxsize1573\dpysize849\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Angajat
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Ang_id
\par }{\fs20\cf1 Ang_nume
\par }}\dpx0\dpy0\dpxsize1573\dpysize849\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6480\dpx0\dpy318\dpxsize1573\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy1486\dpxsize1573\dpysize849\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Formatie
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Form_id
\par }{\fs20\cf1 Form_nrang
\par }}\dpx0\dpy0\dpxsize1573\dpysize849\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6480\dpx0\dpy318\dpxsize1573\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx5168\dpy1486\dpxsize1573\dpysize849\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Loc_munca
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Locm_id
\par }{\fs20\cf1 Locm_den
\par }}\dpx0\dpy0\dpxsize1573\dpysize849\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6480\dpx0\dpy318\dpxsize1573\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s8\qc \li0\ri0\sb120\keepn\nowidctlpar\faauto\outlinelevel7\rin0\lin0\itap0 
\fs30\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34\fs20 Lucreaz\'e3
\par }}\dpx2359\dpy1381\dpxsize1911\dpysize1061\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6960\dppty0\dpptx0\dppty6480
\dpx1573\dpy1910\dpxsize786\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6480\dpx4270\dpy1910\dpxsize898\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6960\dppty0\dpptx0\dppty6480
\dpx3328\dpy849\dpxsize0\dpysize532\dplinew15\dplinecor0\dplinecog0\dplinecob0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {P

\par }}\dpx3259\dpy849\dpxsize449\dpysize319\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {M
\par }}\dpx1516\dpy1593\dpxsize450\dpysize317\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\s7\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel6\rin0\lin0\itap0 \b\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {N
\par }}\dpx4832\dpy1593\dpxsize448\dpysize317\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf17 
Fiecare angajat poate lucra in mai multe locuri de munca in formatii de lucru diferite, o formatie este formata din mai multi angajati si poate lucra in mai multe locuri de munca, iar intr-un loc de munca pot lucra mai multe formatii alcatuite din mai mul
ti angajati.
\par }}\dpx480\dpy2442\dpxsize6480\dpysize1157\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpgroup\dpcount8\dpx255\dpy3631\dpxsize6330\dpysize2849
\dpgroup\dpcount3\dpx2326\dpy0\dpxsize1545\dpysize850\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Angajat
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Ang_id
\par }{\fs20\cf1 Ang_nume
\par }}\dpx0\dpy0\dpxsize1545\dpysize850\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6480\dpx0\dpy319\dpxsize1545\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx0\dpy1382\dpxsize1545\dpysize851\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Formatie
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Form_id
\par }{\fs20\cf1 Form_nrang
\par }}\dpx0\dpy0\dpxsize1545\dpysize851\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6480\dpx0\dpy319\dpxsize1545\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx4785\dpy1382\dpxsize1545\dpysize851\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Loc_munca
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Locm_id
\par }{\fs20\cf1 Locm_den
\par }}\dpx0\dpy0\dpxsize1545\dpysize851\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6480\dpx0\dpy319\dpxsize1545\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx2382\dpy1382\dpxsize1545\dpysize1467\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Pontaj
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\i\fs20\cf1 Ang_id [FK]
\par Form_id[FK]
\par Locm_id [FK]
\par }{\fs20\cf1 Nr_ore
\par }}\dpx0\dpy0\dpxsize1545\dpysize1467\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6480\dpx0\dpy293\dpxsize1545\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpline\dpptx0\dppty0\dpptx6960\dppty6480\dpx3105\dpy868\dpxsize0\dpysize514\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx6960\dppty6480
\dpx1545\dpy1767\dpxsize840\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx6960\dppty0\dpptx0\dppty6480\dpx3945\dpy1799\dpxsize840\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0
\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Figura 2.14 Transformarea rela\'feiilor ternare de tipul M:N:P
\par }{
\par }\pard\plain \s3\qj \fi709\li0\ri0\keepn\nowidctlpar\faauto\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {2.4.4 Reprezentarea atributelor multivaloare
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }{\f34 Entit\'e3\'feile care au atribute multivaloare sunt supuse unui tratament special, cre\'e2ndu-se dou\'e3 tabele: prima tabel\'e3 va con\'feine toate atributele entit\'e3\'feii, cu excep\'feia celor multivaloare, \'bai va avea aceea\'bai cheie ca 
\'bai entitatea original\'e3; a doua tabel\'e3 va con\'feine atributele multivaloare \'bai va avea cheia format\'e3 din cheia entit\'e3\'feii originale (care va juca \'bai rolul de cheie str\'e3in\'e3) \'bai unul sau mai multe din celelalte atribute.

\par }{\fs20\lang1024\langfe1024\noproof\langnp1033 {\shpgrp{\*\shpinst\shpleft861\shptop29\shpright8901\shpbottom1349\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz12\shplid1347
{\sp{\sn groupLeft}{\sv 2301}}{\sp{\sn groupTop}{\sv 1984}}{\sp{\sn groupRight}{\sv 10341}}{\sp{\sn groupBottom}{\sv 3304}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1348{\sp{\sn groupLeft}{\sv 2541}}{\sp{\sn groupTop}{\sv 1504}}{\sp{\sn groupRight}{\sv 3981}}{\sp{\sn groupBottom}{\sv 3184}}
{\sp{\sn relLeft}{\sv 2301}}{\sp{\sn relTop}{\sv 1984}}{\sp{\sn relRight}{\sv 3741}}{\sp{\sn relBottom}{\sv 3304}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn fLockText}{\sv 0}}{\sp{\sn lidRegroup}{\sv 0}}{\sp{\sn posh}{\sv 0}}
{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1349{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1504}}{\sp{\sn relRight}{\sv 3981}}
{\sp{\sn relBottom}{\sv 3184}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 8323072}}{\sp{\sn fillColor}{\sv 8428502}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Carte
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 ISBN
\par }{\fs20\cf1 Titlu
\par }{\fs20\ul\cf1 Cota
\par Stare
\par }}}}{\shp{\*\shpinst\shplid1350{\sp{\sn relLeft}{\sv 2541}}{\sp{\sn relTop}{\sv 1864}}{\sp{\sn relRight}{\sv 3981}}{\sp{\sn relBottom}{\sv 1864}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shpgrp{\*\shpinst\shplid1351{\sp{\sn groupLeft}{\sv 6501}}{\sp{\sn groupTop}{\sv 2104}}
{\sp{\sn groupRight}{\sv 10341}}{\sp{\sn groupBottom}{\sv 3218}}{\sp{\sn relLeft}{\sv 6501}}{\sp{\sn relTop}{\sv 2104}}{\sp{\sn relRight}{\sv 10341}}{\sp{\sn relBottom}{\sv 3218}}
{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shpgrp{\*\shpinst\shplid1352{\sp{\sn groupLeft}{\sv 5541}}
{\sp{\sn groupTop}{\sv 1984}}{\sp{\sn groupRight}{\sv 6981}}{\sp{\sn groupBottom}{\sv 2944}}{\sp{\sn relLeft}{\sv 6501}}{\sp{\sn relTop}{\sv 2104}}{\sp{\sn relRight}{\sv 7941}}
{\sp{\sn relBottom}{\sv 3064}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn lidRegroup}{\sv 7}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1353
{\sp{\sn relLeft}{\sv 5541}}{\sp{\sn relTop}{\sv 1984}}{\sp{\sn relRight}{\sv 6981}}{\sp{\sn relBottom}{\sv 2944}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}
{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 8388608}}{\sp{\sn fillColor}{\sv 8428502}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lidRegroup}{\sv 8}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Carte
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 ISBN
\par }{\fs20\cf1 Titlu}{\fs20\ul\cf1 
\par }}}}{\shp{\*\shpinst\shplid1354{\sp{\sn relLeft}{\sv 5541}}{\sp{\sn relTop}{\sv 2299}}{\sp{\sn relRight}{\sv 6981}}{\sp{\sn relBottom}{\sv 2299}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 8}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}
{\shpgrp{\*\shpinst\shplid1355{\sp{\sn groupLeft}{\sv 8901}}{\sp{\sn groupTop}{\sv 1744}}{\sp{\sn groupRight}{\sv 10341}}{\sp{\sn groupBottom}{\sv 2944}}{\sp{\sn relLeft}{\sv 8857}}
{\sp{\sn relTop}{\sv 2104}}{\sp{\sn relRight}{\sv 10341}}{\sp{\sn relBottom}{\sv 3218}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn rotation}{\sv 0}}{\sp{\sn lidRegroup}{\sv 7}}{\sp{\sn posh}{\sv 0}}{\sp{\sn posv}{\sv 0}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shp{\*\shpinst\shplid1356{\sp{\sn relLeft}{\sv 8901}}{\sp{\sn relTop}{\sv 1744}}{\sp{\sn relRight}{\sv 10341}}
{\sp{\sn relBottom}{\sv 2944}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lTxid}{\sv 8454144}}{\sp{\sn fillColor}{\sv 8428502}}
{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Copie
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Cota
\par }{\fs20\cf1 Stare
\par }\pard\plain \s9\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel8\rin0\lin0\itap0 \i\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {ISBN [FK]
\par }}}}{\shp{\*\shpinst\shplid1357{\sp{\sn relLeft}{\sv 8901}}{\sp{\sn relTop}{\sv 2104}}{\sp{\sn relRight}{\sv 10341}}{\sp{\sn relBottom}{\sv 2104}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1358{\sp{\sn relLeft}{\sv 7941}}{\sp{\sn relTop}{\sv 2584}}
{\sp{\sn relRight}{\sv 8901}}{\sp{\sn relBottom}{\sv 2584}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}}}}}{\shp{\*\shpinst\shplid1359{\sp{\sn relLeft}{\sv 3861}}{\sp{\sn relTop}{\sv 1984}}
{\sp{\sn relRight}{\sv 6501}}{\sp{\sn relBottom}{\sv 3304}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fLockText}{\sv 0}}{\sp{\sn lTxid}{\sv 8519680}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}
{\sp{\sn fLayoutInCell}{\sv 1}}{\sp{\sn fLayoutInCell}{\sv 1}}{\shptxt \pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf17 
Atributele multivaloare Cota si Stare sunt separate intr-o tabela distincta. Ea se mai numeste si entitate atributiva.
\par }}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8204\dpgroup\dpcount4\dpx861\dpy29\dpxsize8040\dpysize1320\dpgroup\dpcount3\dpx0\dpy0\dpxsize1440\dpysize1320\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Carte
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 ISBN
\par }{\fs20\cf1 Titlu
\par }{\fs20\ul\cf1 Cota
\par Stare
\par }}\dpx0\dpy0\dpxsize1440\dpysize1320\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx8040\dppty1320\dpx0\dpy283\dpxsize1440\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount4\dpx4200\dpy120\dpxsize3840\dpysize1114\dpgroup\dpcount3\dpx0\dpy0\dpxsize1440\dpysize960\dptxbx\dptxlrtb{\dptxbxtext\pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Carte
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 ISBN
\par }{\fs20\cf1 Titlu}{\fs20\ul\cf1 
\par }}\dpx0\dpy0\dpxsize1440\dpysize960\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx8040\dppty1320\dpx0\dpy315\dpxsize1440\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpgroup\dpcount3\dpx2356\dpy0\dpxsize1484\dpysize1114\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf1 Copie
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\cf1 Cota
\par }{\fs20\cf1 Stare
\par }\pard\plain \s9\ql \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel8\rin0\lin0\itap0 \i\fs20\cf1\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {ISBN [FK]
\par }}\dpx0\dpy0\dpxsize1484\dpysize1114\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr214\dpfillbgcg155\dpfillbgcb128\dpfillpat0\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpline\dpptx0\dppty0\dpptx8040\dppty1320\dpx0\dpy334\dpxsize1484\dpysize0
\dplinew15\dplinecor0\dplinecog0\dplinecob0\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dpline\dpptx0\dppty0\dpptx8040\dppty1320\dpx1440\dpy480\dpxsize960\dpysize0\dplinew15\dplinecor0\dplinecog0\dplinecob0
\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\fs20\cf17 
Atributele multivaloare Cota si Stare sunt separate intr-o tabela distincta. Ea se mai numeste si entitate atributiva.
\par }}\dpx1560\dpy0\dpxsize2640\dpysize1320\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow\dpendgroup\dpx0\dpy0\dpxsize0\dpysize0}}}}{
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {Figura 2.15 Transformarea atributelor multivaloare
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }{\f34 \'cen figura 2.15, transformarea entit\'e3\'fe}{ii }{\i Carte}{\f34  a dus la ob\'feinerea celor tabelelor }{\i Carte}{\f34  (tabela p\'e3rinte) \'bai }{\i Copie}{\f34  (tabela copil). Ca particularitate a acestui exemplu, se poate observa c\'e3
 atributul ISBN nu face parte din cheia primar\'e3 a tabelei }{\i Copie}{, deoarece unul din atributele multivaloare,}{\f34  Cota, poate juca singur rolul de cheie primar\'e3.
\par }{
\par }{\b\f34 2.5 Mecanismul tranzac\'feional al bazei de date
\par }{
\par }{\i\f34 Gestiunea tranzac\'feiilor}{\f34  se refer\'e3 la problematica men\'feinerii bazei de date \'eentr-o stare consistent\'e3 \'een condi\'feiile \'een care accesul la date se face \'een regim concurent sau \'een condi\'feiile apari\'fe
iei unor defecte. Prin urmare, mecanismul tranzac\'feional trebuie s\'e3 rezolve urm\'e3toarele dou\'e3 probleme:
\par {\pntext\pard\plain\b\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 1\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\tx1429{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent360 }\faauto\ls3\rin0\lin1429\itap0 {\b\f34 Controlul concuren
\'feei}{\f34 , adic\'e3 sincronizarea acceselor astfel \'eenc\'e2t s\'e3 fie men\'feinut\'e3 integritatea bazei de date. De regul\'e3, aceast\'e3 problem\'e3 este rezolvat\'e3 prin intermediul mecanismelor de blocare.
\par {\pntext\pard\plain\b\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 2\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\tx1429{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec\pnstart2\pnindent360 }\faauto\ls4\rin0\lin1429\itap0 {\b\f34 Rezisten\'fe
a la defecte}{\f34 , care se refer\'e3 la tehnicile prin care se asigur\'e3 at\'e2t toleran\'fea sistemului fa\'fe\'e3 de apari\'feia unor defecte, c\'e2t \'bai capacitatea de recuperare a acestuia, adic\'e3 posibilitatea de revenire la o stare consistent
\'e3 \'een urma apari\'feiei unui defect care a determinat r\'e3m\'e2nerea bazei de date \'eentr-o stare de inconsisten\'fe\'e3.
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 O baz\'e3 de date este \'eentr-o stare consistent\'e3 dac\'e3 datele respect\'e3 toate restric\'feiile d}{e integritate definite asupra lor: }{\i\f34 restric\'feii privind cheia}{, }{
\i\f34 restric\'feii de integritate referen\'feial\'e3}{, }{\i\f34 restric\'feii specifice domeniului problemei}{\f34  (\'93business rules\'94). Trecerea bazei de date dintr-o stare \'een alta are loc atunci c\'e2nd se realizeaz\'e3 opera\'feiuni de 
actualizare a datelor. Evident, orice opera\'feiune de actualizare asupra bazei de date trebuie s\'e3 o lase \'eentr-o stare consistent\'e3.
\par Mecanismul tranzac\'feional are la baz\'e3 no\'feiunea de tranzac\'feie, motiv pentru care \'een continuare ne vom opri asupra definirii sale.}{
\par 
\par }{\b\f34 2.5.1 Definirea \'bai propriet\'e3\'feile conceptului de tranzac\'feie
\par }{
\par }{\f34 Prin no\'feiunea de }{\b\f34 tranzac\'feie}{\f34  se \'een\'feelege un ansamblu de opera\'feiuni care sunt executate \'eempreun\'e3 asupra unei baze de date \'een vederea realiz\'e3rii unei activit\'e3\'fei. O tranzac\'feie reprezint\'e3
 o unitate logic\'e3 de prelucrare care asigur\'e3 consisten\'fea bazei de date. Mecanismul tranzac\'feional al bazei de date trebuie s\'e3 garanteze consisten\'fea bazei de date indiferent de faptul c\'e3 tranzac\'feia a fost executat\'e3 \'ee
n mod concurent cu alte tranzac\'feii sau c\'e3 au ap\'e3rut disfunc\'feionalit\'e3\'fei \'een timpul execu\'feiei tranzac\'feiei.
\par O tranzac\'feie simpl\'e3 poate fi }{\i\f34 ad\'e3ugarea unui nou client}{\f34  \'een baza de date, iar o tranzac\'feie mai complex\'e3 poate fi }{\i \'eencasarea unei facturi,}{\f34  format\'e3 din urm\'e3toarele opera\'feii: ad\'e3ugarea unei \'ee
nregistr\'e3ri \'een tabela de \'eencas\'e3ri, actualizarea soldului pentru contul prin care s-a efectuat \'eencasarea \'een tabela cu conturile firmei, \'bai actualizarea soldului clientului respectiv \'een tabela cu clien\'feii firmei. Pe timpul execu
\'feiei unei tranzac\'feii, baza de date poate fi \'eentr-o stare inconsistent\'e3, \'eens\'e3 ea trebuie s\'e3 fie \'eentr-o stare consistent\'e3 at\'e2t \'eenainte, c\'e2t \'bai dup\'e3 execu\'feia tranzac\'feiei.
\par Pentru ca o tranzac\'feie s\'e3 garanteze consisten\'fea unei baze de date, ea trebuie s\'e3 satisfac\'e3 patru condi\'feii, referite \'een literatura de specia}{litate prin acronimul}{\b  ACID}{:
\par {\pntext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li360\ri0\nowidctlpar\tx360\tx1129{\*\pn \pnlvlblt\ilvl0\ls5\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\faauto\ls5\rin0\lin360\itap0 {\b 
Atomicitate }{\f34 - o tranzac\'feie este considerat\'e3 o unitate elementar\'e3 de prelucrare, adic\'e3 execu\'feia unei tranzac\'feii se face pe principiul }{\i totul sau nimic}{\f34 . O tranzac\'feie este validat\'e3 numai dac\'e3 toate opera\'fe
iunile care o compun sunt validate, altfel datele trebuie restaurate \'een starea \'een care se aflau \'eenainte de \'eenceperea tranzac\'feiei (tranzac\'feia nu poate fi par\'feial executat\'e3). Rezolvarea tranzac\'feiilor a c\'e3ror execu\'feie a fost 
\'eentrerupt\'e3 din diverse cauze revine SGBD-ului. Dup\'e3 eliminarea cauzei, \'een func\'feie de stadiul de execu\'feie \'een care a r\'e3mas tranzac\'feia, SGBD-ul va proceda \'een unul dintre urm\'e3toarele dou\'e3 moduri: fie va executa \'ba
i restul opera\'feiunilor care compun tranzac\'feia respectiv\'e3, termin\'e2nd tranzac\'feia cu succes, fie va anula efectele opera\'feiunilor executate p\'e2n\'e3 \'een momentul \'eentreruperii, anul\'e2nd tranzac\'feia.
\par {\pntext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li360\ri0\nowidctlpar\tx360\tx1129{\*\pn \pnlvlblt\ilvl0\ls5\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\faauto\ls5\rin0\lin360\itap0 {\b\f34 
Consisten\'fea }{\f34 - se refer\'e3 la corectitudinea tranzac\'feiei din punctul de vedere al consisten\'feei datelor. Trecerea de la o stare la alta a datelor \'een urma unei tranzac\'feii nu trebuie s\'e3 afecteze consisten\'fea bazei de date. Tranzac
\'feia este corect\'e3 dac\'e3 transform\'e3 baza de date dintr-o stare consistent\'e3 \'eentr-o alt\'e3 stare consistent\'e3. Sarcina asigur\'e3rii acestei propriet\'e3\'fei revine proiectan\'feilor \'bai programatorilor.
\par {\pntext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li360\ri0\nowidctlpar\tx360\tx1129{\*\pn \pnlvlblt\ilvl0\ls5\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\faauto\ls5\rin0\lin360\itap0 {\b Izolarea }{
- presupun}{\f34 e ca orice tranzac\'feie s\'e3 aib\'e3 acces doar la st\'e3rile consistente ale bazei de date. Altfel spus, efectele unei tranzac\'feii nu sunt percepute de o alt\'e3 tranzac\'feie dec\'e2t dup\'e3 ce prima trazac\'feie a fost comis\'e3
. De regul\'e3, toate datele solicitate de o tranzac\'feie sunt blocate p\'e2n\'e3 \'een momentul finaliz\'e3rii ei astfel \'eenc\'e2t o alt\'e3 tranzac\'feie s\'e3 nu le poat\'e3 modifica.
\par {\pntext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li360\ri0\nowidctlpar\tx360\tx1129{\*\pn \pnlvlblt\ilvl0\ls5\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\faauto\ls5\rin0\lin360\itap0 {\b 
Durabilitatea }{\f34 - se refer\'e3 la faptul c\'e3 odat\'e3 ce tranzac\'feia este validat\'e3, efectele sale devin permanente \'bai vor fi \'eenscrise \'een baza de date. Efectele unei tranzac\'feii validate vor fi \'eenscrise \'ee
n baza de date chiar dac\'e3 dup\'e3 momentul valid\'e3rii apare un defect care \'eempiedic\'e3 \'eenscrierea normal\'e3 a rezultatelor tranzac\'feiei \'een baza de date; aceast\'e3 activitate va fi realizat\'e3 imediat dup\'e3 \'eenl\'e3turarea defec\'fe
iunii ivite. Sarcina asigur\'e3rii acestei propriet\'e3\'fei revine SGBD-ului, iar mecanismul prin care este realizat\'e3 are la baz\'e3 conceptul de jurnal. }{\b Jurnalul }{\f34 este un fi\'baier secven\'feial \'een care sunt \'eenregistrate toate opera
\'feiunile efectuate de fiecare tranzac\'feie din sistem. El eviden\'feiaz\'e3 toate opera\'feiunile executate deja, inclusiv starea dinainte \'bai cea de dup\'e3 a datelor. Dac\'e3 tranzac\'feia este complet executat\'e3, atunci modific\'e3
rile efectuate asupra datelor vor fi permanentizate \'bai se spune c\'e3 }{\i\f34 tranzac\'feia a fost comis\'e3}{; al}{\f34 tfel, sistemul va utiliza jurnalul pentru a restaura baza de date \'een starea ini\'feial\'e3 (cea dinaintea \'eenceperii tranzac
\'feiei) \'bai se spune c\'e3 }{\i\f34 tranzac\'feia a fost anulat\'e3}{.
\par }\pard\plain \s20\qj \fi720\li0\ri0\nowidctlpar\tx360\tx1129\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 \'cen cazul aplica\'feiilor cu baze de date distribuite pot apare tranzac\'feii distribuite. Aceste tranzac
\'feii fac mecanismul tranzac\'feional mai complicat. De aceea, toate SGBD-urile care suport\'e3 tranzac\'feii distribuite trebuie s\'e3 aib\'e3 un mecanism special de tratare a acestora, numit mecanismul de validare (comitere) \'een dou\'e3 faze.
\par }\pard\plain \qj \fi720\li0\ri0\nowidctlpar\tx360\tx1129\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b 2.5.2 Mecanismul de comi}{\b\f34 tere \'een dou\'e3 faze (Two-Phase Commit)}{
\par 
\par }{\f34 O tranzac\'feie este distribuit\'e3 dac\'e3 ea actualizeaz\'e3 date gestionate pe mai multe noduri, adic\'e3 ea acceseaz\'e3 date din mai multe tabele aflate pe servere diferite. De exemplu, tranzac\'feia }{\i\f34 Ad\'e3ugare v\'e2nzare nou\'e3}{
 este o tranz}{\f34 ac\'feie distribuit\'e3 dac\'e3 ea presupune inserarea \'een tabelele cu facturi \'bai linii facturi, aflate pe un nod, actualizarea tabelelor cu clien\'fei \'bai stocuri, aflate pe alte dou\'e3 noduri. Aceast\'e3 tranzac\'fe
ie va fi descompus\'e3 \'een trei subtranzac\'feii, transmise celor trei noduri implicate: cele dou\'e3 opera\'feiuni de insert, efectuate pe primul nod; opera\'feiunea de actualizare a soldului clientului, efectuat\'e3 pe nodul pe care este rezident\'e3
 tabela cu clien\'fei; opera\'feiunea de actualizare a stocului produselor de pe factur\'e3, efectuat\'e3 de cel de-al treilea nod, respectiv nodul pe care este stocat\'e3 tabela cu stocuri.
\par \'cen exemplul nostru, fiecare din cele trei noduri va fi responsabil de garantarea local\'e3 a propriet\'e3\'feilor ACID. \'cen plus, mecanismul tranzac\'feional \'een cazul tranzac\'feiilor distribuite trebuie s\'e3 garanteze:
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\jclisttab\tx1429\faauto\ls29\rin0\lin1429\itap0 {\b\f34 Atomicitatea global\'e3}{\f34 , adic\'e3
 toate nodurile implicate \'een execu\'feia unei tranzac\'feii distribuite s\'e3 finalizeze \'een acela\'bai mod partea lor de tranzac\'feie (validarea sau anularea). Nu este permis ca unele noduri s\'e3 valideze partea lor de tranzac\'feie, iar altele s
\'e3 o anuleze.
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\b\f34 Evitarea bloc\'e3rilor globale}{\f34 , \'een care mai multe noduri s\'e3 fie blocate simultan.
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\b\f34 Serializarea global\'e3}{\f34 , care trebuie aplicat\'e3 tuturor tranzac\'feiilor, distribuite \'bai locale.
\par }\pard \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f34 Atomicitatea global\'e3 a unei tranzac\'feii este asigurat\'e3 de SGBD-uri prin intermediul }{\b mecanismului Two Phase Commit (2 PC)}{\f34 . Dup\'e3 cum sugereaz\'e3 \'ba
i numele, acest mecanism presupune validarea unei tranzac\'feii \'een dou\'e3 faze. \'cen prima faz\'e3, fiecare server implicat (pe care se afl\'e3 datele actualizate de tranzac\'feie) execut\'e3 partea sa din tranzac\'feie, dup\'e3
 care transmite un mesaj c\'e3tre serverul de comitere, desemnat anterior, prin care-l anun\'fe\'e3 c\'e3 este preg\'e3tit s\'e3 comit\'e3 opera\'feiunile executate. Aceast\'e3 faz\'e3 mai este numit\'e3 \'bai }{\i\f34 comiterea local\'e3}{\f34 . Dac\'e3
 toate serverele implicate valideaz\'e3 opera\'feiunile executate, atunci serverul de comitere va \'eenregistra tranzac\'feia \'bai va transmite un mesaj c\'e3tre toate serverele implicate pentru comiterea tranzac\'feiei. Astfel, tranzac\'feia este comis
\'e3, cu excep\'feia situa\'feiilor \'een care apar probleme de func\'feionare la unul din servere; dac\'e3 cel pu\'fein un server \'93cade\'94 pe parcursul celei de-a dou\'e3 faze, serverul de comitere anuleaz\'e3 \'eentreaga tranzac\'feie \'bai instruie
\'bate celelalte servere s\'e3 anuleze opera\'feiunile pe care le-au executat. Aceast\'e3 faz\'e3 se mai nume\'bate }{\i\f34 comiterea/anularea global\'e3}{.
\par }{\f34 \'cen cazul ORACLE, mecanismul 2 PC presupune parcurgerea a urm\'e3toarelor TREI faze:
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li1429\ri0\nowidctlpar\jclisttab\tx1429\faauto\ls28\rin0\lin1429\itap0 {\b\f34 Faza de preg\'e3tire}{\f34 , \'ee
n care coordonatorul global instruie\'bate toate nodurile implicate s\'e3 preg\'e3teasc\'e3 comiterea tranzac\'feiei, cu excep\'feia nodului de comitere. Fiecare nod \'een parte va verifica dac\'e3 poate s\'e3 comit\'e3 tranzac\'feia \'bai va transmite r
\'e3spunsul s\'e3u coordonatorului global, r\'e3m\'e2n\'e2nd \'een a\'bateptarea indica\'feiilor acestuia dac\'e3 s\'e3 comit\'e3 sau s\'e3 anuleze tranzac\'feia \'een func\'feie de r\'e3spunsurile celorlalte noduri. Oricum, din momentul \'ee
n care nodul a transmis r\'e3spunsul el va garanta fie comiterea tranzac\'feiei fie anularea acesteia. Din momentul \'een care toate nodurile sunt preg\'e3tite \'bai p\'e2n\'e3 la comiterea sau anularea modific\'e3rilor, se spune c\'e3 tranzac\'feia este 
\'een dubiu.
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\b Faza de validare}{\f34  realizeaz\'e3 comiterea propriu-zis\'e3 a tranzac\'feiei distribuite (dac\'e3 toate nodurile au r\'e3spuns pozitiv). \'cen aceast\'e3
 faz\'e3, coordonatorul global \'eei spune nodului de comitere s\'e3 efectueze comiterea, iar dup\'e3 ce prime\'bate confirmarea de la acesta va transmite c\'e2te un mesaj tuturor nodurilor implicate prin care s\'e3 le cear\'e3 s\'e3 comit\'e3 tranzac\'fe
ia, dup\'e3 care va a\'batepta confirm\'e3rile din partea acestora. \'cen momentul \'een care au fost primite toate confirm\'e3rile, faza de comitere este complet\'e3, iar consisten\'fea bazei de date globale este asigurat\'e3.
\par {\listtext\pard\plain\f3\lang1048\langfe1033\langnp1048 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\b Faza de uitare}{\f34 , \'een care nodul de comitere \'bai coordonatorul global \'baterg toate informa\'feiile privind starea tranzac\'fe
iei ce tocmai a fost comis\'e3.
\par }\pard\plain \s22\qj \fi426\li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f28\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f34\fs24\lang1048\langfe1033\langnp1048 Dac\'e3 se \'eent\'e2mpl\'e3 ca una din cele trei faze s
\'e3 nu poat\'e3 fi realizat\'e3 complet, atunci tranzac\'feia respectiv\'e3 va fi \'een starea \'84\'een dubiu\'94. O tranzac\'feie distribuit\'e3 poate ajunge \'een aceast\'e3 stare datorit\'e3 apari\'fe
iei unor defecte ale unuia din serverele de baze de date implicate, \'eentreruperii conexiunii de re\'feea \'eentre dou\'e3 sau mai multe servere Oracle sau unor erori care privesc logica aplica\'feiei utilizatorului (de exemplu apari\'fe
ia unor erori care nu sunt gestionate prin program, iar aplica\'feia se blocheaz\'e3).}{\f0\fs24 
\par }{\f0\fs24\lang1048\langfe1033\langnp1048 Mecanismul 2 PC din Oracle este complet transpa}{\f34\fs24\lang1048\langfe1033\langnp1048 rent utilizatorilor. Totu\'bai, intimit\'e3\'feile acestui mecanism trebuie cunoscute pentru a putea interveni \'een cuno
\'batin\'fe\'e3 de cauz\'e3 dac\'e3 se ivesc unele probleme generate de \'eentreruperea mecanismului.
\par }\pard\plain \qj \fi709\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\f34 O alt\'e3 problem\'e3 legat\'e3 de procesarea tranzac\'feiilor prive\'bate }{\b utilizarea schemelor de blocare}{\f34 
 pentru protejarea \'eenregistr\'e3rilor bazei de date pe timpul acces\'e3rii acestora \'eempotriva opera\'feiunilor de actualizare. Dac\'e3 o tranzac\'feie blocheaz\'e3 o \'eenregistrare, ea nu poate fi modificat\'e3 dec\'e2t dup\'e3 deblocarea ei.

\par }{C\'e2nd clientul }{\f34 solicit\'e3 date, serverul le transmite \'een blocuri. Pentru a permite clientului s\'e3 modifice datele, serverul trebuie s\'e3 previn\'e3 modificarea datelor de c\'e3tre o alt\'e3 aplica\'feie dup\'e3
 ce acestea au fost trimise clientului, bloc\'e2nd aceste date.
\par }{Cel mai adesea se ut}{\f34 ilizeaz\'e3 }{\i\f34 blocarea exclusiv\'e3}{\f34 , caz \'een care alte tranzac\'feii nu mai pot accesa datele astfel blocate. O alternativ\'e3 o constituie }{\i controlul concurent optimist (optimistic concurrency control)}{
\f34  care porne\'bate de la premisa c\'e3 o \'eenregistrare este, de regul\'e3, actualizat\'e3 de o singur\'e3 aplica\'feie, la un moment dat. Aceast\'e3 metod\'e3 asigur\'e3 doar controlul coliziunilor legate de actualizare, \'ee
n momentul comiterii. Dac\'e3 \'eenregistrarea respectiv\'e3 a fost citit\'e3 de o alt\'e3 aplica\'feie, ea va fi \'een\'batiin\'feat\'e3 de eventualele opera\'feiuni de actualizare.
\par }{
\par }\pard\plain \s1\qc \li0\ri0\keepn\nowidctlpar\faauto\outlinelevel0\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {\b Bibliografie
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1048\langfe1033\cgrid\langnp1048\langfenp1033 {
\par {\pntext\pard\plain\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec\pnstart1\pnindent360 {\pntxta .}}\faauto\ls6\rin0\lin720\itap0 {\f34 
Dollinger, R., Baze de date \'bai gestiunea tranzac\'feiilor, Ed. Albastr\'e3, Cluj-Napoca, 1999
\par {\pntext\pard\plain\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec\pnstart1\pnindent360 {\pntxta .}}\faauto\ls6\rin0\lin720\itap0 {Fotache, M., }{
\i\f34 Baze de date rela\'feionale. Organizare ;i interogare}{, Ed. Junimea, Ia;i, 1996
\par {\pntext\pard\plain\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 3.\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart2\pnindent360 {\pntxta .}}\faauto\ls7\rin0\lin720\itap0 {
Halpin, T., Information Modeling and Relational Databases, Morgan Kaufmann Publishers, Inc, 2001
\par {\pntext\pard\plain\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 4.\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart3\pnindent360 {\pntxta .}}\faauto\ls8\rin0\lin720\itap0 {
Hoffer, J.A., George, J.F., Valacich, J.S., }{\i Modern Systems Analysis and Design, second edition}{, Addison-Wesley, 1999
\par {\pntext\pard\plain\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 5.\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec\pnstart4\pnindent360 {\pntxta .}}\faauto\ls9\rin0\lin720\itap0 {Oprea, D., }{
\i\f34 Analiza \'bai proiectarea sistemelor informa\'feionale e}{\i conomice}{\f34 , Ed. Polirom, Ia\'bai, 1999
\par {\pntext\pard\plain\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 6.\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec\pnstart4\pnindent360 {\pntxta .}}\faauto\ls9\rin0\lin720\itap0 {Simsion, G.C., }{
\i Data Modeling Essentials. Analysis, Design, and Innovation}{, second edition, The Coriolis Group, 2001
\par {\pntext\pard\plain\lang1048\langfe1033\langnp1048 \hich\af0\dbch\af0\loch\f0 7.\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec\pnstart5\pnindent360 {\pntxta .}}\faauto\ls10\rin0\lin720\itap0 {
Teorey, T.J., Database Modeling & Design, Morgan Kaufmann Publishers, Inc, 1999
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par }}